
DA2TASK3_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000100  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000131  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000de  00000000  00000000  000002d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000151  00000000  00000000  000003b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000187  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000ee  00000000  00000000  000006af  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  0000079d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7e 00 	jmp	0xfc	; 0xfc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRB = 0xFF;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	84 b9       	out	0x04, r24	; 4
	DDRC = 0x60;
  84:	80 e6       	ldi	r24, 0x60	; 96
  86:	87 b9       	out	0x07, r24	; 7
	PORTB = 0;
  88:	15 b8       	out	0x05, r1	; 5
	//PORTC = 0;
	int i = 1;
	int five = 0;
	int ten = 0;
  8a:	40 e0       	ldi	r20, 0x00	; 0
  8c:	50 e0       	ldi	r21, 0x00	; 0
	DDRB = 0xFF;
	DDRC = 0x60;
	PORTB = 0;
	//PORTC = 0;
	int i = 1;
	int five = 0;
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	90 e0       	ldi	r25, 0x00	; 0
{
	DDRB = 0xFF;
	DDRC = 0x60;
	PORTB = 0;
	//PORTC = 0;
	int i = 1;
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	30 e0       	ldi	r19, 0x00	; 0
				ten = 0;
				five = 0;
			}
			if (five==5)
			{
				PORTC = 0x20;
  96:	e0 e2       	ldi	r30, 0x20	; 32
				five = 0;
  98:	70 e0       	ldi	r23, 0x00	; 0
  9a:	60 e0       	ldi	r22, 0x00	; 0
			five++;
			ten++;
			i = 0;
			if (ten == 10)
			{
				PORTC = 0x40;
  9c:	f0 e4       	ldi	r31, 0x40	; 64
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <main+0x24>
  a0:	27 2f       	mov	r18, r23
  a2:	36 2f       	mov	r19, r22
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a4:	af e7       	ldi	r26, 0x7F	; 127
  a6:	ba e1       	ldi	r27, 0x1A	; 26
  a8:	c6 e0       	ldi	r28, 0x06	; 6
  aa:	a1 50       	subi	r26, 0x01	; 1
  ac:	b0 40       	sbci	r27, 0x00	; 0
  ae:	c0 40       	sbci	r28, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <main+0x2a>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <main+0x34>
  b4:	00 00       	nop
	int five = 0;
	int ten = 0;
	while(1)
	{
		_delay_us(250000);
		if (i == 1)
  b6:	21 30       	cpi	r18, 0x01	; 1
  b8:	31 05       	cpc	r19, r1
  ba:	b1 f4       	brne	.+44     	; 0xe8 <main+0x68>
		{
			PORTB++;
  bc:	25 b1       	in	r18, 0x05	; 5
  be:	2f 5f       	subi	r18, 0xFF	; 255
  c0:	25 b9       	out	0x05, r18	; 5
			five++;
			ten++;
  c2:	4f 5f       	subi	r20, 0xFF	; 255
  c4:	5f 4f       	sbci	r21, 0xFF	; 255
			i = 0;
			if (ten == 10)
  c6:	4a 30       	cpi	r20, 0x0A	; 10
  c8:	51 05       	cpc	r21, r1
  ca:	31 f4       	brne	.+12     	; 0xd8 <main+0x58>
			{
				PORTC = 0x40;
  cc:	f8 b9       	out	0x08, r31	; 8
				ten = 0;
  ce:	47 2f       	mov	r20, r23
  d0:	56 2f       	mov	r21, r22
				five = 0;
  d2:	87 2f       	mov	r24, r23
  d4:	96 2f       	mov	r25, r22
  d6:	e4 cf       	rjmp	.-56     	; 0xa0 <main+0x20>
	{
		_delay_us(250000);
		if (i == 1)
		{
			PORTB++;
			five++;
  d8:	01 96       	adiw	r24, 0x01	; 1
			{
				PORTC = 0x40;
				ten = 0;
				five = 0;
			}
			if (five==5)
  da:	85 30       	cpi	r24, 0x05	; 5
  dc:	91 05       	cpc	r25, r1
  de:	01 f7       	brne	.-64     	; 0xa0 <main+0x20>
			{
				PORTC = 0x20;
  e0:	e8 b9       	out	0x08, r30	; 8
				five = 0;
  e2:	87 2f       	mov	r24, r23
  e4:	96 2f       	mov	r25, r22
  e6:	dc cf       	rjmp	.-72     	; 0xa0 <main+0x20>
  e8:	2f e7       	ldi	r18, 0x7F	; 127
  ea:	3a e1       	ldi	r19, 0x1A	; 26
  ec:	a6 e0       	ldi	r26, 0x06	; 6
  ee:	21 50       	subi	r18, 0x01	; 1
  f0:	30 40       	sbci	r19, 0x00	; 0
  f2:	a0 40       	sbci	r26, 0x00	; 0
  f4:	e1 f7       	brne	.-8      	; 0xee <main+0x6e>
  f6:	00 c0       	rjmp	.+0      	; 0xf8 <main+0x78>
  f8:	00 00       	nop
  fa:	e0 cf       	rjmp	.-64     	; 0xbc <main+0x3c>

000000fc <_exit>:
  fc:	f8 94       	cli

000000fe <__stop_program>:
  fe:	ff cf       	rjmp	.-2      	; 0xfe <__stop_program>
