
DA2TASK1_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000010a  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c2  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000137  00000000  00000000  0000031c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000454  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000182  00000000  00000000  00000478  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_ranges 00000010  00000000  00000000  000005fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC |= (1<<PORTC0);
  80:	38 9a       	sbi	0x07, 0	; 7
	PORTC= 1;
  82:	81 e0       	ldi	r24, 0x01	; 1
  84:	88 b9       	out	0x08, r24	; 8
		{
			PORTC = 0;
		}
		else
		{
			PORTC = 1;
  86:	91 e0       	ldi	r25, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f e7       	ldi	r18, 0x7F	; 127
  8a:	3a e1       	ldi	r19, 0x1A	; 26
  8c:	86 e0       	ldi	r24, 0x06	; 6
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	80 40       	sbci	r24, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0xe>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x18>
  98:	00 00       	nop
	PORTC= 1;
    while(1)
    {
		_delay_us(250000);
		// 	PORTC ^= 1; INSTEAD OF THIS CRAP BELOW
		if (PORTC == 1)
  9a:	88 b1       	in	r24, 0x08	; 8
  9c:	81 30       	cpi	r24, 0x01	; 1
  9e:	11 f4       	brne	.+4      	; 0xa4 <main+0x24>
		{
			PORTC = 0;
  a0:	18 b8       	out	0x08, r1	; 8
  a2:	f2 cf       	rjmp	.-28     	; 0x88 <main+0x8>
		}
		else
		{
			PORTC = 1;
  a4:	98 b9       	out	0x08, r25	; 8
  a6:	f0 cf       	rjmp	.-32     	; 0x88 <main+0x8>

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
