
DA2TASK4_C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00000190  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000190  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800102  00800102  00000226  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000226  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000000dc  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000008d  00000000  00000000  0000035a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000000d9  00000000  00000000  000003e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  000004c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000151  00000000  00000000  00000508  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000049  00000000  00000000  00000659  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000006a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e9       	ldi	r30, 0x90	; 144
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 30       	cpi	r26, 0x06	; 6
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 c6 00 	jmp	0x18c	; 0x18c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

int i = 1, five, ten;

int main(void)
{
   DDRB = 0xFF;
  a6:	8f ef       	ldi	r24, 0xFF	; 255
  a8:	84 b9       	out	0x04, r24	; 4
   DDRC = 0x60;
  aa:	80 e6       	ldi	r24, 0x60	; 96
  ac:	87 b9       	out	0x07, r24	; 7
   PORTC = 0;
  ae:	18 b8       	out	0x08, r1	; 8
   PORTB = 0;
  b0:	15 b8       	out	0x05, r1	; 5
   
   TCCR1A = 0x00;
  b2:	10 92 80 00 	sts	0x0080, r1
   TCCR1B = 0x0D;
  b6:	8d e0       	ldi	r24, 0x0D	; 13
  b8:	80 93 81 00 	sts	0x0081, r24
   
   OCR1A = 0x07A1;
  bc:	81 ea       	ldi	r24, 0xA1	; 161
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	90 93 89 00 	sts	0x0089, r25
  c4:	80 93 88 00 	sts	0x0088, r24
   
   TIMSK1 |= (1<<OCIE1A);
  c8:	ef e6       	ldi	r30, 0x6F	; 111
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
   sei();
  d2:	78 94       	sei
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x2e>

000000d6 <__vector_11>:
	   
   }
}

ISR(TIMER1_COMPA_vect)
{
  d6:	1f 92       	push	r1
  d8:	0f 92       	push	r0
  da:	0f b6       	in	r0, 0x3f	; 63
  dc:	0f 92       	push	r0
  de:	11 24       	eor	r1, r1
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	if (i==1)
  e4:	80 91 00 01 	lds	r24, 0x0100
  e8:	90 91 01 01 	lds	r25, 0x0101
  ec:	81 30       	cpi	r24, 0x01	; 1
  ee:	91 05       	cpc	r25, r1
  f0:	99 f5       	brne	.+102    	; 0x158 <__vector_11+0x82>
	{
	PORTB++;
  f2:	85 b1       	in	r24, 0x05	; 5
  f4:	8f 5f       	subi	r24, 0xFF	; 255
  f6:	85 b9       	out	0x05, r24	; 5
	five++;
  f8:	80 91 04 01 	lds	r24, 0x0104
  fc:	90 91 05 01 	lds	r25, 0x0105
 100:	01 96       	adiw	r24, 0x01	; 1
 102:	90 93 05 01 	sts	0x0105, r25
 106:	80 93 04 01 	sts	0x0104, r24
	ten++;
 10a:	80 91 02 01 	lds	r24, 0x0102
 10e:	90 91 03 01 	lds	r25, 0x0103
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 03 01 	sts	0x0103, r25
 118:	80 93 02 01 	sts	0x0102, r24
	i = 0;
 11c:	10 92 01 01 	sts	0x0101, r1
 120:	10 92 00 01 	sts	0x0100, r1
	
	if (ten == 10)
 124:	0a 97       	sbiw	r24, 0x0a	; 10
 126:	59 f4       	brne	.+22     	; 0x13e <__vector_11+0x68>
	{
		PORTC = 0x40;
 128:	80 e4       	ldi	r24, 0x40	; 64
 12a:	88 b9       	out	0x08, r24	; 8
		ten = 0;
 12c:	10 92 03 01 	sts	0x0103, r1
 130:	10 92 02 01 	sts	0x0102, r1
		five = 0;
 134:	10 92 05 01 	sts	0x0105, r1
 138:	10 92 04 01 	sts	0x0104, r1
 13c:	15 c0       	rjmp	.+42     	; 0x168 <__vector_11+0x92>
	}
	if (five==5)
 13e:	80 91 04 01 	lds	r24, 0x0104
 142:	90 91 05 01 	lds	r25, 0x0105
 146:	05 97       	sbiw	r24, 0x05	; 5
 148:	79 f4       	brne	.+30     	; 0x168 <__vector_11+0x92>
	{
		PORTC = 0x20;
 14a:	80 e2       	ldi	r24, 0x20	; 32
 14c:	88 b9       	out	0x08, r24	; 8
		five = 0;
 14e:	10 92 05 01 	sts	0x0105, r1
 152:	10 92 04 01 	sts	0x0104, r1
 156:	08 c0       	rjmp	.+16     	; 0x168 <__vector_11+0x92>
	}
	}
	else if (i == 0)
 158:	89 2b       	or	r24, r25
 15a:	31 f4       	brne	.+12     	; 0x168 <__vector_11+0x92>
	{
		i=1;
 15c:	81 e0       	ldi	r24, 0x01	; 1
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	90 93 01 01 	sts	0x0101, r25
 164:	80 93 00 01 	sts	0x0100, r24
	}
	TCCR1A = 0x00;
 168:	10 92 80 00 	sts	0x0080, r1
	TCCR1B = 0x0D;
 16c:	8d e0       	ldi	r24, 0x0D	; 13
 16e:	80 93 81 00 	sts	0x0081, r24
	
	OCR1A = 0x07A1;
 172:	81 ea       	ldi	r24, 0xA1	; 161
 174:	97 e0       	ldi	r25, 0x07	; 7
 176:	90 93 89 00 	sts	0x0089, r25
 17a:	80 93 88 00 	sts	0x0088, r24
	
 17e:	9f 91       	pop	r25
 180:	8f 91       	pop	r24
 182:	0f 90       	pop	r0
 184:	0f be       	out	0x3f, r0	; 63
 186:	0f 90       	pop	r0
 188:	1f 90       	pop	r1
 18a:	18 95       	reti

0000018c <_exit>:
 18c:	f8 94       	cli

0000018e <__stop_program>:
 18e:	ff cf       	rjmp	.-2      	; 0x18e <__stop_program>
