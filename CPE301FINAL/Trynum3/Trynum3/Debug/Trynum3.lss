
Trynum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  00001154  000011e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  008001b6  008001b6  0000129e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000129e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  0000133c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d97  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000232  00000000  00000000  00002163  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000043a  00000000  00000000  00002395  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000015c  00000000  00000000  000027d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002c5  00000000  00000000  0000292c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000087d  00000000  00000000  00002bf1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  0000346e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e5       	ldi	r30, 0x54	; 84
      7c:	f1 e1       	ldi	r31, 0x11	; 17
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3b       	cpi	r26, 0xB6	; 182
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 eb       	ldi	r26, 0xB6	; 182
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 35       	cpi	r26, 0x57	; 87
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cc 01 	call	0x398	; 0x398 <main>
      9e:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
      a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
      aa:	80 e2       	ldi	r24, 0x20	; 32
      ac:	80 93 b8 00 	sts	0x00B8, r24
      b0:	08 95       	ret

000000b2 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
 
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      b2:	94 ea       	ldi	r25, 0xA4	; 164
      b4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
      b8:	4f ef       	ldi	r20, 0xFF	; 255
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      c0:	ec eb       	ldi	r30, 0xBC	; 188
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	90 81       	ld	r25, Z
      c6:	99 23       	and	r25, r25
      c8:	34 f0       	brlt	.+12     	; 0xd6 <i2c_start+0x24>
      ca:	41 50       	subi	r20, 0x01	; 1
      cc:	51 09       	sbc	r21, r1
      ce:	61 09       	sbc	r22, r1
      d0:	71 09       	sbc	r23, r1
      d2:	c0 f7       	brcc	.-16     	; 0xc4 <i2c_start+0x12>
      d4:	04 c0       	rjmp	.+8      	; 0xde <i2c_start+0x2c>
	if(i2c_timer == 0)
      d6:	45 2b       	or	r20, r21
      d8:	46 2b       	or	r20, r22
      da:	47 2b       	or	r20, r23
      dc:	41 f1       	breq	.+80     	; 0x12e <i2c_start+0x7c>
	{
		return 1;
	}

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
      de:	90 91 b9 00 	lds	r25, 0x00B9
      e2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      e4:	98 30       	cpi	r25, 0x08	; 8
      e6:	11 f0       	breq	.+4      	; 0xec <i2c_start+0x3a>
      e8:	90 31       	cpi	r25, 0x10	; 16
      ea:	19 f5       	brne	.+70     	; 0x132 <i2c_start+0x80>

	// send device address
	TWDR = address;
      ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
      f0:	84 e8       	ldi	r24, 0x84	; 132
      f2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      fe:	ec eb       	ldi	r30, 0xBC	; 188
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	20 81       	ld	r18, Z
     104:	22 23       	and	r18, r18
     106:	2c f0       	brlt	.+10     	; 0x112 <i2c_start+0x60>
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	a1 09       	sbc	r26, r1
     10c:	b1 09       	sbc	r27, r1
     10e:	c8 f7       	brcc	.-14     	; 0x102 <i2c_start+0x50>
     110:	04 c0       	rjmp	.+8      	; 0x11a <i2c_start+0x68>
	if(i2c_timer == 0)
     112:	89 2b       	or	r24, r25
     114:	8a 2b       	or	r24, r26
     116:	8b 2b       	or	r24, r27
     118:	71 f0       	breq	.+28     	; 0x136 <i2c_start+0x84>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     11a:	90 91 b9 00 	lds	r25, 0x00B9
     11e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) 
     120:	98 31       	cpi	r25, 0x18	; 24
     122:	59 f0       	breq	.+22     	; 0x13a <i2c_start+0x88>
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 34       	cpi	r25, 0x40	; 64
     128:	49 f4       	brne	.+18     	; 0x13c <i2c_start+0x8a>
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret
	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
	{
		return 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	08 95       	ret
	}

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	08 95       	ret
		{
			//USART_tx_string(test1);
			return 1;
		}

	return 0;
     13a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     13c:	08 95       	ret

0000013e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     144:	ec eb       	ldi	r30, 0xBC	; 188
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	64 ea       	ldi	r22, 0xA4	; 164
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     14e:	a9 eb       	ldi	r26, 0xB9	; 185
     150:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     152:	cb eb       	ldi	r28, 0xBB	; 187
     154:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     156:	74 e8       	ldi	r23, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     158:	14 e9       	ldi	r17, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     15a:	60 83       	st	Z, r22
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     15c:	25 2f       	mov	r18, r21
     15e:	34 2f       	mov	r19, r20
     160:	90 81       	ld	r25, Z
     162:	99 23       	and	r25, r25
     164:	34 f0       	brlt	.+12     	; 0x172 <i2c_start_wait+0x34>
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	21 15       	cp	r18, r1
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	39 07       	cpc	r19, r25
     170:	b9 f7       	brne	.-18     	; 0x160 <i2c_start_wait+0x22>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     172:	9c 91       	ld	r25, X
     174:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     176:	98 30       	cpi	r25, 0x08	; 8
     178:	11 f0       	breq	.+4      	; 0x17e <i2c_start_wait+0x40>
     17a:	90 31       	cpi	r25, 0x10	; 16
     17c:	71 f7       	brne	.-36     	; 0x15a <i2c_start_wait+0x1c>
    
    	// send device address
    	TWDR = address;
     17e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     180:	70 83       	st	Z, r23
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     182:	25 2f       	mov	r18, r21
     184:	34 2f       	mov	r19, r20
     186:	90 81       	ld	r25, Z
     188:	99 23       	and	r25, r25
     18a:	34 f0       	brlt	.+12     	; 0x198 <i2c_start_wait+0x5a>
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	3f 4f       	sbci	r19, 0xFF	; 255
     190:	21 15       	cp	r18, r1
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	39 07       	cpc	r19, r25
     196:	b9 f7       	brne	.-18     	; 0x186 <i2c_start_wait+0x48>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     198:	9c 91       	ld	r25, X
     19a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     19c:	90 32       	cpi	r25, 0x20	; 32
     19e:	11 f0       	breq	.+4      	; 0x1a4 <i2c_start_wait+0x66>
     1a0:	98 35       	cpi	r25, 0x58	; 88
     1a2:	69 f4       	brne	.+26     	; 0x1be <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1a4:	10 83       	st	Z, r17
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1a6:	25 2f       	mov	r18, r21
     1a8:	34 2f       	mov	r19, r20
     1aa:	90 81       	ld	r25, Z
     1ac:	94 ff       	sbrs	r25, 4
     1ae:	d5 cf       	rjmp	.-86     	; 0x15a <i2c_start_wait+0x1c>
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	21 15       	cp	r18, r1
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	39 07       	cpc	r19, r25
     1ba:	b9 f7       	brne	.-18     	; 0x1aa <i2c_start_wait+0x6c>
     1bc:	ce cf       	rjmp	.-100    	; 0x15a <i2c_start_wait+0x1c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	08 95       	ret

000001c6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1c6:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>

}/* i2c_rep_start */
     1ca:	08 95       	ret

000001cc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1cc:	84 e9       	ldi	r24, 0x94	; 148
     1ce:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	ec eb       	ldi	r30, 0xBC	; 188
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	20 81       	ld	r18, Z
     1dc:	24 ff       	sbrs	r18, 4
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <i2c_stop+0x1e>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	81 15       	cp	r24, r1
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	92 07       	cpc	r25, r18
     1e8:	c1 f7       	brne	.-16     	; 0x1da <i2c_stop+0xe>
     1ea:	08 95       	ret

000001ec <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     1fe:	ec eb       	ldi	r30, 0xBC	; 188
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	20 81       	ld	r18, Z
     204:	22 23       	and	r18, r18
     206:	2c f0       	brlt	.+10     	; 0x212 <i2c_write+0x26>
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	a1 09       	sbc	r26, r1
     20c:	b1 09       	sbc	r27, r1
     20e:	c8 f7       	brcc	.-14     	; 0x202 <i2c_write+0x16>
     210:	04 c0       	rjmp	.+8      	; 0x21a <i2c_write+0x2e>
	if(i2c_timer == 0)
     212:	89 2b       	or	r24, r25
     214:	8a 2b       	or	r24, r26
     216:	8b 2b       	or	r24, r27
     218:	41 f0       	breq	.+16     	; 0x22a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     21a:	90 91 b9 00 	lds	r25, 0x00B9
     21e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	98 32       	cpi	r25, 0x28	; 40
     224:	19 f4       	brne	.+6      	; 0x22c <i2c_write+0x40>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     22c:	08 95       	ret

0000022e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     22e:	84 ec       	ldi	r24, 0xC4	; 196
     230:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	20 81       	ld	r18, Z
     242:	22 23       	and	r18, r18
     244:	2c f0       	brlt	.+10     	; 0x250 <i2c_readAck+0x22>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	a1 09       	sbc	r26, r1
     24a:	b1 09       	sbc	r27, r1
     24c:	c8 f7       	brcc	.-14     	; 0x240 <i2c_readAck+0x12>
     24e:	04 c0       	rjmp	.+8      	; 0x258 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     250:	89 2b       	or	r24, r25
     252:	8a 2b       	or	r24, r26
     254:	8b 2b       	or	r24, r27
     256:	19 f0       	breq	.+6      	; 0x25e <i2c_readAck+0x30>
		return 0;

    return TWDR;
     258:	80 91 bb 00 	lds	r24, 0x00BB
     25c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     25e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     260:	08 95       	ret

00000262 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     270:	ec eb       	ldi	r30, 0xBC	; 188
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	20 81       	ld	r18, Z
     276:	22 23       	and	r18, r18
     278:	2c f0       	brlt	.+10     	; 0x284 <i2c_readNak+0x22>
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
     280:	c8 f7       	brcc	.-14     	; 0x274 <i2c_readNak+0x12>
     282:	04 c0       	rjmp	.+8      	; 0x28c <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     284:	89 2b       	or	r24, r25
     286:	8a 2b       	or	r24, r26
     288:	8b 2b       	or	r24, r27
     28a:	19 f0       	breq	.+6      	; 0x292 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     28c:	80 91 bb 00 	lds	r24, 0x00BB
     290:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     292:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     294:	08 95       	ret

00000296 <USART_tx_string>:


void USART_tx_string (char *data)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	while((*data!='\0')){
     29a:	fc 01       	movw	r30, r24
     29c:	20 81       	ld	r18, Z
     29e:	22 23       	and	r18, r18
     2a0:	69 f0       	breq	.+26     	; 0x2bc <USART_tx_string+0x26>
     2a2:	dc 01       	movw	r26, r24
     2a4:	11 96       	adiw	r26, 0x01	; 1
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
     2aa:	c6 ec       	ldi	r28, 0xC6	; 198
     2ac:	d0 e0       	ldi	r29, 0x00	; 0


void USART_tx_string (char *data)
{
	while((*data!='\0')){
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2ae:	90 81       	ld	r25, Z
     2b0:	95 ff       	sbrs	r25, 5
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <USART_tx_string+0x18>
		UDR0 = *data;
     2b4:	28 83       	st	Y, r18
}/* i2c_readNak */


void USART_tx_string (char *data)
{
	while((*data!='\0')){
     2b6:	2d 91       	ld	r18, X+
     2b8:	21 11       	cpse	r18, r1
     2ba:	f9 cf       	rjmp	.-14     	; 0x2ae <USART_tx_string+0x18>
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
		UDR0 = *data;
		data++;
	}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <usart_init>:


void usart_init (void)
{
	//synchronous usart, transmit 8-bit data
	UCSR0C = ((1<<UCSZ01)|(1<<UCSZ00)|(1<<UMSEL00));
     2c2:	86 e4       	ldi	r24, 0x46	; 70
     2c4:	80 93 c2 00 	sts	0x00C2, r24
	//115.2K now //old stuff//4800 Baud Rate from 8MHz clock
	UBRR0H = 0x00;//01;
     2c8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x22;//A0;
     2cc:	82 e2       	ldi	r24, 0x22	; 34
     2ce:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<TXEN0);	//enable transmitter
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	80 93 c1 00 	sts	0x00C1, r24
     2d8:	08 95       	ret

000002da <MPU6050_writereg>:
	}
}*/


void MPU6050_writereg(uint8_t accel, uint8_t reg, uint8_t val)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	d6 2f       	mov	r29, r22
     2e0:	c4 2f       	mov	r28, r20
	i2c_start(accel+I2C_WRITE);
     2e2:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write(reg);  // go to register e.g. 106 user control
     2e6:	8d 2f       	mov	r24, r29
     2e8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(val);  // set value e.g. to 0100 0000 FIFO enable
     2ec:	8c 2f       	mov	r24, r28
     2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();        // set stop condition = release bus
     2f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <MPU6050_signed_readreg>:
	i2c_stop();
	return raw;
}

int16_t MPU6050_signed_readreg(uint8_t accel, uint8_t reg)//read signed 16 bits
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	c8 2f       	mov	r28, r24
     302:	d6 2f       	mov	r29, r22
	i2c_start_wait(accel+I2C_WRITE); // set device address and write mode
     304:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start_wait>
	i2c_write(reg);                                  // ACCEL_OUT
     308:	8d 2f       	mov	r24, r29
     30a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_rep_start(accel+I2C_READ);    // set device address and read mode
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	8c 0f       	add	r24, r28
     312:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <i2c_rep_start>
	char raw1 = i2c_readAck();                    // read one intermediate byte
     316:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_readAck>
     31a:	c8 2f       	mov	r28, r24
	int16_t raw2 = (raw1<<8) | i2c_readNak();        // read last byte
     31c:	0e 94 31 01 	call	0x262	; 0x262 <i2c_readNak>
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	dc 2f       	mov	r29, r28
     324:	cc 27       	eor	r28, r28
     326:	c8 2b       	or	r28, r24
	i2c_stop();
     328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
	return raw2;
}
     32c:	ce 01       	movw	r24, r28
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <Init_MPU6050>:



void Init_MPU6050(uint8_t accel)
{
     334:	cf 93       	push	r28
     336:	c8 2f       	mov	r28, r24

	ret = i2c_start(accel+I2C_WRITE);       // set device address and write mode
     338:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
     33c:	80 93 56 02 	sts	0x0256, r24
	if ( ret )//== "1" )
     340:	88 23       	and	r24, r24
     342:	19 f0       	breq	.+6      	; 0x34a <Init_MPU6050+0x16>
	{

		//snprintf(outs,sizeof(outs),"failed to issue start condition \n\r");
		//USART_tx_string(outs);
		i2c_stop();
     344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
     348:	23 c0       	rjmp	.+70     	; 0x390 <Init_MPU6050+0x5c>
	}
	else
	{
		/* issuing start condition ok, device accessible */
		MPU6050_writereg(accel, 0x6B, 0x00); // reg 107 set value to 0000 0000 and wake up sensor
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	6b e6       	ldi	r22, 0x6B	; 107
     34e:	8c 2f       	mov	r24, r28
     350:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x19, 0x07); // reg 25 sample rate divider set value to 0000 1000 for 1000 Hz
     354:	47 e0       	ldi	r20, 0x07	; 7
     356:	69 e1       	ldi	r22, 0x19	; 25
     358:	8c 2f       	mov	r24, r28
     35a:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x1C, 0x18); // reg 28 acceleration configuration set value to 0001 1000 for 16g
     35e:	48 e1       	ldi	r20, 0x18	; 24
     360:	6c e1       	ldi	r22, 0x1C	; 28
     362:	8c 2f       	mov	r24, r28
     364:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		//MPU6050_writereg(accel, 0x1B, 0x18); // set gyro config value at 
		MPU6050_writereg(accel, 0x23, 0xF8); // reg 35 FIFO enable set value to 1111 1000 for all sensors not slave
     368:	48 ef       	ldi	r20, 0xF8	; 248
     36a:	63 e2       	ldi	r22, 0x23	; 35
     36c:	8c 2f       	mov	r24, r28
     36e:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x37, 0x10); // reg 55 interrupt configuration set value to 0001 0000 for logic level high and read clear
     372:	40 e1       	ldi	r20, 0x10	; 16
     374:	67 e3       	ldi	r22, 0x37	; 55
     376:	8c 2f       	mov	r24, r28
     378:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x38, 0x01); // reg 56 interrupt enable set value to 0000 0001 data ready creates interrupt
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	68 e3       	ldi	r22, 0x38	; 56
     380:	8c 2f       	mov	r24, r28
     382:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x6A, 0x40); // reg 106 user control set value to 0100 0000 FIFO enable
     386:	40 e4       	ldi	r20, 0x40	; 64
     388:	6a e6       	ldi	r22, 0x6A	; 106
     38a:	8c 2f       	mov	r24, r28
     38c:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		//snprintf(outs,sizeof(outs),"done start \n\r");
		//USART_tx_string(outs);
	}
	i2c_stop();
     390:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <main>:



int main(){
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	29 97       	sbiw	r28, 0x09	; 9
     3a2:	0f b6       	in	r0, 0x3f	; 63
     3a4:	f8 94       	cli
     3a6:	de bf       	out	0x3e, r29	; 62
     3a8:	0f be       	out	0x3f, r0	; 63
     3aa:	cd bf       	out	0x3d, r28	; 61
	
	DDRD = 0xF0;
     3ac:	80 ef       	ldi	r24, 0xF0	; 240
     3ae:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
     3b0:	17 b8       	out	0x07, r1	; 7
	
	//declare average calibrated accelerometer values
	//initialize calibarition values
	//declare accelerometer value strings

	usart_init();//initialize usart
     3b2:	0e 94 61 01 	call	0x2c2	; 0x2c2 <usart_init>
	//USART_tx_string(test);
	i2c_init();     // init I2C interface
     3b6:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ba:	2f ef       	ldi	r18, 0xFF	; 255
     3bc:	33 ed       	ldi	r19, 0xD3	; 211
     3be:	80 e3       	ldi	r24, 0x30	; 48
     3c0:	21 50       	subi	r18, 0x01	; 1
     3c2:	30 40       	sbci	r19, 0x00	; 0
     3c4:	80 40       	sbci	r24, 0x00	; 0
     3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x28>
     3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x32>
     3ca:	00 00       	nop
	_delay_ms(2000);  // Wait for 200 ms.
	Init_MPU6050(MPU60501);    // sensor init
     3cc:	80 ed       	ldi	r24, 0xD0	; 208
     3ce:	0e 94 9a 01 	call	0x334	; 0x334 <Init_MPU6050>
     3d2:	9f ef       	ldi	r25, 0xFF	; 255
     3d4:	e3 ed       	ldi	r30, 0xD3	; 211
     3d6:	f0 e3       	ldi	r31, 0x30	; 48
     3d8:	91 50       	subi	r25, 0x01	; 1
     3da:	e0 40       	sbci	r30, 0x00	; 0
     3dc:	f0 40       	sbci	r31, 0x00	; 0
     3de:	e1 f7       	brne	.-8      	; 0x3d8 <main+0x40>
     3e0:	00 c0       	rjmp	.+0      	; 0x3e2 <main+0x4a>
     3e2:	00 00       	nop
     3e4:	0a e0       	ldi	r16, 0x0A	; 10
     3e6:	10 e0       	ldi	r17, 0x00	; 0
	//snprintf(outs,sizeof(outs),"6050 initialized \n\r");
	//USART_tx_string(outs);
	for(int i = 0; i<10; i++)//get values for initial calibration
	{
			// read raw X acceleration from fifo
			xi1 += MPU6050_signed_readreg(MPU60501,0x3B);   
     3e8:	6b e3       	ldi	r22, 0x3B	; 59
     3ea:	80 ed       	ldi	r24, 0xD0	; 208
     3ec:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
			// read raw Y acceleration from fifo
			yi1 += MPU6050_signed_readreg(MPU60501,0x3D);   
     3f0:	6d e3       	ldi	r22, 0x3D	; 61
     3f2:	80 ed       	ldi	r24, 0xD0	; 208
     3f4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
			// read raw Z acceleration from fifo
			zi1 += MPU6050_signed_readreg(MPU60501,0x3F); 
     3f8:	6f e3       	ldi	r22, 0x3F	; 63
     3fa:	80 ed       	ldi	r24, 0xD0	; 208
     3fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
			
			//read raw x gryo
			gix += MPU6050_signed_readreg(MPU60501,0x45); 
     400:	65 e4       	ldi	r22, 0x45	; 69
     402:	80 ed       	ldi	r24, 0xD0	; 208
     404:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
			//read raw y gryo
			giy += MPU6050_signed_readreg(MPU60501,0x47); 
     408:	67 e4       	ldi	r22, 0x47	; 71
     40a:	80 ed       	ldi	r24, 0xD0	; 208
     40c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
			//read raw z gyro
			giz += MPU6050_signed_readreg(MPU60501,0x49);			
     410:	69 e4       	ldi	r22, 0x49	; 73
     412:	80 ed       	ldi	r24, 0xD0	; 208
     414:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     418:	01 50       	subi	r16, 0x01	; 1
     41a:	11 09       	sbc	r17, r1
	_delay_ms(2000);  // Wait for 200 ms.
	Init_MPU6050(MPU60501);    // sensor init
	_delay_ms(2000);     // Wait for 200 ms.
	//snprintf(outs,sizeof(outs),"6050 initialized \n\r");
	//USART_tx_string(outs);
	for(int i = 0; i<10; i++)//get values for initial calibration
     41c:	29 f7       	brne	.-54     	; 0x3e8 <main+0x50>
     41e:	2f ef       	ldi	r18, 0xFF	; 255
     420:	39 e6       	ldi	r19, 0x69	; 105
     422:	88 e1       	ldi	r24, 0x18	; 24
     424:	21 50       	subi	r18, 0x01	; 1
     426:	30 40       	sbci	r19, 0x00	; 0
     428:	80 40       	sbci	r24, 0x00	; 0
     42a:	e1 f7       	brne	.-8      	; 0x424 <main+0x8c>
     42c:	00 c0       	rjmp	.+0      	; 0x42e <main+0x96>
     42e:	00 00       	nop
	gix = gix/10;
	giy = giy/10;
	giz = giz/10;
	
	_delay_ms(1000);
	snprintf(ATs,sizeof(ATs), "AT+RST\r");
     430:	88 e0       	ldi	r24, 0x08	; 8
     432:	e0 e0       	ldi	r30, 0x00	; 0
     434:	f1 e0       	ldi	r31, 0x01	; 1
     436:	a8 ee       	ldi	r26, 0xE8	; 232
     438:	b1 e0       	ldi	r27, 0x01	; 1
     43a:	01 90       	ld	r0, Z+
     43c:	0d 92       	st	X+, r0
     43e:	8a 95       	dec	r24
     440:	e1 f7       	brne	.-8      	; 0x43a <main+0xa2>
	USART_tx_string(ATs);
     442:	88 ee       	ldi	r24, 0xE8	; 232
     444:	91 e0       	ldi	r25, 0x01	; 1
     446:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     44a:	9f ef       	ldi	r25, 0xFF	; 255
     44c:	e3 ed       	ldi	r30, 0xD3	; 211
     44e:	f0 e3       	ldi	r31, 0x30	; 48
     450:	91 50       	subi	r25, 0x01	; 1
     452:	e0 40       	sbci	r30, 0x00	; 0
     454:	f0 40       	sbci	r31, 0x00	; 0
     456:	e1 f7       	brne	.-8      	; 0x450 <main+0xb8>
     458:	00 c0       	rjmp	.+0      	; 0x45a <main+0xc2>
     45a:	00 00       	nop
	_delay_ms(2000);
	snprintf(ATs,sizeof(ATs), "AT+CIPMODE=0\r");
     45c:	8e e0       	ldi	r24, 0x0E	; 14
     45e:	e8 e0       	ldi	r30, 0x08	; 8
     460:	f1 e0       	ldi	r31, 0x01	; 1
     462:	a8 ee       	ldi	r26, 0xE8	; 232
     464:	b1 e0       	ldi	r27, 0x01	; 1
     466:	01 90       	ld	r0, Z+
     468:	0d 92       	st	X+, r0
     46a:	8a 95       	dec	r24
     46c:	e1 f7       	brne	.-8      	; 0x466 <main+0xce>
	USART_tx_string(ATs);
     46e:	88 ee       	ldi	r24, 0xE8	; 232
     470:	91 e0       	ldi	r25, 0x01	; 1
     472:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     476:	2f ef       	ldi	r18, 0xFF	; 255
     478:	39 e6       	ldi	r19, 0x69	; 105
     47a:	88 e1       	ldi	r24, 0x18	; 24
     47c:	21 50       	subi	r18, 0x01	; 1
     47e:	30 40       	sbci	r19, 0x00	; 0
     480:	80 40       	sbci	r24, 0x00	; 0
     482:	e1 f7       	brne	.-8      	; 0x47c <main+0xe4>
     484:	00 c0       	rjmp	.+0      	; 0x486 <main+0xee>
     486:	00 00       	nop
	_delay_ms(1000);
	snprintf(ATs,sizeof(ATs), "AT+CIPMUX=1\r");
     488:	8d e0       	ldi	r24, 0x0D	; 13
     48a:	e6 e1       	ldi	r30, 0x16	; 22
     48c:	f1 e0       	ldi	r31, 0x01	; 1
     48e:	a8 ee       	ldi	r26, 0xE8	; 232
     490:	b1 e0       	ldi	r27, 0x01	; 1
     492:	01 90       	ld	r0, Z+
     494:	0d 92       	st	X+, r0
     496:	8a 95       	dec	r24
     498:	e1 f7       	brne	.-8      	; 0x492 <main+0xfa>
	USART_tx_string(ATs);
     49a:	88 ee       	ldi	r24, 0xE8	; 232
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	e3 ed       	ldi	r30, 0xD3	; 211
     4a6:	f0 e3       	ldi	r31, 0x30	; 48
     4a8:	91 50       	subi	r25, 0x01	; 1
     4aa:	e0 40       	sbci	r30, 0x00	; 0
     4ac:	f0 40       	sbci	r31, 0x00	; 0
     4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x110>
     4b0:	00 c0       	rjmp	.+0      	; 0x4b2 <main+0x11a>
     4b2:	00 00       	nop
int main(){
	
	DDRD = 0xF0;
	DDRC = 0x00;
	int i=0;
	int wifiout = -1;
     4b4:	2f ef       	ldi	r18, 0xFF	; 255
     4b6:	2d 83       	std	Y+5, r18	; 0x05
     4b8:	ee 24       	eor	r14, r14
     4ba:	ea 94       	dec	r14
		//interupt
		//send code
		
	//za1 = 101;
	_delay_ms(100);
		snprintf(ATs,sizeof(ATs), "AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80\r");
     4bc:	0f 2e       	mov	r0, r31
     4be:	f8 ee       	ldi	r31, 0xE8	; 232
     4c0:	2f 2e       	mov	r2, r31
     4c2:	f1 e0       	ldi	r31, 0x01	; 1
     4c4:	3f 2e       	mov	r3, r31
     4c6:	f0 2d       	mov	r31, r0
     4c8:	0f 2e       	mov	r0, r31
     4ca:	fd e2       	ldi	r31, 0x2D	; 45
     4cc:	ff 2e       	mov	r15, r31
     4ce:	f0 2d       	mov	r31, r0
		USART_tx_string(ATs);
		_delay_ms(2000);
		snprintf(ATs,sizeof(ATs), "AT+CIPSEND=0,125\r");
     4d0:	0f 2e       	mov	r0, r31
     4d2:	f2 e1       	ldi	r31, 0x12	; 18
     4d4:	7f 2e       	mov	r7, r31
     4d6:	f0 2d       	mov	r31, r0
		USART_tx_string(ATs);
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
     4d8:	02 e6       	ldi	r16, 0x62	; 98
     4da:	11 e0       	ldi	r17, 0x01	; 1
		USART_tx_string(ATs);
		snprintf(ATs,sizeof(ATs), "\n\r");
     4dc:	0f 2e       	mov	r0, r31
     4de:	fa e0       	ldi	r31, 0x0A	; 10
     4e0:	4f 2e       	mov	r4, r31
     4e2:	fd e0       	ldi	r31, 0x0D	; 13
     4e4:	5f 2e       	mov	r5, r31
     4e6:	61 2c       	mov	r6, r1
     4e8:	f0 2d       	mov	r31, r0
	
	//Start infinite loop
	while(1){
		//grab 3 values, average, subtract calibration value, and divide by MSB
		// read raw X acceleration from fifo
		xa1 = MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B);   		
     4ea:	6b e3       	ldi	r22, 0x3B	; 59
     4ec:	80 ed       	ldi	r24, 0xD0	; 208
     4ee:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4f2:	6c 01       	movw	r12, r24
     4f4:	6b e3       	ldi	r22, 0x3B	; 59
     4f6:	80 ed       	ldi	r24, 0xD0	; 208
     4f8:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4fc:	c8 0e       	add	r12, r24
     4fe:	d9 1e       	adc	r13, r25
     500:	6b e3       	ldi	r22, 0x3B	; 59
     502:	80 ed       	ldi	r24, 0xD0	; 208
     504:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     508:	8c 0d       	add	r24, r12
     50a:	9d 1d       	adc	r25, r13
		xa1 = (2.00*(xa1/3.00))/2048.00;
     50c:	bc 01       	movw	r22, r24
     50e:	99 0f       	add	r25, r25
     510:	88 0b       	sbc	r24, r24
     512:	99 0b       	sbc	r25, r25
     514:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
     518:	20 e0       	ldi	r18, 0x00	; 0
     51a:	30 e0       	ldi	r19, 0x00	; 0
     51c:	40 e4       	ldi	r20, 0x40	; 64
     51e:	50 e4       	ldi	r21, 0x40	; 64
     520:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
     524:	9b 01       	movw	r18, r22
     526:	ac 01       	movw	r20, r24
     528:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e0       	ldi	r20, 0x00	; 0
     532:	5a e3       	ldi	r21, 0x3A	; 58
     534:	0e 94 56 05 	call	0xaac	; 0xaac <__mulsf3>
     538:	0e 94 92 04 	call	0x924	; 0x924 <__fixsfsi>
     53c:	4b 01       	movw	r8, r22
     53e:	5c 01       	movw	r10, r24
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
     540:	6d e3       	ldi	r22, 0x3D	; 61
     542:	80 ed       	ldi	r24, 0xD0	; 208
     544:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     548:	6c 01       	movw	r12, r24
     54a:	6d e3       	ldi	r22, 0x3D	; 61
     54c:	80 ed       	ldi	r24, 0xD0	; 208
     54e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     552:	9f 83       	std	Y+7, r25	; 0x07
     554:	8e 83       	std	Y+6, r24	; 0x06
     556:	6d e3       	ldi	r22, 0x3D	; 61
     558:	80 ed       	ldi	r24, 0xD0	; 208
     55a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     55e:	99 87       	std	Y+9, r25	; 0x09
     560:	88 87       	std	Y+8, r24	; 0x08
		ya1 = (2.00*(ya1/3.00))/2048.00;
		// read raw Z acceleration from fifo
		za1 = MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F);   
     562:	6f e3       	ldi	r22, 0x3F	; 63
     564:	80 ed       	ldi	r24, 0xD0	; 208
     566:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     56a:	9a 83       	std	Y+2, r25	; 0x02
     56c:	89 83       	std	Y+1, r24	; 0x01
     56e:	6f e3       	ldi	r22, 0x3F	; 63
     570:	80 ed       	ldi	r24, 0xD0	; 208
     572:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     576:	e9 81       	ldd	r30, Y+1	; 0x01
     578:	fa 81       	ldd	r31, Y+2	; 0x02
     57a:	e8 0f       	add	r30, r24
     57c:	f9 1f       	adc	r31, r25
     57e:	fa 83       	std	Y+2, r31	; 0x02
     580:	e9 83       	std	Y+1, r30	; 0x01
     582:	6f e3       	ldi	r22, 0x3F	; 63
     584:	80 ed       	ldi	r24, 0xD0	; 208
     586:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     58a:	29 81       	ldd	r18, Y+1	; 0x01
     58c:	3a 81       	ldd	r19, Y+2	; 0x02
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
		za1 = (2.00*(za1/3.00))/2048.00;
     592:	bc 01       	movw	r22, r24
     594:	99 0f       	add	r25, r25
     596:	88 0b       	sbc	r24, r24
     598:	99 0b       	sbc	r25, r25
     59a:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
     59e:	20 e0       	ldi	r18, 0x00	; 0
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e4       	ldi	r20, 0x40	; 64
     5a4:	50 e4       	ldi	r21, 0x40	; 64
     5a6:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	30 e0       	ldi	r19, 0x00	; 0
     5b6:	40 e0       	ldi	r20, 0x00	; 0
     5b8:	5a e3       	ldi	r21, 0x3A	; 58
     5ba:	0e 94 56 05 	call	0xaac	; 0xaac <__mulsf3>
     5be:	69 83       	std	Y+1, r22	; 0x01
     5c0:	7a 83       	std	Y+2, r23	; 0x02
     5c2:	8b 83       	std	Y+3, r24	; 0x03
     5c4:	9c 83       	std	Y+4, r25	; 0x04

	//gyros
		gyrox = MPU6050_signed_readreg(MPU60501,0x45)+MPU6050_signed_readreg(MPU60501,0x45)+MPU6050_signed_readreg(MPU60501,0x45);
     5c6:	65 e4       	ldi	r22, 0x45	; 69
     5c8:	80 ed       	ldi	r24, 0xD0	; 208
     5ca:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5ce:	65 e4       	ldi	r22, 0x45	; 69
     5d0:	80 ed       	ldi	r24, 0xD0	; 208
     5d2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5d6:	65 e4       	ldi	r22, 0x45	; 69
     5d8:	80 ed       	ldi	r24, 0xD0	; 208
     5da:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
		gyrox = ((gyrox/3)-gix)/131;
		gyroy = MPU6050_signed_readreg(MPU60501,0x47)+MPU6050_signed_readreg(MPU60501,0x47)+MPU6050_signed_readreg(MPU60501,0x47);
     5de:	67 e4       	ldi	r22, 0x47	; 71
     5e0:	80 ed       	ldi	r24, 0xD0	; 208
     5e2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5e6:	67 e4       	ldi	r22, 0x47	; 71
     5e8:	80 ed       	ldi	r24, 0xD0	; 208
     5ea:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5ee:	67 e4       	ldi	r22, 0x47	; 71
     5f0:	80 ed       	ldi	r24, 0xD0	; 208
     5f2:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
		gyroy = ((gyroy/3)-giy)/131;
		gyroz = MPU6050_signed_readreg(MPU60501,0x49)+MPU6050_signed_readreg(MPU60501,0x49)+MPU6050_signed_readreg(MPU60501,0x49);
     5f6:	69 e4       	ldi	r22, 0x49	; 73
     5f8:	80 ed       	ldi	r24, 0xD0	; 208
     5fa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     5fe:	69 e4       	ldi	r22, 0x49	; 73
     600:	80 ed       	ldi	r24, 0xD0	; 208
     602:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     606:	69 e4       	ldi	r22, 0x49	; 73
     608:	80 ed       	ldi	r24, 0xD0	; 208
     60a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
		ya1 = (2.00*(ya1/3.00))/2048.00;
		// read raw Z acceleration from fifo
		za1 = MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F);   
		za1 = (2.00*(za1/3.00))/2048.00;
     60e:	69 81       	ldd	r22, Y+1	; 0x01
     610:	7a 81       	ldd	r23, Y+2	; 0x02
     612:	8b 81       	ldd	r24, Y+3	; 0x03
     614:	9c 81       	ldd	r25, Y+4	; 0x04
     616:	0e 94 92 04 	call	0x924	; 0x924 <__fixsfsi>
		USART_tx_string(outs);
		snprintf(outs,sizeof(outs),"Zaxis: %2d\n\r", za1);
		USART_tx_string(outs);
		_delay_ms(1000);*/
		
		if ((xa1 + za1 == 1) || (xa1 + za1 == -2))
     61a:	68 0d       	add	r22, r8
     61c:	79 1d       	adc	r23, r9
     61e:	61 30       	cpi	r22, 0x01	; 1
     620:	71 05       	cpc	r23, r1
     622:	79 f1       	breq	.+94     	; 0x682 <main+0x2ea>
     624:	6e 3f       	cpi	r22, 0xFE	; 254
     626:	7f 4f       	sbci	r23, 0xFF	; 255
     628:	81 f1       	breq	.+96     	; 0x68a <main+0x2f2>
		//grab 3 values, average, subtract calibration value, and divide by MSB
		// read raw X acceleration from fifo
		xa1 = MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B);   		
		xa1 = (2.00*(xa1/3.00))/2048.00;
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
     62a:	6e 81       	ldd	r22, Y+6	; 0x06
     62c:	7f 81       	ldd	r23, Y+7	; 0x07
     62e:	6c 0d       	add	r22, r12
     630:	7d 1d       	adc	r23, r13
     632:	88 85       	ldd	r24, Y+8	; 0x08
     634:	99 85       	ldd	r25, Y+9	; 0x09
     636:	68 0f       	add	r22, r24
     638:	79 1f       	adc	r23, r25
		ya1 = (2.00*(ya1/3.00))/2048.00;
     63a:	07 2e       	mov	r0, r23
     63c:	00 0c       	add	r0, r0
     63e:	88 0b       	sbc	r24, r24
     640:	99 0b       	sbc	r25, r25
     642:	0e 94 ca 04 	call	0x994	; 0x994 <__floatsisf>
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	40 e4       	ldi	r20, 0x40	; 64
     64c:	50 e4       	ldi	r21, 0x40	; 64
     64e:	0e 94 20 04 	call	0x840	; 0x840 <__divsf3>
     652:	9b 01       	movw	r18, r22
     654:	ac 01       	movw	r20, r24
     656:	0e 94 b4 03 	call	0x768	; 0x768 <__addsf3>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	40 e0       	ldi	r20, 0x00	; 0
     660:	5a e3       	ldi	r21, 0x3A	; 58
     662:	0e 94 56 05 	call	0xaac	; 0xaac <__mulsf3>
     666:	0e 94 92 04 	call	0x924	; 0x924 <__fixsfsi>
		
		if ((xa1 + za1 == 1) || (xa1 + za1 == -2))
		{
			wifiout = 100;
		}
		else if ((xa1 + ya1 == 1) || (xa1 + ya1 == -1))
     66a:	86 0e       	add	r8, r22
     66c:	97 1e       	adc	r9, r23
     66e:	91 e0       	ldi	r25, 0x01	; 1
     670:	89 16       	cp	r8, r25
     672:	91 04       	cpc	r9, r1
     674:	71 f0       	breq	.+28     	; 0x692 <main+0x2fa>
     676:	89 20       	and	r8, r9
     678:	80 94       	com	r8
     67a:	69 f4       	brne	.+26     	; 0x696 <main+0x2fe>
		{
			wifiout = 0;
     67c:	1d 82       	std	Y+5, r1	; 0x05
     67e:	e1 2c       	mov	r14, r1
     680:	0a c0       	rjmp	.+20     	; 0x696 <main+0x2fe>
		USART_tx_string(outs);
		_delay_ms(1000);*/
		
		if ((xa1 + za1 == 1) || (xa1 + za1 == -2))
		{
			wifiout = 100;
     682:	f4 e6       	ldi	r31, 0x64	; 100
     684:	fd 83       	std	Y+5, r31	; 0x05
     686:	e1 2c       	mov	r14, r1
     688:	06 c0       	rjmp	.+12     	; 0x696 <main+0x2fe>
     68a:	24 e6       	ldi	r18, 0x64	; 100
     68c:	2d 83       	std	Y+5, r18	; 0x05
     68e:	e1 2c       	mov	r14, r1
     690:	02 c0       	rjmp	.+4      	; 0x696 <main+0x2fe>
		}
		else if ((xa1 + ya1 == 1) || (xa1 + ya1 == -1))
		{
			wifiout = 0;
     692:	1d 82       	std	Y+5, r1	; 0x05
     694:	e1 2c       	mov	r14, r1
     696:	3f ef       	ldi	r19, 0xFF	; 255
     698:	80 e7       	ldi	r24, 0x70	; 112
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	31 50       	subi	r19, 0x01	; 1
     69e:	80 40       	sbci	r24, 0x00	; 0
     6a0:	90 40       	sbci	r25, 0x00	; 0
     6a2:	e1 f7       	brne	.-8      	; 0x69c <main+0x304>
     6a4:	00 c0       	rjmp	.+0      	; 0x6a6 <main+0x30e>
     6a6:	00 00       	nop
		//interupt
		//send code
		
	//za1 = 101;
	_delay_ms(100);
		snprintf(ATs,sizeof(ATs), "AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80\r");
     6a8:	e3 e2       	ldi	r30, 0x23	; 35
     6aa:	f1 e0       	ldi	r31, 0x01	; 1
     6ac:	d1 01       	movw	r26, r2
     6ae:	8f 2d       	mov	r24, r15
     6b0:	01 90       	ld	r0, Z+
     6b2:	0d 92       	st	X+, r0
     6b4:	8a 95       	dec	r24
     6b6:	e1 f7       	brne	.-8      	; 0x6b0 <main+0x318>
		USART_tx_string(ATs);
     6b8:	c1 01       	movw	r24, r2
     6ba:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     6be:	ef ef       	ldi	r30, 0xFF	; 255
     6c0:	f3 ed       	ldi	r31, 0xD3	; 211
     6c2:	20 e3       	ldi	r18, 0x30	; 48
     6c4:	e1 50       	subi	r30, 0x01	; 1
     6c6:	f0 40       	sbci	r31, 0x00	; 0
     6c8:	20 40       	sbci	r18, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <main+0x32c>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <main+0x336>
     6ce:	00 00       	nop
		_delay_ms(2000);
		snprintf(ATs,sizeof(ATs), "AT+CIPSEND=0,125\r");
     6d0:	e0 e5       	ldi	r30, 0x50	; 80
     6d2:	f1 e0       	ldi	r31, 0x01	; 1
     6d4:	d1 01       	movw	r26, r2
     6d6:	87 2d       	mov	r24, r7
     6d8:	01 90       	ld	r0, Z+
     6da:	0d 92       	st	X+, r0
     6dc:	8a 95       	dec	r24
     6de:	e1 f7       	brne	.-8      	; 0x6d8 <main+0x340>
		USART_tx_string(ATs);
     6e0:	c1 01       	movw	r24, r2
     6e2:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     6e6:	3f ef       	ldi	r19, 0xFF	; 255
     6e8:	89 e6       	ldi	r24, 0x69	; 105
     6ea:	98 e1       	ldi	r25, 0x18	; 24
     6ec:	31 50       	subi	r19, 0x01	; 1
     6ee:	80 40       	sbci	r24, 0x00	; 0
     6f0:	90 40       	sbci	r25, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <main+0x354>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <main+0x35e>
     6f6:	00 00       	nop
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
     6f8:	ef 92       	push	r14
     6fa:	ed 81       	ldd	r30, Y+5	; 0x05
     6fc:	ef 93       	push	r30
     6fe:	1f 93       	push	r17
     700:	0f 93       	push	r16
     702:	1f 92       	push	r1
     704:	fe e6       	ldi	r31, 0x6E	; 110
     706:	ff 93       	push	r31
     708:	3f 92       	push	r3
     70a:	2f 92       	push	r2
     70c:	0e 94 c3 05 	call	0xb86	; 0xb86 <snprintf>
		USART_tx_string(ATs);
     710:	c1 01       	movw	r24, r2
     712:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
		snprintf(ATs,sizeof(ATs), "\n\r");
     716:	f1 01       	movw	r30, r2
     718:	40 82       	st	Z, r4
     71a:	51 82       	std	Z+1, r5	; 0x01
     71c:	62 82       	std	Z+2, r6	; 0x02
     71e:	0f b6       	in	r0, 0x3f	; 63
     720:	f8 94       	cli
     722:	de bf       	out	0x3e, r29	; 62
     724:	0f be       	out	0x3f, r0	; 63
     726:	cd bf       	out	0x3d, r28	; 61
     728:	0f 2e       	mov	r0, r31
     72a:	f6 e1       	ldi	r31, 0x16	; 22
     72c:	cf 2e       	mov	r12, r31
     72e:	f0 2d       	mov	r31, r0
     730:	d1 2c       	mov	r13, r1
		while (i < 22)
		{
			i++;
		USART_tx_string(ATs);
     732:	c1 01       	movw	r24, r2
     734:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     738:	3f ef       	ldi	r19, 0xFF	; 255
     73a:	89 e6       	ldi	r24, 0x69	; 105
     73c:	98 e1       	ldi	r25, 0x18	; 24
     73e:	31 50       	subi	r19, 0x01	; 1
     740:	80 40       	sbci	r24, 0x00	; 0
     742:	90 40       	sbci	r25, 0x00	; 0
     744:	e1 f7       	brne	.-8      	; 0x73e <main+0x3a6>
     746:	00 c0       	rjmp	.+0      	; 0x748 <main+0x3b0>
     748:	00 00       	nop
     74a:	e1 e0       	ldi	r30, 0x01	; 1
     74c:	ce 1a       	sub	r12, r30
     74e:	d1 08       	sbc	r13, r1
		USART_tx_string(ATs);
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
		USART_tx_string(ATs);
		snprintf(ATs,sizeof(ATs), "\n\r");
		while (i < 22)
     750:	81 f7       	brne	.-32     	; 0x732 <main+0x39a>
     752:	ff ef       	ldi	r31, 0xFF	; 255
     754:	23 ed       	ldi	r18, 0xD3	; 211
     756:	30 e3       	ldi	r19, 0x30	; 48
     758:	f1 50       	subi	r31, 0x01	; 1
     75a:	20 40       	sbci	r18, 0x00	; 0
     75c:	30 40       	sbci	r19, 0x00	; 0
     75e:	e1 f7       	brne	.-8      	; 0x758 <main+0x3c0>
     760:	00 c0       	rjmp	.+0      	; 0x762 <main+0x3ca>
     762:	00 00       	nop
     764:	c2 ce       	rjmp	.-636    	; 0x4ea <main+0x152>

00000766 <__subsf3>:
     766:	50 58       	subi	r21, 0x80	; 128

00000768 <__addsf3>:
     768:	bb 27       	eor	r27, r27
     76a:	aa 27       	eor	r26, r26
     76c:	0e 94 cb 03 	call	0x796	; 0x796 <__addsf3x>
     770:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     774:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     778:	38 f0       	brcs	.+14     	; 0x788 <__addsf3+0x20>
     77a:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     77e:	20 f0       	brcs	.+8      	; 0x788 <__addsf3+0x20>
     780:	39 f4       	brne	.+14     	; 0x790 <__addsf3+0x28>
     782:	9f 3f       	cpi	r25, 0xFF	; 255
     784:	19 f4       	brne	.+6      	; 0x78c <__addsf3+0x24>
     786:	26 f4       	brtc	.+8      	; 0x790 <__addsf3+0x28>
     788:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
     78c:	0e f4       	brtc	.+2      	; 0x790 <__addsf3+0x28>
     78e:	e0 95       	com	r30
     790:	e7 fb       	bst	r30, 7
     792:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>

00000796 <__addsf3x>:
     796:	e9 2f       	mov	r30, r25
     798:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     79c:	58 f3       	brcs	.-42     	; 0x774 <__addsf3+0xc>
     79e:	ba 17       	cp	r27, r26
     7a0:	62 07       	cpc	r22, r18
     7a2:	73 07       	cpc	r23, r19
     7a4:	84 07       	cpc	r24, r20
     7a6:	95 07       	cpc	r25, r21
     7a8:	20 f0       	brcs	.+8      	; 0x7b2 <__addsf3x+0x1c>
     7aa:	79 f4       	brne	.+30     	; 0x7ca <__addsf3x+0x34>
     7ac:	a6 f5       	brtc	.+104    	; 0x816 <__addsf3x+0x80>
     7ae:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
     7b2:	0e f4       	brtc	.+2      	; 0x7b6 <__addsf3x+0x20>
     7b4:	e0 95       	com	r30
     7b6:	0b 2e       	mov	r0, r27
     7b8:	ba 2f       	mov	r27, r26
     7ba:	a0 2d       	mov	r26, r0
     7bc:	0b 01       	movw	r0, r22
     7be:	b9 01       	movw	r22, r18
     7c0:	90 01       	movw	r18, r0
     7c2:	0c 01       	movw	r0, r24
     7c4:	ca 01       	movw	r24, r20
     7c6:	a0 01       	movw	r20, r0
     7c8:	11 24       	eor	r1, r1
     7ca:	ff 27       	eor	r31, r31
     7cc:	59 1b       	sub	r21, r25
     7ce:	99 f0       	breq	.+38     	; 0x7f6 <__addsf3x+0x60>
     7d0:	59 3f       	cpi	r21, 0xF9	; 249
     7d2:	50 f4       	brcc	.+20     	; 0x7e8 <__addsf3x+0x52>
     7d4:	50 3e       	cpi	r21, 0xE0	; 224
     7d6:	68 f1       	brcs	.+90     	; 0x832 <__addsf3x+0x9c>
     7d8:	1a 16       	cp	r1, r26
     7da:	f0 40       	sbci	r31, 0x00	; 0
     7dc:	a2 2f       	mov	r26, r18
     7de:	23 2f       	mov	r18, r19
     7e0:	34 2f       	mov	r19, r20
     7e2:	44 27       	eor	r20, r20
     7e4:	58 5f       	subi	r21, 0xF8	; 248
     7e6:	f3 cf       	rjmp	.-26     	; 0x7ce <__addsf3x+0x38>
     7e8:	46 95       	lsr	r20
     7ea:	37 95       	ror	r19
     7ec:	27 95       	ror	r18
     7ee:	a7 95       	ror	r26
     7f0:	f0 40       	sbci	r31, 0x00	; 0
     7f2:	53 95       	inc	r21
     7f4:	c9 f7       	brne	.-14     	; 0x7e8 <__addsf3x+0x52>
     7f6:	7e f4       	brtc	.+30     	; 0x816 <__addsf3x+0x80>
     7f8:	1f 16       	cp	r1, r31
     7fa:	ba 0b       	sbc	r27, r26
     7fc:	62 0b       	sbc	r22, r18
     7fe:	73 0b       	sbc	r23, r19
     800:	84 0b       	sbc	r24, r20
     802:	ba f0       	brmi	.+46     	; 0x832 <__addsf3x+0x9c>
     804:	91 50       	subi	r25, 0x01	; 1
     806:	a1 f0       	breq	.+40     	; 0x830 <__addsf3x+0x9a>
     808:	ff 0f       	add	r31, r31
     80a:	bb 1f       	adc	r27, r27
     80c:	66 1f       	adc	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	88 1f       	adc	r24, r24
     812:	c2 f7       	brpl	.-16     	; 0x804 <__addsf3x+0x6e>
     814:	0e c0       	rjmp	.+28     	; 0x832 <__addsf3x+0x9c>
     816:	ba 0f       	add	r27, r26
     818:	62 1f       	adc	r22, r18
     81a:	73 1f       	adc	r23, r19
     81c:	84 1f       	adc	r24, r20
     81e:	48 f4       	brcc	.+18     	; 0x832 <__addsf3x+0x9c>
     820:	87 95       	ror	r24
     822:	77 95       	ror	r23
     824:	67 95       	ror	r22
     826:	b7 95       	ror	r27
     828:	f7 95       	ror	r31
     82a:	9e 3f       	cpi	r25, 0xFE	; 254
     82c:	08 f0       	brcs	.+2      	; 0x830 <__addsf3x+0x9a>
     82e:	b0 cf       	rjmp	.-160    	; 0x790 <__addsf3+0x28>
     830:	93 95       	inc	r25
     832:	88 0f       	add	r24, r24
     834:	08 f0       	brcs	.+2      	; 0x838 <__addsf3x+0xa2>
     836:	99 27       	eor	r25, r25
     838:	ee 0f       	add	r30, r30
     83a:	97 95       	ror	r25
     83c:	87 95       	ror	r24
     83e:	08 95       	ret

00000840 <__divsf3>:
     840:	0e 94 34 04 	call	0x868	; 0x868 <__divsf3x>
     844:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     848:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     84c:	58 f0       	brcs	.+22     	; 0x864 <__divsf3+0x24>
     84e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     852:	40 f0       	brcs	.+16     	; 0x864 <__divsf3+0x24>
     854:	29 f4       	brne	.+10     	; 0x860 <__divsf3+0x20>
     856:	5f 3f       	cpi	r21, 0xFF	; 255
     858:	29 f0       	breq	.+10     	; 0x864 <__divsf3+0x24>
     85a:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     85e:	51 11       	cpse	r21, r1
     860:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     864:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>

00000868 <__divsf3x>:
     868:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     86c:	68 f3       	brcs	.-38     	; 0x848 <__divsf3+0x8>

0000086e <__divsf3_pse>:
     86e:	99 23       	and	r25, r25
     870:	b1 f3       	breq	.-20     	; 0x85e <__divsf3+0x1e>
     872:	55 23       	and	r21, r21
     874:	91 f3       	breq	.-28     	; 0x85a <__divsf3+0x1a>
     876:	95 1b       	sub	r25, r21
     878:	55 0b       	sbc	r21, r21
     87a:	bb 27       	eor	r27, r27
     87c:	aa 27       	eor	r26, r26
     87e:	62 17       	cp	r22, r18
     880:	73 07       	cpc	r23, r19
     882:	84 07       	cpc	r24, r20
     884:	38 f0       	brcs	.+14     	; 0x894 <__divsf3_pse+0x26>
     886:	9f 5f       	subi	r25, 0xFF	; 255
     888:	5f 4f       	sbci	r21, 0xFF	; 255
     88a:	22 0f       	add	r18, r18
     88c:	33 1f       	adc	r19, r19
     88e:	44 1f       	adc	r20, r20
     890:	aa 1f       	adc	r26, r26
     892:	a9 f3       	breq	.-22     	; 0x87e <__divsf3_pse+0x10>
     894:	35 d0       	rcall	.+106    	; 0x900 <__stack+0x1>
     896:	0e 2e       	mov	r0, r30
     898:	3a f0       	brmi	.+14     	; 0x8a8 <__divsf3_pse+0x3a>
     89a:	e0 e8       	ldi	r30, 0x80	; 128
     89c:	32 d0       	rcall	.+100    	; 0x902 <__stack+0x3>
     89e:	91 50       	subi	r25, 0x01	; 1
     8a0:	50 40       	sbci	r21, 0x00	; 0
     8a2:	e6 95       	lsr	r30
     8a4:	00 1c       	adc	r0, r0
     8a6:	ca f7       	brpl	.-14     	; 0x89a <__divsf3_pse+0x2c>
     8a8:	2b d0       	rcall	.+86     	; 0x900 <__stack+0x1>
     8aa:	fe 2f       	mov	r31, r30
     8ac:	29 d0       	rcall	.+82     	; 0x900 <__stack+0x1>
     8ae:	66 0f       	add	r22, r22
     8b0:	77 1f       	adc	r23, r23
     8b2:	88 1f       	adc	r24, r24
     8b4:	bb 1f       	adc	r27, r27
     8b6:	26 17       	cp	r18, r22
     8b8:	37 07       	cpc	r19, r23
     8ba:	48 07       	cpc	r20, r24
     8bc:	ab 07       	cpc	r26, r27
     8be:	b0 e8       	ldi	r27, 0x80	; 128
     8c0:	09 f0       	breq	.+2      	; 0x8c4 <__divsf3_pse+0x56>
     8c2:	bb 0b       	sbc	r27, r27
     8c4:	80 2d       	mov	r24, r0
     8c6:	bf 01       	movw	r22, r30
     8c8:	ff 27       	eor	r31, r31
     8ca:	93 58       	subi	r25, 0x83	; 131
     8cc:	5f 4f       	sbci	r21, 0xFF	; 255
     8ce:	3a f0       	brmi	.+14     	; 0x8de <__divsf3_pse+0x70>
     8d0:	9e 3f       	cpi	r25, 0xFE	; 254
     8d2:	51 05       	cpc	r21, r1
     8d4:	78 f0       	brcs	.+30     	; 0x8f4 <__divsf3_pse+0x86>
     8d6:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     8da:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     8de:	5f 3f       	cpi	r21, 0xFF	; 255
     8e0:	e4 f3       	brlt	.-8      	; 0x8da <__divsf3_pse+0x6c>
     8e2:	98 3e       	cpi	r25, 0xE8	; 232
     8e4:	d4 f3       	brlt	.-12     	; 0x8da <__divsf3_pse+0x6c>
     8e6:	86 95       	lsr	r24
     8e8:	77 95       	ror	r23
     8ea:	67 95       	ror	r22
     8ec:	b7 95       	ror	r27
     8ee:	f7 95       	ror	r31
     8f0:	9f 5f       	subi	r25, 0xFF	; 255
     8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__divsf3_pse+0x78>
     8f4:	88 0f       	add	r24, r24
     8f6:	91 1d       	adc	r25, r1
     8f8:	96 95       	lsr	r25
     8fa:	87 95       	ror	r24
     8fc:	97 f9       	bld	r25, 7
     8fe:	08 95       	ret
     900:	e1 e0       	ldi	r30, 0x01	; 1
     902:	66 0f       	add	r22, r22
     904:	77 1f       	adc	r23, r23
     906:	88 1f       	adc	r24, r24
     908:	bb 1f       	adc	r27, r27
     90a:	62 17       	cp	r22, r18
     90c:	73 07       	cpc	r23, r19
     90e:	84 07       	cpc	r24, r20
     910:	ba 07       	cpc	r27, r26
     912:	20 f0       	brcs	.+8      	; 0x91c <__stack+0x1d>
     914:	62 1b       	sub	r22, r18
     916:	73 0b       	sbc	r23, r19
     918:	84 0b       	sbc	r24, r20
     91a:	ba 0b       	sbc	r27, r26
     91c:	ee 1f       	adc	r30, r30
     91e:	88 f7       	brcc	.-30     	; 0x902 <__stack+0x3>
     920:	e0 95       	com	r30
     922:	08 95       	ret

00000924 <__fixsfsi>:
     924:	0e 94 99 04 	call	0x932	; 0x932 <__fixunssfsi>
     928:	68 94       	set
     92a:	b1 11       	cpse	r27, r1
     92c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     930:	08 95       	ret

00000932 <__fixunssfsi>:
     932:	0e 94 35 05 	call	0xa6a	; 0xa6a <__fp_splitA>
     936:	88 f0       	brcs	.+34     	; 0x95a <__fixunssfsi+0x28>
     938:	9f 57       	subi	r25, 0x7F	; 127
     93a:	98 f0       	brcs	.+38     	; 0x962 <__fixunssfsi+0x30>
     93c:	b9 2f       	mov	r27, r25
     93e:	99 27       	eor	r25, r25
     940:	b7 51       	subi	r27, 0x17	; 23
     942:	b0 f0       	brcs	.+44     	; 0x970 <__fixunssfsi+0x3e>
     944:	e1 f0       	breq	.+56     	; 0x97e <__fixunssfsi+0x4c>
     946:	66 0f       	add	r22, r22
     948:	77 1f       	adc	r23, r23
     94a:	88 1f       	adc	r24, r24
     94c:	99 1f       	adc	r25, r25
     94e:	1a f0       	brmi	.+6      	; 0x956 <__fixunssfsi+0x24>
     950:	ba 95       	dec	r27
     952:	c9 f7       	brne	.-14     	; 0x946 <__fixunssfsi+0x14>
     954:	14 c0       	rjmp	.+40     	; 0x97e <__fixunssfsi+0x4c>
     956:	b1 30       	cpi	r27, 0x01	; 1
     958:	91 f0       	breq	.+36     	; 0x97e <__fixunssfsi+0x4c>
     95a:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__fp_zero>
     95e:	b1 e0       	ldi	r27, 0x01	; 1
     960:	08 95       	ret
     962:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <__fp_zero>
     966:	67 2f       	mov	r22, r23
     968:	78 2f       	mov	r23, r24
     96a:	88 27       	eor	r24, r24
     96c:	b8 5f       	subi	r27, 0xF8	; 248
     96e:	39 f0       	breq	.+14     	; 0x97e <__fixunssfsi+0x4c>
     970:	b9 3f       	cpi	r27, 0xF9	; 249
     972:	cc f3       	brlt	.-14     	; 0x966 <__fixunssfsi+0x34>
     974:	86 95       	lsr	r24
     976:	77 95       	ror	r23
     978:	67 95       	ror	r22
     97a:	b3 95       	inc	r27
     97c:	d9 f7       	brne	.-10     	; 0x974 <__fixunssfsi+0x42>
     97e:	3e f4       	brtc	.+14     	; 0x98e <__fixunssfsi+0x5c>
     980:	90 95       	com	r25
     982:	80 95       	com	r24
     984:	70 95       	com	r23
     986:	61 95       	neg	r22
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	8f 4f       	sbci	r24, 0xFF	; 255
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	08 95       	ret

00000990 <__floatunsisf>:
     990:	e8 94       	clt
     992:	09 c0       	rjmp	.+18     	; 0x9a6 <__floatsisf+0x12>

00000994 <__floatsisf>:
     994:	97 fb       	bst	r25, 7
     996:	3e f4       	brtc	.+14     	; 0x9a6 <__floatsisf+0x12>
     998:	90 95       	com	r25
     99a:	80 95       	com	r24
     99c:	70 95       	com	r23
     99e:	61 95       	neg	r22
     9a0:	7f 4f       	sbci	r23, 0xFF	; 255
     9a2:	8f 4f       	sbci	r24, 0xFF	; 255
     9a4:	9f 4f       	sbci	r25, 0xFF	; 255
     9a6:	99 23       	and	r25, r25
     9a8:	a9 f0       	breq	.+42     	; 0x9d4 <__floatsisf+0x40>
     9aa:	f9 2f       	mov	r31, r25
     9ac:	96 e9       	ldi	r25, 0x96	; 150
     9ae:	bb 27       	eor	r27, r27
     9b0:	93 95       	inc	r25
     9b2:	f6 95       	lsr	r31
     9b4:	87 95       	ror	r24
     9b6:	77 95       	ror	r23
     9b8:	67 95       	ror	r22
     9ba:	b7 95       	ror	r27
     9bc:	f1 11       	cpse	r31, r1
     9be:	f8 cf       	rjmp	.-16     	; 0x9b0 <__floatsisf+0x1c>
     9c0:	fa f4       	brpl	.+62     	; 0xa00 <__floatsisf+0x6c>
     9c2:	bb 0f       	add	r27, r27
     9c4:	11 f4       	brne	.+4      	; 0x9ca <__floatsisf+0x36>
     9c6:	60 ff       	sbrs	r22, 0
     9c8:	1b c0       	rjmp	.+54     	; 0xa00 <__floatsisf+0x6c>
     9ca:	6f 5f       	subi	r22, 0xFF	; 255
     9cc:	7f 4f       	sbci	r23, 0xFF	; 255
     9ce:	8f 4f       	sbci	r24, 0xFF	; 255
     9d0:	9f 4f       	sbci	r25, 0xFF	; 255
     9d2:	16 c0       	rjmp	.+44     	; 0xa00 <__floatsisf+0x6c>
     9d4:	88 23       	and	r24, r24
     9d6:	11 f0       	breq	.+4      	; 0x9dc <__floatsisf+0x48>
     9d8:	96 e9       	ldi	r25, 0x96	; 150
     9da:	11 c0       	rjmp	.+34     	; 0x9fe <__floatsisf+0x6a>
     9dc:	77 23       	and	r23, r23
     9de:	21 f0       	breq	.+8      	; 0x9e8 <__floatsisf+0x54>
     9e0:	9e e8       	ldi	r25, 0x8E	; 142
     9e2:	87 2f       	mov	r24, r23
     9e4:	76 2f       	mov	r23, r22
     9e6:	05 c0       	rjmp	.+10     	; 0x9f2 <__floatsisf+0x5e>
     9e8:	66 23       	and	r22, r22
     9ea:	71 f0       	breq	.+28     	; 0xa08 <__floatsisf+0x74>
     9ec:	96 e8       	ldi	r25, 0x86	; 134
     9ee:	86 2f       	mov	r24, r22
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	2a f0       	brmi	.+10     	; 0xa00 <__floatsisf+0x6c>
     9f6:	9a 95       	dec	r25
     9f8:	66 0f       	add	r22, r22
     9fa:	77 1f       	adc	r23, r23
     9fc:	88 1f       	adc	r24, r24
     9fe:	da f7       	brpl	.-10     	; 0x9f6 <__floatsisf+0x62>
     a00:	88 0f       	add	r24, r24
     a02:	96 95       	lsr	r25
     a04:	87 95       	ror	r24
     a06:	97 f9       	bld	r25, 7
     a08:	08 95       	ret

00000a0a <__fp_inf>:
     a0a:	97 f9       	bld	r25, 7
     a0c:	9f 67       	ori	r25, 0x7F	; 127
     a0e:	80 e8       	ldi	r24, 0x80	; 128
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	08 95       	ret

00000a16 <__fp_nan>:
     a16:	9f ef       	ldi	r25, 0xFF	; 255
     a18:	80 ec       	ldi	r24, 0xC0	; 192
     a1a:	08 95       	ret

00000a1c <__fp_pscA>:
     a1c:	00 24       	eor	r0, r0
     a1e:	0a 94       	dec	r0
     a20:	16 16       	cp	r1, r22
     a22:	17 06       	cpc	r1, r23
     a24:	18 06       	cpc	r1, r24
     a26:	09 06       	cpc	r0, r25
     a28:	08 95       	ret

00000a2a <__fp_pscB>:
     a2a:	00 24       	eor	r0, r0
     a2c:	0a 94       	dec	r0
     a2e:	12 16       	cp	r1, r18
     a30:	13 06       	cpc	r1, r19
     a32:	14 06       	cpc	r1, r20
     a34:	05 06       	cpc	r0, r21
     a36:	08 95       	ret

00000a38 <__fp_round>:
     a38:	09 2e       	mov	r0, r25
     a3a:	03 94       	inc	r0
     a3c:	00 0c       	add	r0, r0
     a3e:	11 f4       	brne	.+4      	; 0xa44 <__fp_round+0xc>
     a40:	88 23       	and	r24, r24
     a42:	52 f0       	brmi	.+20     	; 0xa58 <__fp_round+0x20>
     a44:	bb 0f       	add	r27, r27
     a46:	40 f4       	brcc	.+16     	; 0xa58 <__fp_round+0x20>
     a48:	bf 2b       	or	r27, r31
     a4a:	11 f4       	brne	.+4      	; 0xa50 <__fp_round+0x18>
     a4c:	60 ff       	sbrs	r22, 0
     a4e:	04 c0       	rjmp	.+8      	; 0xa58 <__fp_round+0x20>
     a50:	6f 5f       	subi	r22, 0xFF	; 255
     a52:	7f 4f       	sbci	r23, 0xFF	; 255
     a54:	8f 4f       	sbci	r24, 0xFF	; 255
     a56:	9f 4f       	sbci	r25, 0xFF	; 255
     a58:	08 95       	ret

00000a5a <__fp_split3>:
     a5a:	57 fd       	sbrc	r21, 7
     a5c:	90 58       	subi	r25, 0x80	; 128
     a5e:	44 0f       	add	r20, r20
     a60:	55 1f       	adc	r21, r21
     a62:	59 f0       	breq	.+22     	; 0xa7a <__fp_splitA+0x10>
     a64:	5f 3f       	cpi	r21, 0xFF	; 255
     a66:	71 f0       	breq	.+28     	; 0xa84 <__fp_splitA+0x1a>
     a68:	47 95       	ror	r20

00000a6a <__fp_splitA>:
     a6a:	88 0f       	add	r24, r24
     a6c:	97 fb       	bst	r25, 7
     a6e:	99 1f       	adc	r25, r25
     a70:	61 f0       	breq	.+24     	; 0xa8a <__fp_splitA+0x20>
     a72:	9f 3f       	cpi	r25, 0xFF	; 255
     a74:	79 f0       	breq	.+30     	; 0xa94 <__fp_splitA+0x2a>
     a76:	87 95       	ror	r24
     a78:	08 95       	ret
     a7a:	12 16       	cp	r1, r18
     a7c:	13 06       	cpc	r1, r19
     a7e:	14 06       	cpc	r1, r20
     a80:	55 1f       	adc	r21, r21
     a82:	f2 cf       	rjmp	.-28     	; 0xa68 <__fp_split3+0xe>
     a84:	46 95       	lsr	r20
     a86:	f1 df       	rcall	.-30     	; 0xa6a <__fp_splitA>
     a88:	08 c0       	rjmp	.+16     	; 0xa9a <__fp_splitA+0x30>
     a8a:	16 16       	cp	r1, r22
     a8c:	17 06       	cpc	r1, r23
     a8e:	18 06       	cpc	r1, r24
     a90:	99 1f       	adc	r25, r25
     a92:	f1 cf       	rjmp	.-30     	; 0xa76 <__fp_splitA+0xc>
     a94:	86 95       	lsr	r24
     a96:	71 05       	cpc	r23, r1
     a98:	61 05       	cpc	r22, r1
     a9a:	08 94       	sec
     a9c:	08 95       	ret

00000a9e <__fp_zero>:
     a9e:	e8 94       	clt

00000aa0 <__fp_szero>:
     aa0:	bb 27       	eor	r27, r27
     aa2:	66 27       	eor	r22, r22
     aa4:	77 27       	eor	r23, r23
     aa6:	cb 01       	movw	r24, r22
     aa8:	97 f9       	bld	r25, 7
     aaa:	08 95       	ret

00000aac <__mulsf3>:
     aac:	0e 94 69 05 	call	0xad2	; 0xad2 <__mulsf3x>
     ab0:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__fp_round>
     ab4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscA>
     ab8:	38 f0       	brcs	.+14     	; 0xac8 <__mulsf3+0x1c>
     aba:	0e 94 15 05 	call	0xa2a	; 0xa2a <__fp_pscB>
     abe:	20 f0       	brcs	.+8      	; 0xac8 <__mulsf3+0x1c>
     ac0:	95 23       	and	r25, r21
     ac2:	11 f0       	breq	.+4      	; 0xac8 <__mulsf3+0x1c>
     ac4:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     ac8:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <__fp_nan>
     acc:	11 24       	eor	r1, r1
     ace:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>

00000ad2 <__mulsf3x>:
     ad2:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__fp_split3>
     ad6:	70 f3       	brcs	.-36     	; 0xab4 <__mulsf3+0x8>

00000ad8 <__mulsf3_pse>:
     ad8:	95 9f       	mul	r25, r21
     ada:	c1 f3       	breq	.-16     	; 0xacc <__mulsf3+0x20>
     adc:	95 0f       	add	r25, r21
     ade:	50 e0       	ldi	r21, 0x00	; 0
     ae0:	55 1f       	adc	r21, r21
     ae2:	62 9f       	mul	r22, r18
     ae4:	f0 01       	movw	r30, r0
     ae6:	72 9f       	mul	r23, r18
     ae8:	bb 27       	eor	r27, r27
     aea:	f0 0d       	add	r31, r0
     aec:	b1 1d       	adc	r27, r1
     aee:	63 9f       	mul	r22, r19
     af0:	aa 27       	eor	r26, r26
     af2:	f0 0d       	add	r31, r0
     af4:	b1 1d       	adc	r27, r1
     af6:	aa 1f       	adc	r26, r26
     af8:	64 9f       	mul	r22, r20
     afa:	66 27       	eor	r22, r22
     afc:	b0 0d       	add	r27, r0
     afe:	a1 1d       	adc	r26, r1
     b00:	66 1f       	adc	r22, r22
     b02:	82 9f       	mul	r24, r18
     b04:	22 27       	eor	r18, r18
     b06:	b0 0d       	add	r27, r0
     b08:	a1 1d       	adc	r26, r1
     b0a:	62 1f       	adc	r22, r18
     b0c:	73 9f       	mul	r23, r19
     b0e:	b0 0d       	add	r27, r0
     b10:	a1 1d       	adc	r26, r1
     b12:	62 1f       	adc	r22, r18
     b14:	83 9f       	mul	r24, r19
     b16:	a0 0d       	add	r26, r0
     b18:	61 1d       	adc	r22, r1
     b1a:	22 1f       	adc	r18, r18
     b1c:	74 9f       	mul	r23, r20
     b1e:	33 27       	eor	r19, r19
     b20:	a0 0d       	add	r26, r0
     b22:	61 1d       	adc	r22, r1
     b24:	23 1f       	adc	r18, r19
     b26:	84 9f       	mul	r24, r20
     b28:	60 0d       	add	r22, r0
     b2a:	21 1d       	adc	r18, r1
     b2c:	82 2f       	mov	r24, r18
     b2e:	76 2f       	mov	r23, r22
     b30:	6a 2f       	mov	r22, r26
     b32:	11 24       	eor	r1, r1
     b34:	9f 57       	subi	r25, 0x7F	; 127
     b36:	50 40       	sbci	r21, 0x00	; 0
     b38:	9a f0       	brmi	.+38     	; 0xb60 <__mulsf3_pse+0x88>
     b3a:	f1 f0       	breq	.+60     	; 0xb78 <__mulsf3_pse+0xa0>
     b3c:	88 23       	and	r24, r24
     b3e:	4a f0       	brmi	.+18     	; 0xb52 <__mulsf3_pse+0x7a>
     b40:	ee 0f       	add	r30, r30
     b42:	ff 1f       	adc	r31, r31
     b44:	bb 1f       	adc	r27, r27
     b46:	66 1f       	adc	r22, r22
     b48:	77 1f       	adc	r23, r23
     b4a:	88 1f       	adc	r24, r24
     b4c:	91 50       	subi	r25, 0x01	; 1
     b4e:	50 40       	sbci	r21, 0x00	; 0
     b50:	a9 f7       	brne	.-22     	; 0xb3c <__mulsf3_pse+0x64>
     b52:	9e 3f       	cpi	r25, 0xFE	; 254
     b54:	51 05       	cpc	r21, r1
     b56:	80 f0       	brcs	.+32     	; 0xb78 <__mulsf3_pse+0xa0>
     b58:	0c 94 05 05 	jmp	0xa0a	; 0xa0a <__fp_inf>
     b5c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_szero>
     b60:	5f 3f       	cpi	r21, 0xFF	; 255
     b62:	e4 f3       	brlt	.-8      	; 0xb5c <__mulsf3_pse+0x84>
     b64:	98 3e       	cpi	r25, 0xE8	; 232
     b66:	d4 f3       	brlt	.-12     	; 0xb5c <__mulsf3_pse+0x84>
     b68:	86 95       	lsr	r24
     b6a:	77 95       	ror	r23
     b6c:	67 95       	ror	r22
     b6e:	b7 95       	ror	r27
     b70:	f7 95       	ror	r31
     b72:	e7 95       	ror	r30
     b74:	9f 5f       	subi	r25, 0xFF	; 255
     b76:	c1 f7       	brne	.-16     	; 0xb68 <__mulsf3_pse+0x90>
     b78:	fe 2b       	or	r31, r30
     b7a:	88 0f       	add	r24, r24
     b7c:	91 1d       	adc	r25, r1
     b7e:	96 95       	lsr	r25
     b80:	87 95       	ror	r24
     b82:	97 f9       	bld	r25, 7
     b84:	08 95       	ret

00000b86 <snprintf>:
     b86:	ae e0       	ldi	r26, 0x0E	; 14
     b88:	b0 e0       	ldi	r27, 0x00	; 0
     b8a:	e9 ec       	ldi	r30, 0xC9	; 201
     b8c:	f5 e0       	ldi	r31, 0x05	; 5
     b8e:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <__prologue_saves__+0x1c>
     b92:	0d 89       	ldd	r16, Y+21	; 0x15
     b94:	1e 89       	ldd	r17, Y+22	; 0x16
     b96:	8f 89       	ldd	r24, Y+23	; 0x17
     b98:	98 8d       	ldd	r25, Y+24	; 0x18
     b9a:	26 e0       	ldi	r18, 0x06	; 6
     b9c:	2c 83       	std	Y+4, r18	; 0x04
     b9e:	1a 83       	std	Y+2, r17	; 0x02
     ba0:	09 83       	std	Y+1, r16	; 0x01
     ba2:	97 ff       	sbrs	r25, 7
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <snprintf+0x24>
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e8       	ldi	r25, 0x80	; 128
     baa:	01 97       	sbiw	r24, 0x01	; 1
     bac:	9e 83       	std	Y+6, r25	; 0x06
     bae:	8d 83       	std	Y+5, r24	; 0x05
     bb0:	ae 01       	movw	r20, r28
     bb2:	45 5e       	subi	r20, 0xE5	; 229
     bb4:	5f 4f       	sbci	r21, 0xFF	; 255
     bb6:	69 8d       	ldd	r22, Y+25	; 0x19
     bb8:	7a 8d       	ldd	r23, Y+26	; 0x1a
     bba:	ce 01       	movw	r24, r28
     bbc:	01 96       	adiw	r24, 0x01	; 1
     bbe:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <vfprintf>
     bc2:	4d 81       	ldd	r20, Y+5	; 0x05
     bc4:	5e 81       	ldd	r21, Y+6	; 0x06
     bc6:	57 fd       	sbrc	r21, 7
     bc8:	0a c0       	rjmp	.+20     	; 0xbde <snprintf+0x58>
     bca:	2f 81       	ldd	r18, Y+7	; 0x07
     bcc:	38 85       	ldd	r19, Y+8	; 0x08
     bce:	42 17       	cp	r20, r18
     bd0:	53 07       	cpc	r21, r19
     bd2:	0c f4       	brge	.+2      	; 0xbd6 <snprintf+0x50>
     bd4:	9a 01       	movw	r18, r20
     bd6:	f8 01       	movw	r30, r16
     bd8:	e2 0f       	add	r30, r18
     bda:	f3 1f       	adc	r31, r19
     bdc:	10 82       	st	Z, r1
     bde:	2e 96       	adiw	r28, 0x0e	; 14
     be0:	e4 e0       	ldi	r30, 0x04	; 4
     be2:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__epilogue_restores__+0x1c>

00000be6 <vfprintf>:
     be6:	ac e0       	ldi	r26, 0x0C	; 12
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e9 ef       	ldi	r30, 0xF9	; 249
     bec:	f5 e0       	ldi	r31, 0x05	; 5
     bee:	0c 94 71 08 	jmp	0x10e2	; 0x10e2 <__prologue_saves__>
     bf2:	7c 01       	movw	r14, r24
     bf4:	6b 01       	movw	r12, r22
     bf6:	8a 01       	movw	r16, r20
     bf8:	fc 01       	movw	r30, r24
     bfa:	17 82       	std	Z+7, r1	; 0x07
     bfc:	16 82       	std	Z+6, r1	; 0x06
     bfe:	83 81       	ldd	r24, Z+3	; 0x03
     c00:	81 ff       	sbrs	r24, 1
     c02:	bd c1       	rjmp	.+890    	; 0xf7e <vfprintf+0x398>
     c04:	ce 01       	movw	r24, r28
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	4c 01       	movw	r8, r24
     c0a:	f7 01       	movw	r30, r14
     c0c:	93 81       	ldd	r25, Z+3	; 0x03
     c0e:	f6 01       	movw	r30, r12
     c10:	93 fd       	sbrc	r25, 3
     c12:	85 91       	lpm	r24, Z+
     c14:	93 ff       	sbrs	r25, 3
     c16:	81 91       	ld	r24, Z+
     c18:	6f 01       	movw	r12, r30
     c1a:	88 23       	and	r24, r24
     c1c:	09 f4       	brne	.+2      	; 0xc20 <vfprintf+0x3a>
     c1e:	ab c1       	rjmp	.+854    	; 0xf76 <vfprintf+0x390>
     c20:	85 32       	cpi	r24, 0x25	; 37
     c22:	39 f4       	brne	.+14     	; 0xc32 <vfprintf+0x4c>
     c24:	93 fd       	sbrc	r25, 3
     c26:	85 91       	lpm	r24, Z+
     c28:	93 ff       	sbrs	r25, 3
     c2a:	81 91       	ld	r24, Z+
     c2c:	6f 01       	movw	r12, r30
     c2e:	85 32       	cpi	r24, 0x25	; 37
     c30:	29 f4       	brne	.+10     	; 0xc3c <vfprintf+0x56>
     c32:	b7 01       	movw	r22, r14
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     c3a:	e7 cf       	rjmp	.-50     	; 0xc0a <vfprintf+0x24>
     c3c:	51 2c       	mov	r5, r1
     c3e:	31 2c       	mov	r3, r1
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	20 32       	cpi	r18, 0x20	; 32
     c44:	a0 f4       	brcc	.+40     	; 0xc6e <vfprintf+0x88>
     c46:	8b 32       	cpi	r24, 0x2B	; 43
     c48:	69 f0       	breq	.+26     	; 0xc64 <vfprintf+0x7e>
     c4a:	30 f4       	brcc	.+12     	; 0xc58 <vfprintf+0x72>
     c4c:	80 32       	cpi	r24, 0x20	; 32
     c4e:	59 f0       	breq	.+22     	; 0xc66 <vfprintf+0x80>
     c50:	83 32       	cpi	r24, 0x23	; 35
     c52:	69 f4       	brne	.+26     	; 0xc6e <vfprintf+0x88>
     c54:	20 61       	ori	r18, 0x10	; 16
     c56:	2c c0       	rjmp	.+88     	; 0xcb0 <vfprintf+0xca>
     c58:	8d 32       	cpi	r24, 0x2D	; 45
     c5a:	39 f0       	breq	.+14     	; 0xc6a <vfprintf+0x84>
     c5c:	80 33       	cpi	r24, 0x30	; 48
     c5e:	39 f4       	brne	.+14     	; 0xc6e <vfprintf+0x88>
     c60:	21 60       	ori	r18, 0x01	; 1
     c62:	26 c0       	rjmp	.+76     	; 0xcb0 <vfprintf+0xca>
     c64:	22 60       	ori	r18, 0x02	; 2
     c66:	24 60       	ori	r18, 0x04	; 4
     c68:	23 c0       	rjmp	.+70     	; 0xcb0 <vfprintf+0xca>
     c6a:	28 60       	ori	r18, 0x08	; 8
     c6c:	21 c0       	rjmp	.+66     	; 0xcb0 <vfprintf+0xca>
     c6e:	27 fd       	sbrc	r18, 7
     c70:	27 c0       	rjmp	.+78     	; 0xcc0 <vfprintf+0xda>
     c72:	30 ed       	ldi	r19, 0xD0	; 208
     c74:	38 0f       	add	r19, r24
     c76:	3a 30       	cpi	r19, 0x0A	; 10
     c78:	78 f4       	brcc	.+30     	; 0xc98 <vfprintf+0xb2>
     c7a:	26 ff       	sbrs	r18, 6
     c7c:	06 c0       	rjmp	.+12     	; 0xc8a <vfprintf+0xa4>
     c7e:	fa e0       	ldi	r31, 0x0A	; 10
     c80:	5f 9e       	mul	r5, r31
     c82:	30 0d       	add	r19, r0
     c84:	11 24       	eor	r1, r1
     c86:	53 2e       	mov	r5, r19
     c88:	13 c0       	rjmp	.+38     	; 0xcb0 <vfprintf+0xca>
     c8a:	8a e0       	ldi	r24, 0x0A	; 10
     c8c:	38 9e       	mul	r3, r24
     c8e:	30 0d       	add	r19, r0
     c90:	11 24       	eor	r1, r1
     c92:	33 2e       	mov	r3, r19
     c94:	20 62       	ori	r18, 0x20	; 32
     c96:	0c c0       	rjmp	.+24     	; 0xcb0 <vfprintf+0xca>
     c98:	8e 32       	cpi	r24, 0x2E	; 46
     c9a:	21 f4       	brne	.+8      	; 0xca4 <vfprintf+0xbe>
     c9c:	26 fd       	sbrc	r18, 6
     c9e:	6b c1       	rjmp	.+726    	; 0xf76 <vfprintf+0x390>
     ca0:	20 64       	ori	r18, 0x40	; 64
     ca2:	06 c0       	rjmp	.+12     	; 0xcb0 <vfprintf+0xca>
     ca4:	8c 36       	cpi	r24, 0x6C	; 108
     ca6:	11 f4       	brne	.+4      	; 0xcac <vfprintf+0xc6>
     ca8:	20 68       	ori	r18, 0x80	; 128
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <vfprintf+0xca>
     cac:	88 36       	cpi	r24, 0x68	; 104
     cae:	41 f4       	brne	.+16     	; 0xcc0 <vfprintf+0xda>
     cb0:	f6 01       	movw	r30, r12
     cb2:	93 fd       	sbrc	r25, 3
     cb4:	85 91       	lpm	r24, Z+
     cb6:	93 ff       	sbrs	r25, 3
     cb8:	81 91       	ld	r24, Z+
     cba:	6f 01       	movw	r12, r30
     cbc:	81 11       	cpse	r24, r1
     cbe:	c1 cf       	rjmp	.-126    	; 0xc42 <vfprintf+0x5c>
     cc0:	98 2f       	mov	r25, r24
     cc2:	9f 7d       	andi	r25, 0xDF	; 223
     cc4:	95 54       	subi	r25, 0x45	; 69
     cc6:	93 30       	cpi	r25, 0x03	; 3
     cc8:	28 f4       	brcc	.+10     	; 0xcd4 <vfprintf+0xee>
     cca:	0c 5f       	subi	r16, 0xFC	; 252
     ccc:	1f 4f       	sbci	r17, 0xFF	; 255
     cce:	ff e3       	ldi	r31, 0x3F	; 63
     cd0:	f9 83       	std	Y+1, r31	; 0x01
     cd2:	0d c0       	rjmp	.+26     	; 0xcee <vfprintf+0x108>
     cd4:	83 36       	cpi	r24, 0x63	; 99
     cd6:	31 f0       	breq	.+12     	; 0xce4 <vfprintf+0xfe>
     cd8:	83 37       	cpi	r24, 0x73	; 115
     cda:	71 f0       	breq	.+28     	; 0xcf8 <vfprintf+0x112>
     cdc:	83 35       	cpi	r24, 0x53	; 83
     cde:	09 f0       	breq	.+2      	; 0xce2 <vfprintf+0xfc>
     ce0:	5b c0       	rjmp	.+182    	; 0xd98 <vfprintf+0x1b2>
     ce2:	22 c0       	rjmp	.+68     	; 0xd28 <vfprintf+0x142>
     ce4:	f8 01       	movw	r30, r16
     ce6:	80 81       	ld	r24, Z
     ce8:	89 83       	std	Y+1, r24	; 0x01
     cea:	0e 5f       	subi	r16, 0xFE	; 254
     cec:	1f 4f       	sbci	r17, 0xFF	; 255
     cee:	44 24       	eor	r4, r4
     cf0:	43 94       	inc	r4
     cf2:	51 2c       	mov	r5, r1
     cf4:	54 01       	movw	r10, r8
     cf6:	15 c0       	rjmp	.+42     	; 0xd22 <vfprintf+0x13c>
     cf8:	38 01       	movw	r6, r16
     cfa:	f2 e0       	ldi	r31, 0x02	; 2
     cfc:	6f 0e       	add	r6, r31
     cfe:	71 1c       	adc	r7, r1
     d00:	f8 01       	movw	r30, r16
     d02:	a0 80       	ld	r10, Z
     d04:	b1 80       	ldd	r11, Z+1	; 0x01
     d06:	26 ff       	sbrs	r18, 6
     d08:	03 c0       	rjmp	.+6      	; 0xd10 <vfprintf+0x12a>
     d0a:	65 2d       	mov	r22, r5
     d0c:	70 e0       	ldi	r23, 0x00	; 0
     d0e:	02 c0       	rjmp	.+4      	; 0xd14 <vfprintf+0x12e>
     d10:	6f ef       	ldi	r22, 0xFF	; 255
     d12:	7f ef       	ldi	r23, 0xFF	; 255
     d14:	c5 01       	movw	r24, r10
     d16:	2c 87       	std	Y+12, r18	; 0x0c
     d18:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <strnlen>
     d1c:	2c 01       	movw	r4, r24
     d1e:	83 01       	movw	r16, r6
     d20:	2c 85       	ldd	r18, Y+12	; 0x0c
     d22:	2f 77       	andi	r18, 0x7F	; 127
     d24:	22 2e       	mov	r2, r18
     d26:	17 c0       	rjmp	.+46     	; 0xd56 <vfprintf+0x170>
     d28:	38 01       	movw	r6, r16
     d2a:	f2 e0       	ldi	r31, 0x02	; 2
     d2c:	6f 0e       	add	r6, r31
     d2e:	71 1c       	adc	r7, r1
     d30:	f8 01       	movw	r30, r16
     d32:	a0 80       	ld	r10, Z
     d34:	b1 80       	ldd	r11, Z+1	; 0x01
     d36:	26 ff       	sbrs	r18, 6
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <vfprintf+0x15a>
     d3a:	65 2d       	mov	r22, r5
     d3c:	70 e0       	ldi	r23, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <vfprintf+0x15e>
     d40:	6f ef       	ldi	r22, 0xFF	; 255
     d42:	7f ef       	ldi	r23, 0xFF	; 255
     d44:	c5 01       	movw	r24, r10
     d46:	2c 87       	std	Y+12, r18	; 0x0c
     d48:	0e 94 c5 07 	call	0xf8a	; 0xf8a <strnlen_P>
     d4c:	2c 01       	movw	r4, r24
     d4e:	2c 85       	ldd	r18, Y+12	; 0x0c
     d50:	20 68       	ori	r18, 0x80	; 128
     d52:	22 2e       	mov	r2, r18
     d54:	83 01       	movw	r16, r6
     d56:	23 fc       	sbrc	r2, 3
     d58:	1b c0       	rjmp	.+54     	; 0xd90 <vfprintf+0x1aa>
     d5a:	83 2d       	mov	r24, r3
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	48 16       	cp	r4, r24
     d60:	59 06       	cpc	r5, r25
     d62:	b0 f4       	brcc	.+44     	; 0xd90 <vfprintf+0x1aa>
     d64:	b7 01       	movw	r22, r14
     d66:	80 e2       	ldi	r24, 0x20	; 32
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     d6e:	3a 94       	dec	r3
     d70:	f4 cf       	rjmp	.-24     	; 0xd5a <vfprintf+0x174>
     d72:	f5 01       	movw	r30, r10
     d74:	27 fc       	sbrc	r2, 7
     d76:	85 91       	lpm	r24, Z+
     d78:	27 fe       	sbrs	r2, 7
     d7a:	81 91       	ld	r24, Z+
     d7c:	5f 01       	movw	r10, r30
     d7e:	b7 01       	movw	r22, r14
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     d86:	31 10       	cpse	r3, r1
     d88:	3a 94       	dec	r3
     d8a:	f1 e0       	ldi	r31, 0x01	; 1
     d8c:	4f 1a       	sub	r4, r31
     d8e:	51 08       	sbc	r5, r1
     d90:	41 14       	cp	r4, r1
     d92:	51 04       	cpc	r5, r1
     d94:	71 f7       	brne	.-36     	; 0xd72 <vfprintf+0x18c>
     d96:	e5 c0       	rjmp	.+458    	; 0xf62 <vfprintf+0x37c>
     d98:	84 36       	cpi	r24, 0x64	; 100
     d9a:	11 f0       	breq	.+4      	; 0xda0 <vfprintf+0x1ba>
     d9c:	89 36       	cpi	r24, 0x69	; 105
     d9e:	39 f5       	brne	.+78     	; 0xdee <vfprintf+0x208>
     da0:	f8 01       	movw	r30, r16
     da2:	27 ff       	sbrs	r18, 7
     da4:	07 c0       	rjmp	.+14     	; 0xdb4 <vfprintf+0x1ce>
     da6:	60 81       	ld	r22, Z
     da8:	71 81       	ldd	r23, Z+1	; 0x01
     daa:	82 81       	ldd	r24, Z+2	; 0x02
     dac:	93 81       	ldd	r25, Z+3	; 0x03
     dae:	0c 5f       	subi	r16, 0xFC	; 252
     db0:	1f 4f       	sbci	r17, 0xFF	; 255
     db2:	08 c0       	rjmp	.+16     	; 0xdc4 <vfprintf+0x1de>
     db4:	60 81       	ld	r22, Z
     db6:	71 81       	ldd	r23, Z+1	; 0x01
     db8:	07 2e       	mov	r0, r23
     dba:	00 0c       	add	r0, r0
     dbc:	88 0b       	sbc	r24, r24
     dbe:	99 0b       	sbc	r25, r25
     dc0:	0e 5f       	subi	r16, 0xFE	; 254
     dc2:	1f 4f       	sbci	r17, 0xFF	; 255
     dc4:	2f 76       	andi	r18, 0x6F	; 111
     dc6:	72 2e       	mov	r7, r18
     dc8:	97 ff       	sbrs	r25, 7
     dca:	09 c0       	rjmp	.+18     	; 0xdde <vfprintf+0x1f8>
     dcc:	90 95       	com	r25
     dce:	80 95       	com	r24
     dd0:	70 95       	com	r23
     dd2:	61 95       	neg	r22
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	20 68       	ori	r18, 0x80	; 128
     ddc:	72 2e       	mov	r7, r18
     dde:	2a e0       	ldi	r18, 0x0A	; 10
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	a4 01       	movw	r20, r8
     de4:	0e 94 13 08 	call	0x1026	; 0x1026 <__ultoa_invert>
     de8:	a8 2e       	mov	r10, r24
     dea:	a8 18       	sub	r10, r8
     dec:	44 c0       	rjmp	.+136    	; 0xe76 <vfprintf+0x290>
     dee:	85 37       	cpi	r24, 0x75	; 117
     df0:	29 f4       	brne	.+10     	; 0xdfc <vfprintf+0x216>
     df2:	2f 7e       	andi	r18, 0xEF	; 239
     df4:	b2 2e       	mov	r11, r18
     df6:	2a e0       	ldi	r18, 0x0A	; 10
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	25 c0       	rjmp	.+74     	; 0xe46 <vfprintf+0x260>
     dfc:	f2 2f       	mov	r31, r18
     dfe:	f9 7f       	andi	r31, 0xF9	; 249
     e00:	bf 2e       	mov	r11, r31
     e02:	8f 36       	cpi	r24, 0x6F	; 111
     e04:	c1 f0       	breq	.+48     	; 0xe36 <vfprintf+0x250>
     e06:	18 f4       	brcc	.+6      	; 0xe0e <vfprintf+0x228>
     e08:	88 35       	cpi	r24, 0x58	; 88
     e0a:	79 f0       	breq	.+30     	; 0xe2a <vfprintf+0x244>
     e0c:	b4 c0       	rjmp	.+360    	; 0xf76 <vfprintf+0x390>
     e0e:	80 37       	cpi	r24, 0x70	; 112
     e10:	19 f0       	breq	.+6      	; 0xe18 <vfprintf+0x232>
     e12:	88 37       	cpi	r24, 0x78	; 120
     e14:	21 f0       	breq	.+8      	; 0xe1e <vfprintf+0x238>
     e16:	af c0       	rjmp	.+350    	; 0xf76 <vfprintf+0x390>
     e18:	2f 2f       	mov	r18, r31
     e1a:	20 61       	ori	r18, 0x10	; 16
     e1c:	b2 2e       	mov	r11, r18
     e1e:	b4 fe       	sbrs	r11, 4
     e20:	0d c0       	rjmp	.+26     	; 0xe3c <vfprintf+0x256>
     e22:	8b 2d       	mov	r24, r11
     e24:	84 60       	ori	r24, 0x04	; 4
     e26:	b8 2e       	mov	r11, r24
     e28:	09 c0       	rjmp	.+18     	; 0xe3c <vfprintf+0x256>
     e2a:	24 ff       	sbrs	r18, 4
     e2c:	0a c0       	rjmp	.+20     	; 0xe42 <vfprintf+0x25c>
     e2e:	9f 2f       	mov	r25, r31
     e30:	96 60       	ori	r25, 0x06	; 6
     e32:	b9 2e       	mov	r11, r25
     e34:	06 c0       	rjmp	.+12     	; 0xe42 <vfprintf+0x25c>
     e36:	28 e0       	ldi	r18, 0x08	; 8
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	05 c0       	rjmp	.+10     	; 0xe46 <vfprintf+0x260>
     e3c:	20 e1       	ldi	r18, 0x10	; 16
     e3e:	30 e0       	ldi	r19, 0x00	; 0
     e40:	02 c0       	rjmp	.+4      	; 0xe46 <vfprintf+0x260>
     e42:	20 e1       	ldi	r18, 0x10	; 16
     e44:	32 e0       	ldi	r19, 0x02	; 2
     e46:	f8 01       	movw	r30, r16
     e48:	b7 fe       	sbrs	r11, 7
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <vfprintf+0x274>
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	0c 5f       	subi	r16, 0xFC	; 252
     e56:	1f 4f       	sbci	r17, 0xFF	; 255
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0x280>
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	0e 5f       	subi	r16, 0xFE	; 254
     e64:	1f 4f       	sbci	r17, 0xFF	; 255
     e66:	a4 01       	movw	r20, r8
     e68:	0e 94 13 08 	call	0x1026	; 0x1026 <__ultoa_invert>
     e6c:	a8 2e       	mov	r10, r24
     e6e:	a8 18       	sub	r10, r8
     e70:	fb 2d       	mov	r31, r11
     e72:	ff 77       	andi	r31, 0x7F	; 127
     e74:	7f 2e       	mov	r7, r31
     e76:	76 fe       	sbrs	r7, 6
     e78:	0b c0       	rjmp	.+22     	; 0xe90 <vfprintf+0x2aa>
     e7a:	37 2d       	mov	r19, r7
     e7c:	3e 7f       	andi	r19, 0xFE	; 254
     e7e:	a5 14       	cp	r10, r5
     e80:	50 f4       	brcc	.+20     	; 0xe96 <vfprintf+0x2b0>
     e82:	74 fe       	sbrs	r7, 4
     e84:	0a c0       	rjmp	.+20     	; 0xe9a <vfprintf+0x2b4>
     e86:	72 fc       	sbrc	r7, 2
     e88:	08 c0       	rjmp	.+16     	; 0xe9a <vfprintf+0x2b4>
     e8a:	37 2d       	mov	r19, r7
     e8c:	3e 7e       	andi	r19, 0xEE	; 238
     e8e:	05 c0       	rjmp	.+10     	; 0xe9a <vfprintf+0x2b4>
     e90:	ba 2c       	mov	r11, r10
     e92:	37 2d       	mov	r19, r7
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <vfprintf+0x2b6>
     e96:	ba 2c       	mov	r11, r10
     e98:	01 c0       	rjmp	.+2      	; 0xe9c <vfprintf+0x2b6>
     e9a:	b5 2c       	mov	r11, r5
     e9c:	34 ff       	sbrs	r19, 4
     e9e:	0d c0       	rjmp	.+26     	; 0xeba <vfprintf+0x2d4>
     ea0:	fe 01       	movw	r30, r28
     ea2:	ea 0d       	add	r30, r10
     ea4:	f1 1d       	adc	r31, r1
     ea6:	80 81       	ld	r24, Z
     ea8:	80 33       	cpi	r24, 0x30	; 48
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <vfprintf+0x2ca>
     eac:	39 7e       	andi	r19, 0xE9	; 233
     eae:	09 c0       	rjmp	.+18     	; 0xec2 <vfprintf+0x2dc>
     eb0:	32 ff       	sbrs	r19, 2
     eb2:	06 c0       	rjmp	.+12     	; 0xec0 <vfprintf+0x2da>
     eb4:	b3 94       	inc	r11
     eb6:	b3 94       	inc	r11
     eb8:	04 c0       	rjmp	.+8      	; 0xec2 <vfprintf+0x2dc>
     eba:	83 2f       	mov	r24, r19
     ebc:	86 78       	andi	r24, 0x86	; 134
     ebe:	09 f0       	breq	.+2      	; 0xec2 <vfprintf+0x2dc>
     ec0:	b3 94       	inc	r11
     ec2:	33 fd       	sbrc	r19, 3
     ec4:	13 c0       	rjmp	.+38     	; 0xeec <vfprintf+0x306>
     ec6:	30 ff       	sbrs	r19, 0
     ec8:	06 c0       	rjmp	.+12     	; 0xed6 <vfprintf+0x2f0>
     eca:	5a 2c       	mov	r5, r10
     ecc:	b3 14       	cp	r11, r3
     ece:	18 f4       	brcc	.+6      	; 0xed6 <vfprintf+0x2f0>
     ed0:	53 0c       	add	r5, r3
     ed2:	5b 18       	sub	r5, r11
     ed4:	b3 2c       	mov	r11, r3
     ed6:	b3 14       	cp	r11, r3
     ed8:	68 f4       	brcc	.+26     	; 0xef4 <vfprintf+0x30e>
     eda:	b7 01       	movw	r22, r14
     edc:	80 e2       	ldi	r24, 0x20	; 32
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	3c 87       	std	Y+12, r19	; 0x0c
     ee2:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     ee6:	b3 94       	inc	r11
     ee8:	3c 85       	ldd	r19, Y+12	; 0x0c
     eea:	f5 cf       	rjmp	.-22     	; 0xed6 <vfprintf+0x2f0>
     eec:	b3 14       	cp	r11, r3
     eee:	10 f4       	brcc	.+4      	; 0xef4 <vfprintf+0x30e>
     ef0:	3b 18       	sub	r3, r11
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <vfprintf+0x310>
     ef4:	31 2c       	mov	r3, r1
     ef6:	34 ff       	sbrs	r19, 4
     ef8:	12 c0       	rjmp	.+36     	; 0xf1e <vfprintf+0x338>
     efa:	b7 01       	movw	r22, r14
     efc:	80 e3       	ldi	r24, 0x30	; 48
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	3c 87       	std	Y+12, r19	; 0x0c
     f02:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     f06:	3c 85       	ldd	r19, Y+12	; 0x0c
     f08:	32 ff       	sbrs	r19, 2
     f0a:	17 c0       	rjmp	.+46     	; 0xf3a <vfprintf+0x354>
     f0c:	31 fd       	sbrc	r19, 1
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <vfprintf+0x330>
     f10:	88 e7       	ldi	r24, 0x78	; 120
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x334>
     f16:	88 e5       	ldi	r24, 0x58	; 88
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	b7 01       	movw	r22, r14
     f1c:	0c c0       	rjmp	.+24     	; 0xf36 <vfprintf+0x350>
     f1e:	83 2f       	mov	r24, r19
     f20:	86 78       	andi	r24, 0x86	; 134
     f22:	59 f0       	breq	.+22     	; 0xf3a <vfprintf+0x354>
     f24:	31 ff       	sbrs	r19, 1
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <vfprintf+0x346>
     f28:	8b e2       	ldi	r24, 0x2B	; 43
     f2a:	01 c0       	rjmp	.+2      	; 0xf2e <vfprintf+0x348>
     f2c:	80 e2       	ldi	r24, 0x20	; 32
     f2e:	37 fd       	sbrc	r19, 7
     f30:	8d e2       	ldi	r24, 0x2D	; 45
     f32:	b7 01       	movw	r22, r14
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     f3a:	a5 14       	cp	r10, r5
     f3c:	38 f4       	brcc	.+14     	; 0xf4c <vfprintf+0x366>
     f3e:	b7 01       	movw	r22, r14
     f40:	80 e3       	ldi	r24, 0x30	; 48
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     f48:	5a 94       	dec	r5
     f4a:	f7 cf       	rjmp	.-18     	; 0xf3a <vfprintf+0x354>
     f4c:	aa 94       	dec	r10
     f4e:	f4 01       	movw	r30, r8
     f50:	ea 0d       	add	r30, r10
     f52:	f1 1d       	adc	r31, r1
     f54:	80 81       	ld	r24, Z
     f56:	b7 01       	movw	r22, r14
     f58:	90 e0       	ldi	r25, 0x00	; 0
     f5a:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     f5e:	a1 10       	cpse	r10, r1
     f60:	f5 cf       	rjmp	.-22     	; 0xf4c <vfprintf+0x366>
     f62:	33 20       	and	r3, r3
     f64:	09 f4       	brne	.+2      	; 0xf68 <vfprintf+0x382>
     f66:	51 ce       	rjmp	.-862    	; 0xc0a <vfprintf+0x24>
     f68:	b7 01       	movw	r22, r14
     f6a:	80 e2       	ldi	r24, 0x20	; 32
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 db 07 	call	0xfb6	; 0xfb6 <fputc>
     f72:	3a 94       	dec	r3
     f74:	f6 cf       	rjmp	.-20     	; 0xf62 <vfprintf+0x37c>
     f76:	f7 01       	movw	r30, r14
     f78:	86 81       	ldd	r24, Z+6	; 0x06
     f7a:	97 81       	ldd	r25, Z+7	; 0x07
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <vfprintf+0x39c>
     f7e:	8f ef       	ldi	r24, 0xFF	; 255
     f80:	9f ef       	ldi	r25, 0xFF	; 255
     f82:	2c 96       	adiw	r28, 0x0c	; 12
     f84:	e2 e1       	ldi	r30, 0x12	; 18
     f86:	0c 94 8d 08 	jmp	0x111a	; 0x111a <__epilogue_restores__>

00000f8a <strnlen_P>:
     f8a:	fc 01       	movw	r30, r24
     f8c:	05 90       	lpm	r0, Z+
     f8e:	61 50       	subi	r22, 0x01	; 1
     f90:	70 40       	sbci	r23, 0x00	; 0
     f92:	01 10       	cpse	r0, r1
     f94:	d8 f7       	brcc	.-10     	; 0xf8c <strnlen_P+0x2>
     f96:	80 95       	com	r24
     f98:	90 95       	com	r25
     f9a:	8e 0f       	add	r24, r30
     f9c:	9f 1f       	adc	r25, r31
     f9e:	08 95       	ret

00000fa0 <strnlen>:
     fa0:	fc 01       	movw	r30, r24
     fa2:	61 50       	subi	r22, 0x01	; 1
     fa4:	70 40       	sbci	r23, 0x00	; 0
     fa6:	01 90       	ld	r0, Z+
     fa8:	01 10       	cpse	r0, r1
     faa:	d8 f7       	brcc	.-10     	; 0xfa2 <strnlen+0x2>
     fac:	80 95       	com	r24
     fae:	90 95       	com	r25
     fb0:	8e 0f       	add	r24, r30
     fb2:	9f 1f       	adc	r25, r31
     fb4:	08 95       	ret

00000fb6 <fputc>:
     fb6:	0f 93       	push	r16
     fb8:	1f 93       	push	r17
     fba:	cf 93       	push	r28
     fbc:	df 93       	push	r29
     fbe:	fb 01       	movw	r30, r22
     fc0:	23 81       	ldd	r18, Z+3	; 0x03
     fc2:	21 fd       	sbrc	r18, 1
     fc4:	03 c0       	rjmp	.+6      	; 0xfcc <fputc+0x16>
     fc6:	8f ef       	ldi	r24, 0xFF	; 255
     fc8:	9f ef       	ldi	r25, 0xFF	; 255
     fca:	28 c0       	rjmp	.+80     	; 0x101c <fputc+0x66>
     fcc:	22 ff       	sbrs	r18, 2
     fce:	16 c0       	rjmp	.+44     	; 0xffc <fputc+0x46>
     fd0:	46 81       	ldd	r20, Z+6	; 0x06
     fd2:	57 81       	ldd	r21, Z+7	; 0x07
     fd4:	24 81       	ldd	r18, Z+4	; 0x04
     fd6:	35 81       	ldd	r19, Z+5	; 0x05
     fd8:	42 17       	cp	r20, r18
     fda:	53 07       	cpc	r21, r19
     fdc:	44 f4       	brge	.+16     	; 0xfee <fputc+0x38>
     fde:	a0 81       	ld	r26, Z
     fe0:	b1 81       	ldd	r27, Z+1	; 0x01
     fe2:	9d 01       	movw	r18, r26
     fe4:	2f 5f       	subi	r18, 0xFF	; 255
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	31 83       	std	Z+1, r19	; 0x01
     fea:	20 83       	st	Z, r18
     fec:	8c 93       	st	X, r24
     fee:	26 81       	ldd	r18, Z+6	; 0x06
     ff0:	37 81       	ldd	r19, Z+7	; 0x07
     ff2:	2f 5f       	subi	r18, 0xFF	; 255
     ff4:	3f 4f       	sbci	r19, 0xFF	; 255
     ff6:	37 83       	std	Z+7, r19	; 0x07
     ff8:	26 83       	std	Z+6, r18	; 0x06
     ffa:	10 c0       	rjmp	.+32     	; 0x101c <fputc+0x66>
     ffc:	eb 01       	movw	r28, r22
     ffe:	09 2f       	mov	r16, r25
    1000:	18 2f       	mov	r17, r24
    1002:	00 84       	ldd	r0, Z+8	; 0x08
    1004:	f1 85       	ldd	r31, Z+9	; 0x09
    1006:	e0 2d       	mov	r30, r0
    1008:	09 95       	icall
    100a:	89 2b       	or	r24, r25
    100c:	e1 f6       	brne	.-72     	; 0xfc6 <fputc+0x10>
    100e:	8e 81       	ldd	r24, Y+6	; 0x06
    1010:	9f 81       	ldd	r25, Y+7	; 0x07
    1012:	01 96       	adiw	r24, 0x01	; 1
    1014:	9f 83       	std	Y+7, r25	; 0x07
    1016:	8e 83       	std	Y+6, r24	; 0x06
    1018:	81 2f       	mov	r24, r17
    101a:	90 2f       	mov	r25, r16
    101c:	df 91       	pop	r29
    101e:	cf 91       	pop	r28
    1020:	1f 91       	pop	r17
    1022:	0f 91       	pop	r16
    1024:	08 95       	ret

00001026 <__ultoa_invert>:
    1026:	fa 01       	movw	r30, r20
    1028:	aa 27       	eor	r26, r26
    102a:	28 30       	cpi	r18, 0x08	; 8
    102c:	51 f1       	breq	.+84     	; 0x1082 <__ultoa_invert+0x5c>
    102e:	20 31       	cpi	r18, 0x10	; 16
    1030:	81 f1       	breq	.+96     	; 0x1092 <__ultoa_invert+0x6c>
    1032:	e8 94       	clt
    1034:	6f 93       	push	r22
    1036:	6e 7f       	andi	r22, 0xFE	; 254
    1038:	6e 5f       	subi	r22, 0xFE	; 254
    103a:	7f 4f       	sbci	r23, 0xFF	; 255
    103c:	8f 4f       	sbci	r24, 0xFF	; 255
    103e:	9f 4f       	sbci	r25, 0xFF	; 255
    1040:	af 4f       	sbci	r26, 0xFF	; 255
    1042:	b1 e0       	ldi	r27, 0x01	; 1
    1044:	3e d0       	rcall	.+124    	; 0x10c2 <__ultoa_invert+0x9c>
    1046:	b4 e0       	ldi	r27, 0x04	; 4
    1048:	3c d0       	rcall	.+120    	; 0x10c2 <__ultoa_invert+0x9c>
    104a:	67 0f       	add	r22, r23
    104c:	78 1f       	adc	r23, r24
    104e:	89 1f       	adc	r24, r25
    1050:	9a 1f       	adc	r25, r26
    1052:	a1 1d       	adc	r26, r1
    1054:	68 0f       	add	r22, r24
    1056:	79 1f       	adc	r23, r25
    1058:	8a 1f       	adc	r24, r26
    105a:	91 1d       	adc	r25, r1
    105c:	a1 1d       	adc	r26, r1
    105e:	6a 0f       	add	r22, r26
    1060:	71 1d       	adc	r23, r1
    1062:	81 1d       	adc	r24, r1
    1064:	91 1d       	adc	r25, r1
    1066:	a1 1d       	adc	r26, r1
    1068:	20 d0       	rcall	.+64     	; 0x10aa <__ultoa_invert+0x84>
    106a:	09 f4       	brne	.+2      	; 0x106e <__ultoa_invert+0x48>
    106c:	68 94       	set
    106e:	3f 91       	pop	r19
    1070:	2a e0       	ldi	r18, 0x0A	; 10
    1072:	26 9f       	mul	r18, r22
    1074:	11 24       	eor	r1, r1
    1076:	30 19       	sub	r19, r0
    1078:	30 5d       	subi	r19, 0xD0	; 208
    107a:	31 93       	st	Z+, r19
    107c:	de f6       	brtc	.-74     	; 0x1034 <__ultoa_invert+0xe>
    107e:	cf 01       	movw	r24, r30
    1080:	08 95       	ret
    1082:	46 2f       	mov	r20, r22
    1084:	47 70       	andi	r20, 0x07	; 7
    1086:	40 5d       	subi	r20, 0xD0	; 208
    1088:	41 93       	st	Z+, r20
    108a:	b3 e0       	ldi	r27, 0x03	; 3
    108c:	0f d0       	rcall	.+30     	; 0x10ac <__ultoa_invert+0x86>
    108e:	c9 f7       	brne	.-14     	; 0x1082 <__ultoa_invert+0x5c>
    1090:	f6 cf       	rjmp	.-20     	; 0x107e <__ultoa_invert+0x58>
    1092:	46 2f       	mov	r20, r22
    1094:	4f 70       	andi	r20, 0x0F	; 15
    1096:	40 5d       	subi	r20, 0xD0	; 208
    1098:	4a 33       	cpi	r20, 0x3A	; 58
    109a:	18 f0       	brcs	.+6      	; 0x10a2 <__ultoa_invert+0x7c>
    109c:	49 5d       	subi	r20, 0xD9	; 217
    109e:	31 fd       	sbrc	r19, 1
    10a0:	40 52       	subi	r20, 0x20	; 32
    10a2:	41 93       	st	Z+, r20
    10a4:	02 d0       	rcall	.+4      	; 0x10aa <__ultoa_invert+0x84>
    10a6:	a9 f7       	brne	.-22     	; 0x1092 <__ultoa_invert+0x6c>
    10a8:	ea cf       	rjmp	.-44     	; 0x107e <__ultoa_invert+0x58>
    10aa:	b4 e0       	ldi	r27, 0x04	; 4
    10ac:	a6 95       	lsr	r26
    10ae:	97 95       	ror	r25
    10b0:	87 95       	ror	r24
    10b2:	77 95       	ror	r23
    10b4:	67 95       	ror	r22
    10b6:	ba 95       	dec	r27
    10b8:	c9 f7       	brne	.-14     	; 0x10ac <__ultoa_invert+0x86>
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	61 05       	cpc	r22, r1
    10be:	71 05       	cpc	r23, r1
    10c0:	08 95       	ret
    10c2:	9b 01       	movw	r18, r22
    10c4:	ac 01       	movw	r20, r24
    10c6:	0a 2e       	mov	r0, r26
    10c8:	06 94       	lsr	r0
    10ca:	57 95       	ror	r21
    10cc:	47 95       	ror	r20
    10ce:	37 95       	ror	r19
    10d0:	27 95       	ror	r18
    10d2:	ba 95       	dec	r27
    10d4:	c9 f7       	brne	.-14     	; 0x10c8 <__ultoa_invert+0xa2>
    10d6:	62 0f       	add	r22, r18
    10d8:	73 1f       	adc	r23, r19
    10da:	84 1f       	adc	r24, r20
    10dc:	95 1f       	adc	r25, r21
    10de:	a0 1d       	adc	r26, r0
    10e0:	08 95       	ret

000010e2 <__prologue_saves__>:
    10e2:	2f 92       	push	r2
    10e4:	3f 92       	push	r3
    10e6:	4f 92       	push	r4
    10e8:	5f 92       	push	r5
    10ea:	6f 92       	push	r6
    10ec:	7f 92       	push	r7
    10ee:	8f 92       	push	r8
    10f0:	9f 92       	push	r9
    10f2:	af 92       	push	r10
    10f4:	bf 92       	push	r11
    10f6:	cf 92       	push	r12
    10f8:	df 92       	push	r13
    10fa:	ef 92       	push	r14
    10fc:	ff 92       	push	r15
    10fe:	0f 93       	push	r16
    1100:	1f 93       	push	r17
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	cd b7       	in	r28, 0x3d	; 61
    1108:	de b7       	in	r29, 0x3e	; 62
    110a:	ca 1b       	sub	r28, r26
    110c:	db 0b       	sbc	r29, r27
    110e:	0f b6       	in	r0, 0x3f	; 63
    1110:	f8 94       	cli
    1112:	de bf       	out	0x3e, r29	; 62
    1114:	0f be       	out	0x3f, r0	; 63
    1116:	cd bf       	out	0x3d, r28	; 61
    1118:	09 94       	ijmp

0000111a <__epilogue_restores__>:
    111a:	2a 88       	ldd	r2, Y+18	; 0x12
    111c:	39 88       	ldd	r3, Y+17	; 0x11
    111e:	48 88       	ldd	r4, Y+16	; 0x10
    1120:	5f 84       	ldd	r5, Y+15	; 0x0f
    1122:	6e 84       	ldd	r6, Y+14	; 0x0e
    1124:	7d 84       	ldd	r7, Y+13	; 0x0d
    1126:	8c 84       	ldd	r8, Y+12	; 0x0c
    1128:	9b 84       	ldd	r9, Y+11	; 0x0b
    112a:	aa 84       	ldd	r10, Y+10	; 0x0a
    112c:	b9 84       	ldd	r11, Y+9	; 0x09
    112e:	c8 84       	ldd	r12, Y+8	; 0x08
    1130:	df 80       	ldd	r13, Y+7	; 0x07
    1132:	ee 80       	ldd	r14, Y+6	; 0x06
    1134:	fd 80       	ldd	r15, Y+5	; 0x05
    1136:	0c 81       	ldd	r16, Y+4	; 0x04
    1138:	1b 81       	ldd	r17, Y+3	; 0x03
    113a:	aa 81       	ldd	r26, Y+2	; 0x02
    113c:	b9 81       	ldd	r27, Y+1	; 0x01
    113e:	ce 0f       	add	r28, r30
    1140:	d1 1d       	adc	r29, r1
    1142:	0f b6       	in	r0, 0x3f	; 63
    1144:	f8 94       	cli
    1146:	de bf       	out	0x3e, r29	; 62
    1148:	0f be       	out	0x3f, r0	; 63
    114a:	cd bf       	out	0x3d, r28	; 61
    114c:	ed 01       	movw	r28, r26
    114e:	08 95       	ret

00001150 <_exit>:
    1150:	f8 94       	cli

00001152 <__stop_program>:
    1152:	ff cf       	rjmp	.-2      	; 0x1152 <__stop_program>
