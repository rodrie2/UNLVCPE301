
Trynum3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b6  00800100  0000108a  0000111e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000108a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a1  008001b6  008001b6  000011d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001230  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008c5  00000000  00000000  00001300  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000021d  00000000  00000000  00001bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000038e  00000000  00000000  00001de2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000016c  00000000  00000000  00002170  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002a1  00000000  00000000  000022dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000697  00000000  00000000  0000257d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002c14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea e8       	ldi	r30, 0x8A	; 138
      7c:	f0 e1       	ldi	r31, 0x10	; 16
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3b       	cpi	r26, 0xB6	; 182
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 eb       	ldi	r26, 0xB6	; 182
      8e:	b1 e0       	ldi	r27, 0x01	; 1
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a7 35       	cpi	r26, 0x57	; 87
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 cc 01 	call	0x398	; 0x398 <main>
      9e:	0c 94 43 08 	jmp	0x1086	; 0x1086 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <i2c_init>:
*************************************************************************/
void i2c_init(void)
{
  /* initialize TWI clock: 100 kHz clock, TWPS = 0 => prescaler = 1 */
  
  TWSR = 0;                         /* no prescaler */
      a6:	10 92 b9 00 	sts	0x00B9, r1
  TWBR = ((F_CPU/SCL_CLOCK)-16)/2;  /* must be > 10 for stable operation */
      aa:	80 e2       	ldi	r24, 0x20	; 32
      ac:	80 93 b8 00 	sts	0x00B8, r24
      b0:	08 95       	ret

000000b2 <i2c_start>:
{
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
 
	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
      b2:	94 ea       	ldi	r25, 0xA4	; 164
      b4:	90 93 bc 00 	sts	0x00BC, r25

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
      b8:	4f ef       	ldi	r20, 0xFF	; 255
      ba:	50 e0       	ldi	r21, 0x00	; 0
      bc:	60 e0       	ldi	r22, 0x00	; 0
      be:	70 e0       	ldi	r23, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      c0:	ec eb       	ldi	r30, 0xBC	; 188
      c2:	f0 e0       	ldi	r31, 0x00	; 0
      c4:	90 81       	ld	r25, Z
      c6:	99 23       	and	r25, r25
      c8:	34 f0       	brlt	.+12     	; 0xd6 <i2c_start+0x24>
      ca:	41 50       	subi	r20, 0x01	; 1
      cc:	51 09       	sbc	r21, r1
      ce:	61 09       	sbc	r22, r1
      d0:	71 09       	sbc	r23, r1
      d2:	c0 f7       	brcc	.-16     	; 0xc4 <i2c_start+0x12>
      d4:	04 c0       	rjmp	.+8      	; 0xde <i2c_start+0x2c>
	if(i2c_timer == 0)
      d6:	45 2b       	or	r20, r21
      d8:	46 2b       	or	r20, r22
      da:	47 2b       	or	r20, r23
      dc:	41 f1       	breq	.+80     	; 0x12e <i2c_start+0x7c>
	{
		return 1;
	}

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
      de:	90 91 b9 00 	lds	r25, 0x00B9
      e2:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
      e4:	98 30       	cpi	r25, 0x08	; 8
      e6:	11 f0       	breq	.+4      	; 0xec <i2c_start+0x3a>
      e8:	90 31       	cpi	r25, 0x10	; 16
      ea:	19 f5       	brne	.+70     	; 0x132 <i2c_start+0x80>

	// send device address
	TWDR = address;
      ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
      f0:	84 e8       	ldi	r24, 0x84	; 132
      f2:	80 93 bc 00 	sts	0x00BC, r24

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
      f6:	8f ef       	ldi	r24, 0xFF	; 255
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	a0 e0       	ldi	r26, 0x00	; 0
      fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
      fe:	ec eb       	ldi	r30, 0xBC	; 188
     100:	f0 e0       	ldi	r31, 0x00	; 0
     102:	20 81       	ld	r18, Z
     104:	22 23       	and	r18, r18
     106:	2c f0       	brlt	.+10     	; 0x112 <i2c_start+0x60>
     108:	01 97       	sbiw	r24, 0x01	; 1
     10a:	a1 09       	sbc	r26, r1
     10c:	b1 09       	sbc	r27, r1
     10e:	c8 f7       	brcc	.-14     	; 0x102 <i2c_start+0x50>
     110:	04 c0       	rjmp	.+8      	; 0x11a <i2c_start+0x68>
	if(i2c_timer == 0)
     112:	89 2b       	or	r24, r25
     114:	8a 2b       	or	r24, r26
     116:	8b 2b       	or	r24, r27
     118:	71 f0       	breq	.+28     	; 0x136 <i2c_start+0x84>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
     11a:	90 91 b9 00 	lds	r25, 0x00B9
     11e:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) 
     120:	98 31       	cpi	r25, 0x18	; 24
     122:	59 f0       	breq	.+22     	; 0x13a <i2c_start+0x88>
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 34       	cpi	r25, 0x40	; 64
     128:	49 f4       	brne	.+18     	; 0x13c <i2c_start+0x8a>
     12a:	80 e0       	ldi	r24, 0x00	; 0
     12c:	08 95       	ret
	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
	{
		return 1;
     12e:	81 e0       	ldi	r24, 0x01	; 1
     130:	08 95       	ret
	}

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
	if ( (twst != TW_START) && (twst != TW_REP_START)) return 1;
     132:	81 e0       	ldi	r24, 0x01	; 1
     134:	08 95       	ret

	// wail until transmission completed and ACK/NACK has been received
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	08 95       	ret
		{
			//USART_tx_string(test1);
			return 1;
		}

	return 0;
     13a:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
     13c:	08 95       	ret

0000013e <i2c_start_wait>:
 If device is busy, use ack polling to wait until device is ready
 
 Input:   address and transfer direction of I2C device
*************************************************************************/
void i2c_start_wait(unsigned char address)
{
     13e:	1f 93       	push	r17
     140:	cf 93       	push	r28
     142:	df 93       	push	r29
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     144:	ec eb       	ldi	r30, 0xBC	; 188
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	64 ea       	ldi	r22, 0xA4	; 164
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     14a:	50 e0       	ldi	r21, 0x00	; 0
     14c:	40 e0       	ldi	r20, 0x00	; 0

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     14e:	a9 eb       	ldi	r26, 0xB9	; 185
     150:	b0 e0       	ldi	r27, 0x00	; 0
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
     152:	cb eb       	ldi	r28, 0xBB	; 187
     154:	d0 e0       	ldi	r29, 0x00	; 0
    	TWCR = (1<<TWINT) | (1<<TWEN);
     156:	74 e8       	ldi	r23, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     158:	14 e9       	ldi	r17, 0x94	; 148
	uint8_t   twst;

    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     15a:	60 83       	st	Z, r22
    
    	// wait until transmission completed
	    i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     15c:	25 2f       	mov	r18, r21
     15e:	34 2f       	mov	r19, r20
     160:	90 81       	ld	r25, Z
     162:	99 23       	and	r25, r25
     164:	34 f0       	brlt	.+12     	; 0x172 <i2c_start_wait+0x34>
     166:	2f 5f       	subi	r18, 0xFF	; 255
     168:	3f 4f       	sbci	r19, 0xFF	; 255
     16a:	21 15       	cp	r18, r1
     16c:	91 e0       	ldi	r25, 0x01	; 1
     16e:	39 07       	cpc	r19, r25
     170:	b9 f7       	brne	.-18     	; 0x160 <i2c_start_wait+0x22>

    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     172:	9c 91       	ld	r25, X
     174:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != TW_START) && (twst != TW_REP_START)) continue;
     176:	98 30       	cpi	r25, 0x08	; 8
     178:	11 f0       	breq	.+4      	; 0x17e <i2c_start_wait+0x40>
     17a:	90 31       	cpi	r25, 0x10	; 16
     17c:	71 f7       	brne	.-36     	; 0x15a <i2c_start_wait+0x1c>
    
    	// send device address
    	TWDR = address;
     17e:	88 83       	st	Y, r24
    	TWCR = (1<<TWINT) | (1<<TWEN);
     180:	70 83       	st	Z, r23
    
    	// wail until transmission completed
    	i2c_timer = I2C_TIMER_DELAY;
    	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     182:	25 2f       	mov	r18, r21
     184:	34 2f       	mov	r19, r20
     186:	90 81       	ld	r25, Z
     188:	99 23       	and	r25, r25
     18a:	34 f0       	brlt	.+12     	; 0x198 <i2c_start_wait+0x5a>
     18c:	2f 5f       	subi	r18, 0xFF	; 255
     18e:	3f 4f       	sbci	r19, 0xFF	; 255
     190:	21 15       	cp	r18, r1
     192:	91 e0       	ldi	r25, 0x01	; 1
     194:	39 07       	cpc	r19, r25
     196:	b9 f7       	brne	.-18     	; 0x186 <i2c_start_wait+0x48>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
     198:	9c 91       	ld	r25, X
     19a:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == TW_MT_SLA_NACK )||(twst ==TW_MR_DATA_NACK) ) 
     19c:	90 32       	cpi	r25, 0x20	; 32
     19e:	11 f0       	breq	.+4      	; 0x1a4 <i2c_start_wait+0x66>
     1a0:	98 35       	cpi	r25, 0x58	; 88
     1a2:	69 f4       	brne	.+26     	; 0x1be <i2c_start_wait+0x80>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1a4:	10 83       	st	Z, r17
	        
	        // wait until stop condition is executed and bus released
	        i2c_timer = I2C_TIMER_DELAY;
	        while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1a6:	25 2f       	mov	r18, r21
     1a8:	34 2f       	mov	r19, r20
     1aa:	90 81       	ld	r25, Z
     1ac:	94 ff       	sbrs	r25, 4
     1ae:	d5 cf       	rjmp	.-86     	; 0x15a <i2c_start_wait+0x1c>
     1b0:	2f 5f       	subi	r18, 0xFF	; 255
     1b2:	3f 4f       	sbci	r19, 0xFF	; 255
     1b4:	21 15       	cp	r18, r1
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	39 07       	cpc	r19, r25
     1ba:	b9 f7       	brne	.-18     	; 0x1aa <i2c_start_wait+0x6c>
     1bc:	ce cf       	rjmp	.-100    	; 0x15a <i2c_start_wait+0x1c>
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }

}/* i2c_start_wait */
     1be:	df 91       	pop	r29
     1c0:	cf 91       	pop	r28
     1c2:	1f 91       	pop	r17
     1c4:	08 95       	ret

000001c6 <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
     1c6:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>

}/* i2c_rep_start */
     1ca:	08 95       	ret

000001cc <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     1cc:	84 e9       	ldi	r24, 0x94	; 148
     1ce:	80 93 bc 00 	sts	0x00BC, r24
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     1d2:	80 e0       	ldi	r24, 0x00	; 0
     1d4:	90 e0       	ldi	r25, 0x00	; 0
     1d6:	ec eb       	ldi	r30, 0xBC	; 188
     1d8:	f0 e0       	ldi	r31, 0x00	; 0
     1da:	20 81       	ld	r18, Z
     1dc:	24 ff       	sbrs	r18, 4
     1de:	05 c0       	rjmp	.+10     	; 0x1ea <i2c_stop+0x1e>
     1e0:	01 96       	adiw	r24, 0x01	; 1
     1e2:	81 15       	cp	r24, r1
     1e4:	21 e0       	ldi	r18, 0x01	; 1
     1e6:	92 07       	cpc	r25, r18
     1e8:	c1 f7       	brne	.-16     	; 0x1da <i2c_stop+0xe>
     1ea:	08 95       	ret

000001ec <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     1ec:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     1f0:	84 e8       	ldi	r24, 0x84	; 132
     1f2:	80 93 bc 00 	sts	0x00BC, r24

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	a0 e0       	ldi	r26, 0x00	; 0
     1fc:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     1fe:	ec eb       	ldi	r30, 0xBC	; 188
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	20 81       	ld	r18, Z
     204:	22 23       	and	r18, r18
     206:	2c f0       	brlt	.+10     	; 0x212 <i2c_write+0x26>
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	a1 09       	sbc	r26, r1
     20c:	b1 09       	sbc	r27, r1
     20e:	c8 f7       	brcc	.-14     	; 0x202 <i2c_write+0x16>
     210:	04 c0       	rjmp	.+8      	; 0x21a <i2c_write+0x2e>
	if(i2c_timer == 0)
     212:	89 2b       	or	r24, r25
     214:	8a 2b       	or	r24, r26
     216:	8b 2b       	or	r24, r27
     218:	41 f0       	breq	.+16     	; 0x22a <i2c_write+0x3e>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     21a:	90 91 b9 00 	lds	r25, 0x00B9
     21e:	98 7f       	andi	r25, 0xF8	; 248
	if( twst != TW_MT_DATA_ACK) return 1;
     220:	81 e0       	ldi	r24, 0x01	; 1
     222:	98 32       	cpi	r25, 0x28	; 40
     224:	19 f4       	brne	.+6      	; 0x22c <i2c_write+0x40>
     226:	80 e0       	ldi	r24, 0x00	; 0
     228:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     22a:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     22c:	08 95       	ret

0000022e <i2c_readAck>:
*************************************************************************/
unsigned char i2c_readAck(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
     22e:	84 ec       	ldi	r24, 0xC4	; 196
     230:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	a0 e0       	ldi	r26, 0x00	; 0
     23a:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     23c:	ec eb       	ldi	r30, 0xBC	; 188
     23e:	f0 e0       	ldi	r31, 0x00	; 0
     240:	20 81       	ld	r18, Z
     242:	22 23       	and	r18, r18
     244:	2c f0       	brlt	.+10     	; 0x250 <i2c_readAck+0x22>
     246:	01 97       	sbiw	r24, 0x01	; 1
     248:	a1 09       	sbc	r26, r1
     24a:	b1 09       	sbc	r27, r1
     24c:	c8 f7       	brcc	.-14     	; 0x240 <i2c_readAck+0x12>
     24e:	04 c0       	rjmp	.+8      	; 0x258 <i2c_readAck+0x2a>
	if(i2c_timer == 0)
     250:	89 2b       	or	r24, r25
     252:	8a 2b       	or	r24, r26
     254:	8b 2b       	or	r24, r27
     256:	19 f0       	breq	.+6      	; 0x25e <i2c_readAck+0x30>
		return 0;

    return TWDR;
     258:	80 91 bb 00 	lds	r24, 0x00BB
     25c:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     25e:	80 e0       	ldi	r24, 0x00	; 0

    return TWDR;

}/* i2c_readAck */
     260:	08 95       	ret

00000262 <i2c_readNak>:
*************************************************************************/
unsigned char i2c_readNak(void)
{
	uint32_t  i2c_timer = 0;

	TWCR = (1<<TWINT) | (1<<TWEN);
     262:	84 e8       	ldi	r24, 0x84	; 132
     264:	80 93 bc 00 	sts	0x00BC, r24
	i2c_timer = I2C_TIMER_DELAY;
     268:	8f ef       	ldi	r24, 0xFF	; 255
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	a0 e0       	ldi	r26, 0x00	; 0
     26e:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     270:	ec eb       	ldi	r30, 0xBC	; 188
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	20 81       	ld	r18, Z
     276:	22 23       	and	r18, r18
     278:	2c f0       	brlt	.+10     	; 0x284 <i2c_readNak+0x22>
     27a:	01 97       	sbiw	r24, 0x01	; 1
     27c:	a1 09       	sbc	r26, r1
     27e:	b1 09       	sbc	r27, r1
     280:	c8 f7       	brcc	.-14     	; 0x274 <i2c_readNak+0x12>
     282:	04 c0       	rjmp	.+8      	; 0x28c <i2c_readNak+0x2a>
	if(i2c_timer == 0)
     284:	89 2b       	or	r24, r25
     286:	8a 2b       	or	r24, r26
     288:	8b 2b       	or	r24, r27
     28a:	19 f0       	breq	.+6      	; 0x292 <i2c_readNak+0x30>
		return 0;
	
    return TWDR;
     28c:	80 91 bb 00 	lds	r24, 0x00BB
     290:	08 95       	ret

	TWCR = (1<<TWINT) | (1<<TWEN);
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 0;
     292:	80 e0       	ldi	r24, 0x00	; 0
	
    return TWDR;

}/* i2c_readNak */
     294:	08 95       	ret

00000296 <USART_tx_string>:


void USART_tx_string (char *data)
{
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
	while((*data!='\0')){
     29a:	fc 01       	movw	r30, r24
     29c:	20 81       	ld	r18, Z
     29e:	22 23       	and	r18, r18
     2a0:	69 f0       	breq	.+26     	; 0x2bc <USART_tx_string+0x26>
     2a2:	dc 01       	movw	r26, r24
     2a4:	11 96       	adiw	r26, 0x01	; 1
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2a6:	e0 ec       	ldi	r30, 0xC0	; 192
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = *data;
     2aa:	c6 ec       	ldi	r28, 0xC6	; 198
     2ac:	d0 e0       	ldi	r29, 0x00	; 0


void USART_tx_string (char *data)
{
	while((*data!='\0')){
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
     2ae:	90 81       	ld	r25, Z
     2b0:	95 ff       	sbrs	r25, 5
     2b2:	fd cf       	rjmp	.-6      	; 0x2ae <USART_tx_string+0x18>
		UDR0 = *data;
     2b4:	28 83       	st	Y, r18
}/* i2c_readNak */


void USART_tx_string (char *data)
{
	while((*data!='\0')){
     2b6:	2d 91       	ld	r18, X+
     2b8:	21 11       	cpse	r18, r1
     2ba:	f9 cf       	rjmp	.-14     	; 0x2ae <USART_tx_string+0x18>
		while(!(UCSR0A&(1<<UDRE0)));			//wait until transmit register is empty
		UDR0 = *data;
		data++;
	}
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <usart_init>:


void usart_init (void)
{
	//synchronous usart, transmit 8-bit data
	UCSR0C = ((1<<UCSZ01)|(1<<UCSZ00)|(1<<UMSEL00));
     2c2:	86 e4       	ldi	r24, 0x46	; 70
     2c4:	80 93 c2 00 	sts	0x00C2, r24
	//115.2K Baud Rate from 8MHz clock
	UBRR0H = 0x00;
     2c8:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L = 0x22;
     2cc:	82 e2       	ldi	r24, 0x22	; 34
     2ce:	80 93 c4 00 	sts	0x00C4, r24
	UCSR0B = (1<<TXEN0);	//enable transmitter
     2d2:	88 e0       	ldi	r24, 0x08	; 8
     2d4:	80 93 c1 00 	sts	0x00C1, r24
     2d8:	08 95       	ret

000002da <MPU6050_writereg>:
	}
}*/


void MPU6050_writereg(uint8_t accel, uint8_t reg, uint8_t val)
{
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	d6 2f       	mov	r29, r22
     2e0:	c4 2f       	mov	r28, r20
	i2c_start(accel+I2C_WRITE);
     2e2:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
	i2c_write(reg);  // go to register e.g. 106 user control
     2e6:	8d 2f       	mov	r24, r29
     2e8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_write(val);  // set value e.g. to 0100 0000 FIFO enable
     2ec:	8c 2f       	mov	r24, r28
     2ee:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_stop();        // set stop condition = release bus
     2f2:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <MPU6050_signed_readreg>:
	i2c_stop();
	return raw;
}

int16_t MPU6050_signed_readreg(uint8_t accel, uint8_t reg)//read signed 16 bits
{
     2fc:	cf 93       	push	r28
     2fe:	df 93       	push	r29
     300:	c8 2f       	mov	r28, r24
     302:	d6 2f       	mov	r29, r22
	i2c_start_wait(accel+I2C_WRITE); // set device address and write mode
     304:	0e 94 9f 00 	call	0x13e	; 0x13e <i2c_start_wait>
	i2c_write(reg);                                  // ACCEL_OUT
     308:	8d 2f       	mov	r24, r29
     30a:	0e 94 f6 00 	call	0x1ec	; 0x1ec <i2c_write>
	i2c_rep_start(accel+I2C_READ);    // set device address and read mode
     30e:	81 e0       	ldi	r24, 0x01	; 1
     310:	8c 0f       	add	r24, r28
     312:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <i2c_rep_start>
	char raw1 = i2c_readAck();                    // read one intermediate byte
     316:	0e 94 17 01 	call	0x22e	; 0x22e <i2c_readAck>
     31a:	c8 2f       	mov	r28, r24
	int16_t raw2 = (raw1<<8) | i2c_readNak();        // read last byte
     31c:	0e 94 31 01 	call	0x262	; 0x262 <i2c_readNak>
     320:	d0 e0       	ldi	r29, 0x00	; 0
     322:	dc 2f       	mov	r29, r28
     324:	cc 27       	eor	r28, r28
     326:	c8 2b       	or	r28, r24
	i2c_stop();
     328:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
	return raw2;
}
     32c:	ce 01       	movw	r24, r28
     32e:	df 91       	pop	r29
     330:	cf 91       	pop	r28
     332:	08 95       	ret

00000334 <Init_MPU6050>:



void Init_MPU6050(uint8_t accel)
{
     334:	cf 93       	push	r28
     336:	c8 2f       	mov	r28, r24

	ret = i2c_start(accel+I2C_WRITE);       // set device address and write mode
     338:	0e 94 59 00 	call	0xb2	; 0xb2 <i2c_start>
     33c:	80 93 56 02 	sts	0x0256, r24
	if ( ret )//== "1" )
     340:	88 23       	and	r24, r24
     342:	19 f0       	breq	.+6      	; 0x34a <Init_MPU6050+0x16>
	{

		//snprintf(outs,sizeof(outs),"failed to issue start condition \n\r");
		//USART_tx_string(outs);
		i2c_stop();
     344:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
     348:	23 c0       	rjmp	.+70     	; 0x390 <Init_MPU6050+0x5c>
	}
	else
	{
		/* issuing start condition ok, device accessible */
		MPU6050_writereg(accel, 0x6B, 0x00); // reg 107 set value to 0000 0000 and wake up sensor
     34a:	40 e0       	ldi	r20, 0x00	; 0
     34c:	6b e6       	ldi	r22, 0x6B	; 107
     34e:	8c 2f       	mov	r24, r28
     350:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x19, 0x07); // reg 25 sample rate divider set value to 0000 1000 for 1000 Hz
     354:	47 e0       	ldi	r20, 0x07	; 7
     356:	69 e1       	ldi	r22, 0x19	; 25
     358:	8c 2f       	mov	r24, r28
     35a:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x1C, 0x18); // reg 28 acceleration configuration set value to 0001 1000 for 16g
     35e:	48 e1       	ldi	r20, 0x18	; 24
     360:	6c e1       	ldi	r22, 0x1C	; 28
     362:	8c 2f       	mov	r24, r28
     364:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		//MPU6050_writereg(accel, 0x1B, 0x18); // set gyro config value at 
		MPU6050_writereg(accel, 0x23, 0xF8); // reg 35 FIFO enable set value to 1111 1000 for all sensors not slave
     368:	48 ef       	ldi	r20, 0xF8	; 248
     36a:	63 e2       	ldi	r22, 0x23	; 35
     36c:	8c 2f       	mov	r24, r28
     36e:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x37, 0x10); // reg 55 interrupt configuration set value to 0001 0000 for logic level high and read clear
     372:	40 e1       	ldi	r20, 0x10	; 16
     374:	67 e3       	ldi	r22, 0x37	; 55
     376:	8c 2f       	mov	r24, r28
     378:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x38, 0x01); // reg 56 interrupt enable set value to 0000 0001 data ready creates interrupt
     37c:	41 e0       	ldi	r20, 0x01	; 1
     37e:	68 e3       	ldi	r22, 0x38	; 56
     380:	8c 2f       	mov	r24, r28
     382:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		MPU6050_writereg(accel, 0x6A, 0x40); // reg 106 user control set value to 0100 0000 FIFO enable
     386:	40 e4       	ldi	r20, 0x40	; 64
     388:	6a e6       	ldi	r22, 0x6A	; 106
     38a:	8c 2f       	mov	r24, r28
     38c:	0e 94 6d 01 	call	0x2da	; 0x2da <MPU6050_writereg>
		//snprintf(outs,sizeof(outs),"done start \n\r");
		//USART_tx_string(outs);
	}
	i2c_stop();
     390:	0e 94 e6 00 	call	0x1cc	; 0x1cc <i2c_stop>
}
     394:	cf 91       	pop	r28
     396:	08 95       	ret

00000398 <main>:



int main(){
	
	DDRD = 0xF0;
     398:	80 ef       	ldi	r24, 0xF0	; 240
     39a:	8a b9       	out	0x0a, r24	; 10
	DDRC = 0x00;
     39c:	17 b8       	out	0x07, r1	; 7
	
	//declare average calibrated accelerometer values
	//initialize calibarition values
	//declare accelerometer value strings

	usart_init();//initialize usart
     39e:	0e 94 61 01 	call	0x2c2	; 0x2c2 <usart_init>
	//USART_tx_string(test);
	i2c_init();     // init I2C interface
     3a2:	0e 94 53 00 	call	0xa6	; 0xa6 <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3a6:	2f ef       	ldi	r18, 0xFF	; 255
     3a8:	83 ed       	ldi	r24, 0xD3	; 211
     3aa:	90 e3       	ldi	r25, 0x30	; 48
     3ac:	21 50       	subi	r18, 0x01	; 1
     3ae:	80 40       	sbci	r24, 0x00	; 0
     3b0:	90 40       	sbci	r25, 0x00	; 0
     3b2:	e1 f7       	brne	.-8      	; 0x3ac <main+0x14>
     3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <main+0x1e>
     3b6:	00 00       	nop
	_delay_ms(2000);  // Wait for 200 ms.
	Init_MPU6050(MPU60501);    // sensor init
     3b8:	80 ed       	ldi	r24, 0xD0	; 208
     3ba:	0e 94 9a 01 	call	0x334	; 0x334 <Init_MPU6050>
     3be:	2f ef       	ldi	r18, 0xFF	; 255
     3c0:	83 ed       	ldi	r24, 0xD3	; 211
     3c2:	90 e3       	ldi	r25, 0x30	; 48
     3c4:	21 50       	subi	r18, 0x01	; 1
     3c6:	80 40       	sbci	r24, 0x00	; 0
     3c8:	90 40       	sbci	r25, 0x00	; 0
     3ca:	e1 f7       	brne	.-8      	; 0x3c4 <main+0x2c>
     3cc:	00 c0       	rjmp	.+0      	; 0x3ce <main+0x36>
     3ce:	00 00       	nop
     3d0:	2f ef       	ldi	r18, 0xFF	; 255
     3d2:	89 e6       	ldi	r24, 0x69	; 105
     3d4:	98 e1       	ldi	r25, 0x18	; 24
     3d6:	21 50       	subi	r18, 0x01	; 1
     3d8:	80 40       	sbci	r24, 0x00	; 0
     3da:	90 40       	sbci	r25, 0x00	; 0
     3dc:	e1 f7       	brne	.-8      	; 0x3d6 <main+0x3e>
     3de:	00 c0       	rjmp	.+0      	; 0x3e0 <main+0x48>
     3e0:	00 00       	nop
	//snprintf(outs,sizeof(outs),"6050 initialized \n\r");
	//USART_tx_string(outs);
	
	//resetting and setting up modes of wifi module
	_delay_ms(1000);
	snprintf(ATs,sizeof(ATs), "AT+RST\r");
     3e2:	88 e0       	ldi	r24, 0x08	; 8
     3e4:	e0 e0       	ldi	r30, 0x00	; 0
     3e6:	f1 e0       	ldi	r31, 0x01	; 1
     3e8:	a8 ee       	ldi	r26, 0xE8	; 232
     3ea:	b1 e0       	ldi	r27, 0x01	; 1
     3ec:	01 90       	ld	r0, Z+
     3ee:	0d 92       	st	X+, r0
     3f0:	8a 95       	dec	r24
     3f2:	e1 f7       	brne	.-8      	; 0x3ec <main+0x54>
	USART_tx_string(ATs);
     3f4:	88 ee       	ldi	r24, 0xE8	; 232
     3f6:	91 e0       	ldi	r25, 0x01	; 1
     3f8:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     3fc:	2f ef       	ldi	r18, 0xFF	; 255
     3fe:	83 ed       	ldi	r24, 0xD3	; 211
     400:	90 e3       	ldi	r25, 0x30	; 48
     402:	21 50       	subi	r18, 0x01	; 1
     404:	80 40       	sbci	r24, 0x00	; 0
     406:	90 40       	sbci	r25, 0x00	; 0
     408:	e1 f7       	brne	.-8      	; 0x402 <main+0x6a>
     40a:	00 c0       	rjmp	.+0      	; 0x40c <main+0x74>
     40c:	00 00       	nop
	_delay_ms(2000);
	snprintf(ATs,sizeof(ATs), "AT+CIPMODE=0\r");
     40e:	8e e0       	ldi	r24, 0x0E	; 14
     410:	e8 e0       	ldi	r30, 0x08	; 8
     412:	f1 e0       	ldi	r31, 0x01	; 1
     414:	a8 ee       	ldi	r26, 0xE8	; 232
     416:	b1 e0       	ldi	r27, 0x01	; 1
     418:	01 90       	ld	r0, Z+
     41a:	0d 92       	st	X+, r0
     41c:	8a 95       	dec	r24
     41e:	e1 f7       	brne	.-8      	; 0x418 <main+0x80>
	USART_tx_string(ATs);
     420:	88 ee       	ldi	r24, 0xE8	; 232
     422:	91 e0       	ldi	r25, 0x01	; 1
     424:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     428:	2f ef       	ldi	r18, 0xFF	; 255
     42a:	89 e6       	ldi	r24, 0x69	; 105
     42c:	98 e1       	ldi	r25, 0x18	; 24
     42e:	21 50       	subi	r18, 0x01	; 1
     430:	80 40       	sbci	r24, 0x00	; 0
     432:	90 40       	sbci	r25, 0x00	; 0
     434:	e1 f7       	brne	.-8      	; 0x42e <main+0x96>
     436:	00 c0       	rjmp	.+0      	; 0x438 <main+0xa0>
     438:	00 00       	nop
	_delay_ms(1000);
	snprintf(ATs,sizeof(ATs), "AT+CIPMUX=1\r");
     43a:	8d e0       	ldi	r24, 0x0D	; 13
     43c:	e6 e1       	ldi	r30, 0x16	; 22
     43e:	f1 e0       	ldi	r31, 0x01	; 1
     440:	a8 ee       	ldi	r26, 0xE8	; 232
     442:	b1 e0       	ldi	r27, 0x01	; 1
     444:	01 90       	ld	r0, Z+
     446:	0d 92       	st	X+, r0
     448:	8a 95       	dec	r24
     44a:	e1 f7       	brne	.-8      	; 0x444 <main+0xac>
	USART_tx_string(ATs);
     44c:	88 ee       	ldi	r24, 0xE8	; 232
     44e:	91 e0       	ldi	r25, 0x01	; 1
     450:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     454:	2f ef       	ldi	r18, 0xFF	; 255
     456:	83 ed       	ldi	r24, 0xD3	; 211
     458:	90 e3       	ldi	r25, 0x30	; 48
     45a:	21 50       	subi	r18, 0x01	; 1
     45c:	80 40       	sbci	r24, 0x00	; 0
     45e:	90 40       	sbci	r25, 0x00	; 0
     460:	e1 f7       	brne	.-8      	; 0x45a <main+0xc2>
     462:	00 c0       	rjmp	.+0      	; 0x464 <main+0xcc>
     464:	00 00       	nop
int main(){
	
	DDRD = 0xF0;
	DDRC = 0x00;
	int i=0;
	int wifiout = 100;					//value to display on chart in Thingspeak.
     466:	0f 2e       	mov	r0, r31
     468:	f4 e6       	ldi	r31, 0x64	; 100
     46a:	9f 2e       	mov	r9, r31
     46c:	f0 2d       	mov	r31, r0
     46e:	31 2c       	mov	r3, r1
		//every 25 secs
		//send code
		
	//za1 = 101;
	_delay_ms(100);
		snprintf(ATs,sizeof(ATs), "AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80\r");
     470:	c8 ee       	ldi	r28, 0xE8	; 232
     472:	d1 e0       	ldi	r29, 0x01	; 1
     474:	0f 2e       	mov	r0, r31
     476:	fd e2       	ldi	r31, 0x2D	; 45
     478:	bf 2e       	mov	r11, r31
     47a:	f0 2d       	mov	r31, r0
		USART_tx_string(ATs);
		_delay_ms(2000);
		snprintf(ATs,sizeof(ATs), "AT+CIPSEND=0,125\r");
     47c:	0f 2e       	mov	r0, r31
     47e:	f2 e1       	ldi	r31, 0x12	; 18
     480:	af 2e       	mov	r10, r31
     482:	f0 2d       	mov	r31, r0
		USART_tx_string(ATs);
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
     484:	0f 2e       	mov	r0, r31
     486:	f2 e6       	ldi	r31, 0x62	; 98
     488:	cf 2e       	mov	r12, r31
     48a:	f1 e0       	ldi	r31, 0x01	; 1
     48c:	df 2e       	mov	r13, r31
     48e:	f0 2d       	mov	r31, r0
     490:	0f 2e       	mov	r0, r31
     492:	fe e6       	ldi	r31, 0x6E	; 110
     494:	2f 2e       	mov	r2, r31
     496:	f0 2d       	mov	r31, r0
		USART_tx_string(ATs);
		snprintf(ATs,sizeof(ATs), "\n\r");
     498:	0f 2e       	mov	r0, r31
     49a:	fa e0       	ldi	r31, 0x0A	; 10
     49c:	6f 2e       	mov	r6, r31
     49e:	fd e0       	ldi	r31, 0x0D	; 13
     4a0:	7f 2e       	mov	r7, r31
     4a2:	81 2c       	mov	r8, r1
     4a4:	f0 2d       	mov	r31, r0
	//Start infinite loop
	while(1){
		//grab 3 values, average, and divide by MSB
		//now multiplied by 2 because doubles dont want to print. This way at lease we get usabel values.
		// read raw X acceleration from fifo
		xa1 = MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B)+MPU6050_signed_readreg(MPU60501,0x3B);   		
     4a6:	6b e3       	ldi	r22, 0x3B	; 59
     4a8:	80 ed       	ldi	r24, 0xD0	; 208
     4aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4ae:	8c 01       	movw	r16, r24
     4b0:	6b e3       	ldi	r22, 0x3B	; 59
     4b2:	80 ed       	ldi	r24, 0xD0	; 208
     4b4:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4b8:	08 0f       	add	r16, r24
     4ba:	19 1f       	adc	r17, r25
     4bc:	6b e3       	ldi	r22, 0x3B	; 59
     4be:	80 ed       	ldi	r24, 0xD0	; 208
     4c0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     4c4:	80 0f       	add	r24, r16
     4c6:	91 1f       	adc	r25, r17
		xa1 = (2.00*(xa1/3.00))/2048.00;
     4c8:	bc 01       	movw	r22, r24
     4ca:	99 0f       	add	r25, r25
     4cc:	88 0b       	sbc	r24, r24
     4ce:	99 0b       	sbc	r25, r25
     4d0:	0e 94 65 04 	call	0x8ca	; 0x8ca <__floatsisf>
     4d4:	20 e0       	ldi	r18, 0x00	; 0
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	40 e4       	ldi	r20, 0x40	; 64
     4da:	50 e4       	ldi	r21, 0x40	; 64
     4dc:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
     4e0:	9b 01       	movw	r18, r22
     4e2:	ac 01       	movw	r20, r24
     4e4:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3>
     4e8:	20 e0       	ldi	r18, 0x00	; 0
     4ea:	30 e0       	ldi	r19, 0x00	; 0
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	5a e3       	ldi	r21, 0x3A	; 58
     4f0:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulsf3>
     4f4:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixsfsi>
     4f8:	2b 01       	movw	r4, r22
		// read raw Y acceleration from fifo
		ya1 = MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D)+MPU6050_signed_readreg(MPU60501,0x3D);   
     4fa:	6d e3       	ldi	r22, 0x3D	; 61
     4fc:	80 ed       	ldi	r24, 0xD0	; 208
     4fe:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     502:	8c 01       	movw	r16, r24
     504:	6d e3       	ldi	r22, 0x3D	; 61
     506:	80 ed       	ldi	r24, 0xD0	; 208
     508:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     50c:	08 0f       	add	r16, r24
     50e:	19 1f       	adc	r17, r25
     510:	6d e3       	ldi	r22, 0x3D	; 61
     512:	80 ed       	ldi	r24, 0xD0	; 208
     514:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     518:	80 0f       	add	r24, r16
     51a:	91 1f       	adc	r25, r17
		ya1 = (2.00*(ya1/3.00))/2048.00;
     51c:	bc 01       	movw	r22, r24
     51e:	99 0f       	add	r25, r25
     520:	88 0b       	sbc	r24, r24
     522:	99 0b       	sbc	r25, r25
     524:	0e 94 65 04 	call	0x8ca	; 0x8ca <__floatsisf>
     528:	20 e0       	ldi	r18, 0x00	; 0
     52a:	30 e0       	ldi	r19, 0x00	; 0
     52c:	40 e4       	ldi	r20, 0x40	; 64
     52e:	50 e4       	ldi	r21, 0x40	; 64
     530:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
     534:	9b 01       	movw	r18, r22
     536:	ac 01       	movw	r20, r24
     538:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3>
     53c:	20 e0       	ldi	r18, 0x00	; 0
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	40 e0       	ldi	r20, 0x00	; 0
     542:	5a e3       	ldi	r21, 0x3A	; 58
     544:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulsf3>
     548:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixsfsi>
     54c:	7b 01       	movw	r14, r22
		// read raw Z acceleration from fifo
		za1 = MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F)+MPU6050_signed_readreg(MPU60501,0x3F);   
     54e:	6f e3       	ldi	r22, 0x3F	; 63
     550:	80 ed       	ldi	r24, 0xD0	; 208
     552:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     556:	8c 01       	movw	r16, r24
     558:	6f e3       	ldi	r22, 0x3F	; 63
     55a:	80 ed       	ldi	r24, 0xD0	; 208
     55c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     560:	08 0f       	add	r16, r24
     562:	19 1f       	adc	r17, r25
     564:	6f e3       	ldi	r22, 0x3F	; 63
     566:	80 ed       	ldi	r24, 0xD0	; 208
     568:	0e 94 7e 01 	call	0x2fc	; 0x2fc <MPU6050_signed_readreg>
     56c:	80 0f       	add	r24, r16
     56e:	91 1f       	adc	r25, r17
		za1 = (2.00*(za1/3.00))/2048.00;
     570:	bc 01       	movw	r22, r24
     572:	99 0f       	add	r25, r25
     574:	88 0b       	sbc	r24, r24
     576:	99 0b       	sbc	r25, r25
     578:	0e 94 65 04 	call	0x8ca	; 0x8ca <__floatsisf>
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e4       	ldi	r20, 0x40	; 64
     582:	50 e4       	ldi	r21, 0x40	; 64
     584:	0e 94 bb 03 	call	0x776	; 0x776 <__divsf3>
     588:	9b 01       	movw	r18, r22
     58a:	ac 01       	movw	r20, r24
     58c:	0e 94 4f 03 	call	0x69e	; 0x69e <__addsf3>
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	5a e3       	ldi	r21, 0x3A	; 58
     598:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <__mulsf3>
     59c:	0e 94 2d 04 	call	0x85a	; 0x85a <__fixsfsi>
		USART_tx_string(outs);
		snprintf(outs,sizeof(outs),"Zaxis: %2d\n\r", za1);
		USART_tx_string(outs);
		_delay_ms(1000);*/
		
		if ((za1 == 1) && (xa1 == 0) && (ya1 == 0))
     5a0:	61 30       	cpi	r22, 0x01	; 1
     5a2:	71 05       	cpc	r23, r1
     5a4:	59 f4       	brne	.+22     	; 0x5bc <main+0x224>
     5a6:	41 14       	cp	r4, r1
     5a8:	51 04       	cpc	r5, r1
     5aa:	41 f4       	brne	.+16     	; 0x5bc <main+0x224>
     5ac:	ef 28       	or	r14, r15
     5ae:	91 f0       	breq	.+36     	; 0x5d4 <main+0x23c>
		{
			wifiout = 0;								//application: to see if phone is in landscape mode, vertical
		}
		else if (xa1 == 0)
		{
			wifiout = 100;								//application, to see if phone is in portrait mode, horizontal
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f4 e6       	ldi	r31, 0x64	; 100
     5b4:	9f 2e       	mov	r9, r31
     5b6:	f0 2d       	mov	r31, r0
     5b8:	31 2c       	mov	r3, r1
     5ba:	0c c0       	rjmp	.+24     	; 0x5d4 <main+0x23c>
		
		if ((za1 == 1) && (xa1 == 0) && (ya1 == 0))
		{
			wifiout = wifiout;							//while flat, keep last mode			
		}
		else if (ya1 == 0)
     5bc:	ef 28       	or	r14, r15
     5be:	41 f0       	breq	.+16     	; 0x5d0 <main+0x238>
		{
			wifiout = 0;								//application: to see if phone is in landscape mode, vertical
		}
		else if (xa1 == 0)
     5c0:	45 28       	or	r4, r5
     5c2:	41 f4       	brne	.+16     	; 0x5d4 <main+0x23c>
		{
			wifiout = 100;								//application, to see if phone is in portrait mode, horizontal
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f4 e6       	ldi	r31, 0x64	; 100
     5c8:	9f 2e       	mov	r9, r31
     5ca:	f0 2d       	mov	r31, r0
     5cc:	31 2c       	mov	r3, r1
     5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <main+0x23c>
		{
			wifiout = wifiout;							//while flat, keep last mode			
		}
		else if (ya1 == 0)
		{
			wifiout = 0;								//application: to see if phone is in landscape mode, vertical
     5d0:	91 2c       	mov	r9, r1
     5d2:	31 2c       	mov	r3, r1
     5d4:	2f ef       	ldi	r18, 0xFF	; 255
     5d6:	80 e7       	ldi	r24, 0x70	; 112
     5d8:	92 e0       	ldi	r25, 0x02	; 2
     5da:	21 50       	subi	r18, 0x01	; 1
     5dc:	80 40       	sbci	r24, 0x00	; 0
     5de:	90 40       	sbci	r25, 0x00	; 0
     5e0:	e1 f7       	brne	.-8      	; 0x5da <main+0x242>
     5e2:	00 c0       	rjmp	.+0      	; 0x5e4 <main+0x24c>
     5e4:	00 00       	nop
		//every 25 secs
		//send code
		
	//za1 = 101;
	_delay_ms(100);
		snprintf(ATs,sizeof(ATs), "AT+CIPSTART=0,\"TCP\",\"api.thingspeak.com\",80\r");
     5e6:	e3 e2       	ldi	r30, 0x23	; 35
     5e8:	f1 e0       	ldi	r31, 0x01	; 1
     5ea:	de 01       	movw	r26, r28
     5ec:	8b 2d       	mov	r24, r11
     5ee:	01 90       	ld	r0, Z+
     5f0:	0d 92       	st	X+, r0
     5f2:	8a 95       	dec	r24
     5f4:	e1 f7       	brne	.-8      	; 0x5ee <main+0x256>
		USART_tx_string(ATs);
     5f6:	ce 01       	movw	r24, r28
     5f8:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     5fc:	2f ef       	ldi	r18, 0xFF	; 255
     5fe:	83 ed       	ldi	r24, 0xD3	; 211
     600:	90 e3       	ldi	r25, 0x30	; 48
     602:	21 50       	subi	r18, 0x01	; 1
     604:	80 40       	sbci	r24, 0x00	; 0
     606:	90 40       	sbci	r25, 0x00	; 0
     608:	e1 f7       	brne	.-8      	; 0x602 <main+0x26a>
     60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x274>
     60c:	00 00       	nop
		_delay_ms(2000);
		snprintf(ATs,sizeof(ATs), "AT+CIPSEND=0,125\r");
     60e:	e0 e5       	ldi	r30, 0x50	; 80
     610:	f1 e0       	ldi	r31, 0x01	; 1
     612:	de 01       	movw	r26, r28
     614:	8a 2d       	mov	r24, r10
     616:	01 90       	ld	r0, Z+
     618:	0d 92       	st	X+, r0
     61a:	8a 95       	dec	r24
     61c:	e1 f7       	brne	.-8      	; 0x616 <main+0x27e>
		USART_tx_string(ATs);
     61e:	ce 01       	movw	r24, r28
     620:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     624:	2f ef       	ldi	r18, 0xFF	; 255
     626:	89 e6       	ldi	r24, 0x69	; 105
     628:	98 e1       	ldi	r25, 0x18	; 24
     62a:	21 50       	subi	r18, 0x01	; 1
     62c:	80 40       	sbci	r24, 0x00	; 0
     62e:	90 40       	sbci	r25, 0x00	; 0
     630:	e1 f7       	brne	.-8      	; 0x62a <main+0x292>
     632:	00 c0       	rjmp	.+0      	; 0x634 <main+0x29c>
     634:	00 00       	nop
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
     636:	3f 92       	push	r3
     638:	9f 92       	push	r9
     63a:	df 92       	push	r13
     63c:	cf 92       	push	r12
     63e:	1f 92       	push	r1
     640:	2f 92       	push	r2
     642:	df 93       	push	r29
     644:	cf 93       	push	r28
     646:	0e 94 5e 05 	call	0xabc	; 0xabc <snprintf>
		USART_tx_string(ATs);
     64a:	ce 01       	movw	r24, r28
     64c:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
		snprintf(ATs,sizeof(ATs), "\n\r");
     650:	68 82       	st	Y, r6
     652:	79 82       	std	Y+1, r7	; 0x01
     654:	8a 82       	std	Y+2, r8	; 0x02
     656:	8d b7       	in	r24, 0x3d	; 61
     658:	9e b7       	in	r25, 0x3e	; 62
     65a:	08 96       	adiw	r24, 0x08	; 8
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	9e bf       	out	0x3e, r25	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	8d bf       	out	0x3d, r24	; 61
     666:	06 e1       	ldi	r16, 0x16	; 22
     668:	10 e0       	ldi	r17, 0x00	; 0
		while (i < 22)
		{
			i++;			//needed to push data through.
		USART_tx_string(ATs);
     66a:	ce 01       	movw	r24, r28
     66c:	0e 94 4b 01 	call	0x296	; 0x296 <USART_tx_string>
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	29 e6       	ldi	r18, 0x69	; 105
     674:	88 e1       	ldi	r24, 0x18	; 24
     676:	91 50       	subi	r25, 0x01	; 1
     678:	20 40       	sbci	r18, 0x00	; 0
     67a:	80 40       	sbci	r24, 0x00	; 0
     67c:	e1 f7       	brne	.-8      	; 0x676 <main+0x2de>
     67e:	00 c0       	rjmp	.+0      	; 0x680 <main+0x2e8>
     680:	00 00       	nop
     682:	01 50       	subi	r16, 0x01	; 1
     684:	11 09       	sbc	r17, r1
		USART_tx_string(ATs);
		_delay_ms(1000);
		snprintf(ATs,sizeof(ATs), "GET https://api.thingspeak.com/update?api_key=KX3UE6FR4YHJOFL1&field1=%i HTTP/1.0\n\r", wifiout);
		USART_tx_string(ATs);
		snprintf(ATs,sizeof(ATs), "\n\r");
		while (i < 22)
     686:	89 f7       	brne	.-30     	; 0x66a <main+0x2d2>
     688:	9f ef       	ldi	r25, 0xFF	; 255
     68a:	20 e7       	ldi	r18, 0x70	; 112
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	91 50       	subi	r25, 0x01	; 1
     690:	20 40       	sbci	r18, 0x00	; 0
     692:	80 40       	sbci	r24, 0x00	; 0
     694:	e1 f7       	brne	.-8      	; 0x68e <main+0x2f6>
     696:	00 c0       	rjmp	.+0      	; 0x698 <main+0x300>
     698:	00 00       	nop
     69a:	05 cf       	rjmp	.-502    	; 0x4a6 <main+0x10e>

0000069c <__subsf3>:
     69c:	50 58       	subi	r21, 0x80	; 128

0000069e <__addsf3>:
     69e:	bb 27       	eor	r27, r27
     6a0:	aa 27       	eor	r26, r26
     6a2:	0e 94 66 03 	call	0x6cc	; 0x6cc <__addsf3x>
     6a6:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_round>
     6aa:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_pscA>
     6ae:	38 f0       	brcs	.+14     	; 0x6be <__addsf3+0x20>
     6b0:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_pscB>
     6b4:	20 f0       	brcs	.+8      	; 0x6be <__addsf3+0x20>
     6b6:	39 f4       	brne	.+14     	; 0x6c6 <__addsf3+0x28>
     6b8:	9f 3f       	cpi	r25, 0xFF	; 255
     6ba:	19 f4       	brne	.+6      	; 0x6c2 <__addsf3+0x24>
     6bc:	26 f4       	brtc	.+8      	; 0x6c6 <__addsf3+0x28>
     6be:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_nan>
     6c2:	0e f4       	brtc	.+2      	; 0x6c6 <__addsf3+0x28>
     6c4:	e0 95       	com	r30
     6c6:	e7 fb       	bst	r30, 7
     6c8:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_inf>

000006cc <__addsf3x>:
     6cc:	e9 2f       	mov	r30, r25
     6ce:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_split3>
     6d2:	58 f3       	brcs	.-42     	; 0x6aa <__addsf3+0xc>
     6d4:	ba 17       	cp	r27, r26
     6d6:	62 07       	cpc	r22, r18
     6d8:	73 07       	cpc	r23, r19
     6da:	84 07       	cpc	r24, r20
     6dc:	95 07       	cpc	r25, r21
     6de:	20 f0       	brcs	.+8      	; 0x6e8 <__addsf3x+0x1c>
     6e0:	79 f4       	brne	.+30     	; 0x700 <__addsf3x+0x34>
     6e2:	a6 f5       	brtc	.+104    	; 0x74c <__addsf3x+0x80>
     6e4:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_zero>
     6e8:	0e f4       	brtc	.+2      	; 0x6ec <__addsf3x+0x20>
     6ea:	e0 95       	com	r30
     6ec:	0b 2e       	mov	r0, r27
     6ee:	ba 2f       	mov	r27, r26
     6f0:	a0 2d       	mov	r26, r0
     6f2:	0b 01       	movw	r0, r22
     6f4:	b9 01       	movw	r22, r18
     6f6:	90 01       	movw	r18, r0
     6f8:	0c 01       	movw	r0, r24
     6fa:	ca 01       	movw	r24, r20
     6fc:	a0 01       	movw	r20, r0
     6fe:	11 24       	eor	r1, r1
     700:	ff 27       	eor	r31, r31
     702:	59 1b       	sub	r21, r25
     704:	99 f0       	breq	.+38     	; 0x72c <__addsf3x+0x60>
     706:	59 3f       	cpi	r21, 0xF9	; 249
     708:	50 f4       	brcc	.+20     	; 0x71e <__addsf3x+0x52>
     70a:	50 3e       	cpi	r21, 0xE0	; 224
     70c:	68 f1       	brcs	.+90     	; 0x768 <__addsf3x+0x9c>
     70e:	1a 16       	cp	r1, r26
     710:	f0 40       	sbci	r31, 0x00	; 0
     712:	a2 2f       	mov	r26, r18
     714:	23 2f       	mov	r18, r19
     716:	34 2f       	mov	r19, r20
     718:	44 27       	eor	r20, r20
     71a:	58 5f       	subi	r21, 0xF8	; 248
     71c:	f3 cf       	rjmp	.-26     	; 0x704 <__addsf3x+0x38>
     71e:	46 95       	lsr	r20
     720:	37 95       	ror	r19
     722:	27 95       	ror	r18
     724:	a7 95       	ror	r26
     726:	f0 40       	sbci	r31, 0x00	; 0
     728:	53 95       	inc	r21
     72a:	c9 f7       	brne	.-14     	; 0x71e <__addsf3x+0x52>
     72c:	7e f4       	brtc	.+30     	; 0x74c <__addsf3x+0x80>
     72e:	1f 16       	cp	r1, r31
     730:	ba 0b       	sbc	r27, r26
     732:	62 0b       	sbc	r22, r18
     734:	73 0b       	sbc	r23, r19
     736:	84 0b       	sbc	r24, r20
     738:	ba f0       	brmi	.+46     	; 0x768 <__addsf3x+0x9c>
     73a:	91 50       	subi	r25, 0x01	; 1
     73c:	a1 f0       	breq	.+40     	; 0x766 <__addsf3x+0x9a>
     73e:	ff 0f       	add	r31, r31
     740:	bb 1f       	adc	r27, r27
     742:	66 1f       	adc	r22, r22
     744:	77 1f       	adc	r23, r23
     746:	88 1f       	adc	r24, r24
     748:	c2 f7       	brpl	.-16     	; 0x73a <__addsf3x+0x6e>
     74a:	0e c0       	rjmp	.+28     	; 0x768 <__addsf3x+0x9c>
     74c:	ba 0f       	add	r27, r26
     74e:	62 1f       	adc	r22, r18
     750:	73 1f       	adc	r23, r19
     752:	84 1f       	adc	r24, r20
     754:	48 f4       	brcc	.+18     	; 0x768 <__addsf3x+0x9c>
     756:	87 95       	ror	r24
     758:	77 95       	ror	r23
     75a:	67 95       	ror	r22
     75c:	b7 95       	ror	r27
     75e:	f7 95       	ror	r31
     760:	9e 3f       	cpi	r25, 0xFE	; 254
     762:	08 f0       	brcs	.+2      	; 0x766 <__addsf3x+0x9a>
     764:	b0 cf       	rjmp	.-160    	; 0x6c6 <__addsf3+0x28>
     766:	93 95       	inc	r25
     768:	88 0f       	add	r24, r24
     76a:	08 f0       	brcs	.+2      	; 0x76e <__addsf3x+0xa2>
     76c:	99 27       	eor	r25, r25
     76e:	ee 0f       	add	r30, r30
     770:	97 95       	ror	r25
     772:	87 95       	ror	r24
     774:	08 95       	ret

00000776 <__divsf3>:
     776:	0e 94 cf 03 	call	0x79e	; 0x79e <__divsf3x>
     77a:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_round>
     77e:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_pscB>
     782:	58 f0       	brcs	.+22     	; 0x79a <__divsf3+0x24>
     784:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_pscA>
     788:	40 f0       	brcs	.+16     	; 0x79a <__divsf3+0x24>
     78a:	29 f4       	brne	.+10     	; 0x796 <__divsf3+0x20>
     78c:	5f 3f       	cpi	r21, 0xFF	; 255
     78e:	29 f0       	breq	.+10     	; 0x79a <__divsf3+0x24>
     790:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_inf>
     794:	51 11       	cpse	r21, r1
     796:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_szero>
     79a:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_nan>

0000079e <__divsf3x>:
     79e:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_split3>
     7a2:	68 f3       	brcs	.-38     	; 0x77e <__divsf3+0x8>

000007a4 <__divsf3_pse>:
     7a4:	99 23       	and	r25, r25
     7a6:	b1 f3       	breq	.-20     	; 0x794 <__divsf3+0x1e>
     7a8:	55 23       	and	r21, r21
     7aa:	91 f3       	breq	.-28     	; 0x790 <__divsf3+0x1a>
     7ac:	95 1b       	sub	r25, r21
     7ae:	55 0b       	sbc	r21, r21
     7b0:	bb 27       	eor	r27, r27
     7b2:	aa 27       	eor	r26, r26
     7b4:	62 17       	cp	r22, r18
     7b6:	73 07       	cpc	r23, r19
     7b8:	84 07       	cpc	r24, r20
     7ba:	38 f0       	brcs	.+14     	; 0x7ca <__divsf3_pse+0x26>
     7bc:	9f 5f       	subi	r25, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	22 0f       	add	r18, r18
     7c2:	33 1f       	adc	r19, r19
     7c4:	44 1f       	adc	r20, r20
     7c6:	aa 1f       	adc	r26, r26
     7c8:	a9 f3       	breq	.-22     	; 0x7b4 <__divsf3_pse+0x10>
     7ca:	35 d0       	rcall	.+106    	; 0x836 <__divsf3_pse+0x92>
     7cc:	0e 2e       	mov	r0, r30
     7ce:	3a f0       	brmi	.+14     	; 0x7de <__divsf3_pse+0x3a>
     7d0:	e0 e8       	ldi	r30, 0x80	; 128
     7d2:	32 d0       	rcall	.+100    	; 0x838 <__divsf3_pse+0x94>
     7d4:	91 50       	subi	r25, 0x01	; 1
     7d6:	50 40       	sbci	r21, 0x00	; 0
     7d8:	e6 95       	lsr	r30
     7da:	00 1c       	adc	r0, r0
     7dc:	ca f7       	brpl	.-14     	; 0x7d0 <__divsf3_pse+0x2c>
     7de:	2b d0       	rcall	.+86     	; 0x836 <__divsf3_pse+0x92>
     7e0:	fe 2f       	mov	r31, r30
     7e2:	29 d0       	rcall	.+82     	; 0x836 <__divsf3_pse+0x92>
     7e4:	66 0f       	add	r22, r22
     7e6:	77 1f       	adc	r23, r23
     7e8:	88 1f       	adc	r24, r24
     7ea:	bb 1f       	adc	r27, r27
     7ec:	26 17       	cp	r18, r22
     7ee:	37 07       	cpc	r19, r23
     7f0:	48 07       	cpc	r20, r24
     7f2:	ab 07       	cpc	r26, r27
     7f4:	b0 e8       	ldi	r27, 0x80	; 128
     7f6:	09 f0       	breq	.+2      	; 0x7fa <__divsf3_pse+0x56>
     7f8:	bb 0b       	sbc	r27, r27
     7fa:	80 2d       	mov	r24, r0
     7fc:	bf 01       	movw	r22, r30
     7fe:	ff 27       	eor	r31, r31
     800:	93 58       	subi	r25, 0x83	; 131
     802:	5f 4f       	sbci	r21, 0xFF	; 255
     804:	3a f0       	brmi	.+14     	; 0x814 <__divsf3_pse+0x70>
     806:	9e 3f       	cpi	r25, 0xFE	; 254
     808:	51 05       	cpc	r21, r1
     80a:	78 f0       	brcs	.+30     	; 0x82a <__divsf3_pse+0x86>
     80c:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_inf>
     810:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_szero>
     814:	5f 3f       	cpi	r21, 0xFF	; 255
     816:	e4 f3       	brlt	.-8      	; 0x810 <__divsf3_pse+0x6c>
     818:	98 3e       	cpi	r25, 0xE8	; 232
     81a:	d4 f3       	brlt	.-12     	; 0x810 <__divsf3_pse+0x6c>
     81c:	86 95       	lsr	r24
     81e:	77 95       	ror	r23
     820:	67 95       	ror	r22
     822:	b7 95       	ror	r27
     824:	f7 95       	ror	r31
     826:	9f 5f       	subi	r25, 0xFF	; 255
     828:	c9 f7       	brne	.-14     	; 0x81c <__divsf3_pse+0x78>
     82a:	88 0f       	add	r24, r24
     82c:	91 1d       	adc	r25, r1
     82e:	96 95       	lsr	r25
     830:	87 95       	ror	r24
     832:	97 f9       	bld	r25, 7
     834:	08 95       	ret
     836:	e1 e0       	ldi	r30, 0x01	; 1
     838:	66 0f       	add	r22, r22
     83a:	77 1f       	adc	r23, r23
     83c:	88 1f       	adc	r24, r24
     83e:	bb 1f       	adc	r27, r27
     840:	62 17       	cp	r22, r18
     842:	73 07       	cpc	r23, r19
     844:	84 07       	cpc	r24, r20
     846:	ba 07       	cpc	r27, r26
     848:	20 f0       	brcs	.+8      	; 0x852 <__divsf3_pse+0xae>
     84a:	62 1b       	sub	r22, r18
     84c:	73 0b       	sbc	r23, r19
     84e:	84 0b       	sbc	r24, r20
     850:	ba 0b       	sbc	r27, r26
     852:	ee 1f       	adc	r30, r30
     854:	88 f7       	brcc	.-30     	; 0x838 <__divsf3_pse+0x94>
     856:	e0 95       	com	r30
     858:	08 95       	ret

0000085a <__fixsfsi>:
     85a:	0e 94 34 04 	call	0x868	; 0x868 <__fixunssfsi>
     85e:	68 94       	set
     860:	b1 11       	cpse	r27, r1
     862:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_szero>
     866:	08 95       	ret

00000868 <__fixunssfsi>:
     868:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__fp_splitA>
     86c:	88 f0       	brcs	.+34     	; 0x890 <__fixunssfsi+0x28>
     86e:	9f 57       	subi	r25, 0x7F	; 127
     870:	98 f0       	brcs	.+38     	; 0x898 <__fixunssfsi+0x30>
     872:	b9 2f       	mov	r27, r25
     874:	99 27       	eor	r25, r25
     876:	b7 51       	subi	r27, 0x17	; 23
     878:	b0 f0       	brcs	.+44     	; 0x8a6 <__fixunssfsi+0x3e>
     87a:	e1 f0       	breq	.+56     	; 0x8b4 <__fixunssfsi+0x4c>
     87c:	66 0f       	add	r22, r22
     87e:	77 1f       	adc	r23, r23
     880:	88 1f       	adc	r24, r24
     882:	99 1f       	adc	r25, r25
     884:	1a f0       	brmi	.+6      	; 0x88c <__fixunssfsi+0x24>
     886:	ba 95       	dec	r27
     888:	c9 f7       	brne	.-14     	; 0x87c <__fixunssfsi+0x14>
     88a:	14 c0       	rjmp	.+40     	; 0x8b4 <__fixunssfsi+0x4c>
     88c:	b1 30       	cpi	r27, 0x01	; 1
     88e:	91 f0       	breq	.+36     	; 0x8b4 <__fixunssfsi+0x4c>
     890:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <__fp_zero>
     894:	b1 e0       	ldi	r27, 0x01	; 1
     896:	08 95       	ret
     898:	0c 94 ea 04 	jmp	0x9d4	; 0x9d4 <__fp_zero>
     89c:	67 2f       	mov	r22, r23
     89e:	78 2f       	mov	r23, r24
     8a0:	88 27       	eor	r24, r24
     8a2:	b8 5f       	subi	r27, 0xF8	; 248
     8a4:	39 f0       	breq	.+14     	; 0x8b4 <__fixunssfsi+0x4c>
     8a6:	b9 3f       	cpi	r27, 0xF9	; 249
     8a8:	cc f3       	brlt	.-14     	; 0x89c <__fixunssfsi+0x34>
     8aa:	86 95       	lsr	r24
     8ac:	77 95       	ror	r23
     8ae:	67 95       	ror	r22
     8b0:	b3 95       	inc	r27
     8b2:	d9 f7       	brne	.-10     	; 0x8aa <__fixunssfsi+0x42>
     8b4:	3e f4       	brtc	.+14     	; 0x8c4 <__fixunssfsi+0x5c>
     8b6:	90 95       	com	r25
     8b8:	80 95       	com	r24
     8ba:	70 95       	com	r23
     8bc:	61 95       	neg	r22
     8be:	7f 4f       	sbci	r23, 0xFF	; 255
     8c0:	8f 4f       	sbci	r24, 0xFF	; 255
     8c2:	9f 4f       	sbci	r25, 0xFF	; 255
     8c4:	08 95       	ret

000008c6 <__floatunsisf>:
     8c6:	e8 94       	clt
     8c8:	09 c0       	rjmp	.+18     	; 0x8dc <__floatsisf+0x12>

000008ca <__floatsisf>:
     8ca:	97 fb       	bst	r25, 7
     8cc:	3e f4       	brtc	.+14     	; 0x8dc <__floatsisf+0x12>
     8ce:	90 95       	com	r25
     8d0:	80 95       	com	r24
     8d2:	70 95       	com	r23
     8d4:	61 95       	neg	r22
     8d6:	7f 4f       	sbci	r23, 0xFF	; 255
     8d8:	8f 4f       	sbci	r24, 0xFF	; 255
     8da:	9f 4f       	sbci	r25, 0xFF	; 255
     8dc:	99 23       	and	r25, r25
     8de:	a9 f0       	breq	.+42     	; 0x90a <__stack+0xb>
     8e0:	f9 2f       	mov	r31, r25
     8e2:	96 e9       	ldi	r25, 0x96	; 150
     8e4:	bb 27       	eor	r27, r27
     8e6:	93 95       	inc	r25
     8e8:	f6 95       	lsr	r31
     8ea:	87 95       	ror	r24
     8ec:	77 95       	ror	r23
     8ee:	67 95       	ror	r22
     8f0:	b7 95       	ror	r27
     8f2:	f1 11       	cpse	r31, r1
     8f4:	f8 cf       	rjmp	.-16     	; 0x8e6 <__floatsisf+0x1c>
     8f6:	fa f4       	brpl	.+62     	; 0x936 <__stack+0x37>
     8f8:	bb 0f       	add	r27, r27
     8fa:	11 f4       	brne	.+4      	; 0x900 <__stack+0x1>
     8fc:	60 ff       	sbrs	r22, 0
     8fe:	1b c0       	rjmp	.+54     	; 0x936 <__stack+0x37>
     900:	6f 5f       	subi	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	8f 4f       	sbci	r24, 0xFF	; 255
     906:	9f 4f       	sbci	r25, 0xFF	; 255
     908:	16 c0       	rjmp	.+44     	; 0x936 <__stack+0x37>
     90a:	88 23       	and	r24, r24
     90c:	11 f0       	breq	.+4      	; 0x912 <__stack+0x13>
     90e:	96 e9       	ldi	r25, 0x96	; 150
     910:	11 c0       	rjmp	.+34     	; 0x934 <__stack+0x35>
     912:	77 23       	and	r23, r23
     914:	21 f0       	breq	.+8      	; 0x91e <__stack+0x1f>
     916:	9e e8       	ldi	r25, 0x8E	; 142
     918:	87 2f       	mov	r24, r23
     91a:	76 2f       	mov	r23, r22
     91c:	05 c0       	rjmp	.+10     	; 0x928 <__stack+0x29>
     91e:	66 23       	and	r22, r22
     920:	71 f0       	breq	.+28     	; 0x93e <__stack+0x3f>
     922:	96 e8       	ldi	r25, 0x86	; 134
     924:	86 2f       	mov	r24, r22
     926:	70 e0       	ldi	r23, 0x00	; 0
     928:	60 e0       	ldi	r22, 0x00	; 0
     92a:	2a f0       	brmi	.+10     	; 0x936 <__stack+0x37>
     92c:	9a 95       	dec	r25
     92e:	66 0f       	add	r22, r22
     930:	77 1f       	adc	r23, r23
     932:	88 1f       	adc	r24, r24
     934:	da f7       	brpl	.-10     	; 0x92c <__stack+0x2d>
     936:	88 0f       	add	r24, r24
     938:	96 95       	lsr	r25
     93a:	87 95       	ror	r24
     93c:	97 f9       	bld	r25, 7
     93e:	08 95       	ret

00000940 <__fp_inf>:
     940:	97 f9       	bld	r25, 7
     942:	9f 67       	ori	r25, 0x7F	; 127
     944:	80 e8       	ldi	r24, 0x80	; 128
     946:	70 e0       	ldi	r23, 0x00	; 0
     948:	60 e0       	ldi	r22, 0x00	; 0
     94a:	08 95       	ret

0000094c <__fp_nan>:
     94c:	9f ef       	ldi	r25, 0xFF	; 255
     94e:	80 ec       	ldi	r24, 0xC0	; 192
     950:	08 95       	ret

00000952 <__fp_pscA>:
     952:	00 24       	eor	r0, r0
     954:	0a 94       	dec	r0
     956:	16 16       	cp	r1, r22
     958:	17 06       	cpc	r1, r23
     95a:	18 06       	cpc	r1, r24
     95c:	09 06       	cpc	r0, r25
     95e:	08 95       	ret

00000960 <__fp_pscB>:
     960:	00 24       	eor	r0, r0
     962:	0a 94       	dec	r0
     964:	12 16       	cp	r1, r18
     966:	13 06       	cpc	r1, r19
     968:	14 06       	cpc	r1, r20
     96a:	05 06       	cpc	r0, r21
     96c:	08 95       	ret

0000096e <__fp_round>:
     96e:	09 2e       	mov	r0, r25
     970:	03 94       	inc	r0
     972:	00 0c       	add	r0, r0
     974:	11 f4       	brne	.+4      	; 0x97a <__fp_round+0xc>
     976:	88 23       	and	r24, r24
     978:	52 f0       	brmi	.+20     	; 0x98e <__fp_round+0x20>
     97a:	bb 0f       	add	r27, r27
     97c:	40 f4       	brcc	.+16     	; 0x98e <__fp_round+0x20>
     97e:	bf 2b       	or	r27, r31
     980:	11 f4       	brne	.+4      	; 0x986 <__fp_round+0x18>
     982:	60 ff       	sbrs	r22, 0
     984:	04 c0       	rjmp	.+8      	; 0x98e <__fp_round+0x20>
     986:	6f 5f       	subi	r22, 0xFF	; 255
     988:	7f 4f       	sbci	r23, 0xFF	; 255
     98a:	8f 4f       	sbci	r24, 0xFF	; 255
     98c:	9f 4f       	sbci	r25, 0xFF	; 255
     98e:	08 95       	ret

00000990 <__fp_split3>:
     990:	57 fd       	sbrc	r21, 7
     992:	90 58       	subi	r25, 0x80	; 128
     994:	44 0f       	add	r20, r20
     996:	55 1f       	adc	r21, r21
     998:	59 f0       	breq	.+22     	; 0x9b0 <__fp_splitA+0x10>
     99a:	5f 3f       	cpi	r21, 0xFF	; 255
     99c:	71 f0       	breq	.+28     	; 0x9ba <__fp_splitA+0x1a>
     99e:	47 95       	ror	r20

000009a0 <__fp_splitA>:
     9a0:	88 0f       	add	r24, r24
     9a2:	97 fb       	bst	r25, 7
     9a4:	99 1f       	adc	r25, r25
     9a6:	61 f0       	breq	.+24     	; 0x9c0 <__fp_splitA+0x20>
     9a8:	9f 3f       	cpi	r25, 0xFF	; 255
     9aa:	79 f0       	breq	.+30     	; 0x9ca <__fp_splitA+0x2a>
     9ac:	87 95       	ror	r24
     9ae:	08 95       	ret
     9b0:	12 16       	cp	r1, r18
     9b2:	13 06       	cpc	r1, r19
     9b4:	14 06       	cpc	r1, r20
     9b6:	55 1f       	adc	r21, r21
     9b8:	f2 cf       	rjmp	.-28     	; 0x99e <__fp_split3+0xe>
     9ba:	46 95       	lsr	r20
     9bc:	f1 df       	rcall	.-30     	; 0x9a0 <__fp_splitA>
     9be:	08 c0       	rjmp	.+16     	; 0x9d0 <__fp_splitA+0x30>
     9c0:	16 16       	cp	r1, r22
     9c2:	17 06       	cpc	r1, r23
     9c4:	18 06       	cpc	r1, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	f1 cf       	rjmp	.-30     	; 0x9ac <__fp_splitA+0xc>
     9ca:	86 95       	lsr	r24
     9cc:	71 05       	cpc	r23, r1
     9ce:	61 05       	cpc	r22, r1
     9d0:	08 94       	sec
     9d2:	08 95       	ret

000009d4 <__fp_zero>:
     9d4:	e8 94       	clt

000009d6 <__fp_szero>:
     9d6:	bb 27       	eor	r27, r27
     9d8:	66 27       	eor	r22, r22
     9da:	77 27       	eor	r23, r23
     9dc:	cb 01       	movw	r24, r22
     9de:	97 f9       	bld	r25, 7
     9e0:	08 95       	ret

000009e2 <__mulsf3>:
     9e2:	0e 94 04 05 	call	0xa08	; 0xa08 <__mulsf3x>
     9e6:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__fp_round>
     9ea:	0e 94 a9 04 	call	0x952	; 0x952 <__fp_pscA>
     9ee:	38 f0       	brcs	.+14     	; 0x9fe <__mulsf3+0x1c>
     9f0:	0e 94 b0 04 	call	0x960	; 0x960 <__fp_pscB>
     9f4:	20 f0       	brcs	.+8      	; 0x9fe <__mulsf3+0x1c>
     9f6:	95 23       	and	r25, r21
     9f8:	11 f0       	breq	.+4      	; 0x9fe <__mulsf3+0x1c>
     9fa:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_inf>
     9fe:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__fp_nan>
     a02:	11 24       	eor	r1, r1
     a04:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_szero>

00000a08 <__mulsf3x>:
     a08:	0e 94 c8 04 	call	0x990	; 0x990 <__fp_split3>
     a0c:	70 f3       	brcs	.-36     	; 0x9ea <__mulsf3+0x8>

00000a0e <__mulsf3_pse>:
     a0e:	95 9f       	mul	r25, r21
     a10:	c1 f3       	breq	.-16     	; 0xa02 <__mulsf3+0x20>
     a12:	95 0f       	add	r25, r21
     a14:	50 e0       	ldi	r21, 0x00	; 0
     a16:	55 1f       	adc	r21, r21
     a18:	62 9f       	mul	r22, r18
     a1a:	f0 01       	movw	r30, r0
     a1c:	72 9f       	mul	r23, r18
     a1e:	bb 27       	eor	r27, r27
     a20:	f0 0d       	add	r31, r0
     a22:	b1 1d       	adc	r27, r1
     a24:	63 9f       	mul	r22, r19
     a26:	aa 27       	eor	r26, r26
     a28:	f0 0d       	add	r31, r0
     a2a:	b1 1d       	adc	r27, r1
     a2c:	aa 1f       	adc	r26, r26
     a2e:	64 9f       	mul	r22, r20
     a30:	66 27       	eor	r22, r22
     a32:	b0 0d       	add	r27, r0
     a34:	a1 1d       	adc	r26, r1
     a36:	66 1f       	adc	r22, r22
     a38:	82 9f       	mul	r24, r18
     a3a:	22 27       	eor	r18, r18
     a3c:	b0 0d       	add	r27, r0
     a3e:	a1 1d       	adc	r26, r1
     a40:	62 1f       	adc	r22, r18
     a42:	73 9f       	mul	r23, r19
     a44:	b0 0d       	add	r27, r0
     a46:	a1 1d       	adc	r26, r1
     a48:	62 1f       	adc	r22, r18
     a4a:	83 9f       	mul	r24, r19
     a4c:	a0 0d       	add	r26, r0
     a4e:	61 1d       	adc	r22, r1
     a50:	22 1f       	adc	r18, r18
     a52:	74 9f       	mul	r23, r20
     a54:	33 27       	eor	r19, r19
     a56:	a0 0d       	add	r26, r0
     a58:	61 1d       	adc	r22, r1
     a5a:	23 1f       	adc	r18, r19
     a5c:	84 9f       	mul	r24, r20
     a5e:	60 0d       	add	r22, r0
     a60:	21 1d       	adc	r18, r1
     a62:	82 2f       	mov	r24, r18
     a64:	76 2f       	mov	r23, r22
     a66:	6a 2f       	mov	r22, r26
     a68:	11 24       	eor	r1, r1
     a6a:	9f 57       	subi	r25, 0x7F	; 127
     a6c:	50 40       	sbci	r21, 0x00	; 0
     a6e:	9a f0       	brmi	.+38     	; 0xa96 <__mulsf3_pse+0x88>
     a70:	f1 f0       	breq	.+60     	; 0xaae <__mulsf3_pse+0xa0>
     a72:	88 23       	and	r24, r24
     a74:	4a f0       	brmi	.+18     	; 0xa88 <__mulsf3_pse+0x7a>
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	bb 1f       	adc	r27, r27
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	88 1f       	adc	r24, r24
     a82:	91 50       	subi	r25, 0x01	; 1
     a84:	50 40       	sbci	r21, 0x00	; 0
     a86:	a9 f7       	brne	.-22     	; 0xa72 <__mulsf3_pse+0x64>
     a88:	9e 3f       	cpi	r25, 0xFE	; 254
     a8a:	51 05       	cpc	r21, r1
     a8c:	80 f0       	brcs	.+32     	; 0xaae <__mulsf3_pse+0xa0>
     a8e:	0c 94 a0 04 	jmp	0x940	; 0x940 <__fp_inf>
     a92:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__fp_szero>
     a96:	5f 3f       	cpi	r21, 0xFF	; 255
     a98:	e4 f3       	brlt	.-8      	; 0xa92 <__mulsf3_pse+0x84>
     a9a:	98 3e       	cpi	r25, 0xE8	; 232
     a9c:	d4 f3       	brlt	.-12     	; 0xa92 <__mulsf3_pse+0x84>
     a9e:	86 95       	lsr	r24
     aa0:	77 95       	ror	r23
     aa2:	67 95       	ror	r22
     aa4:	b7 95       	ror	r27
     aa6:	f7 95       	ror	r31
     aa8:	e7 95       	ror	r30
     aaa:	9f 5f       	subi	r25, 0xFF	; 255
     aac:	c1 f7       	brne	.-16     	; 0xa9e <__mulsf3_pse+0x90>
     aae:	fe 2b       	or	r31, r30
     ab0:	88 0f       	add	r24, r24
     ab2:	91 1d       	adc	r25, r1
     ab4:	96 95       	lsr	r25
     ab6:	87 95       	ror	r24
     ab8:	97 f9       	bld	r25, 7
     aba:	08 95       	ret

00000abc <snprintf>:
     abc:	ae e0       	ldi	r26, 0x0E	; 14
     abe:	b0 e0       	ldi	r27, 0x00	; 0
     ac0:	e4 e6       	ldi	r30, 0x64	; 100
     ac2:	f5 e0       	ldi	r31, 0x05	; 5
     ac4:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__prologue_saves__+0x1c>
     ac8:	0d 89       	ldd	r16, Y+21	; 0x15
     aca:	1e 89       	ldd	r17, Y+22	; 0x16
     acc:	8f 89       	ldd	r24, Y+23	; 0x17
     ace:	98 8d       	ldd	r25, Y+24	; 0x18
     ad0:	26 e0       	ldi	r18, 0x06	; 6
     ad2:	2c 83       	std	Y+4, r18	; 0x04
     ad4:	1a 83       	std	Y+2, r17	; 0x02
     ad6:	09 83       	std	Y+1, r16	; 0x01
     ad8:	97 ff       	sbrs	r25, 7
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <snprintf+0x24>
     adc:	80 e0       	ldi	r24, 0x00	; 0
     ade:	90 e8       	ldi	r25, 0x80	; 128
     ae0:	01 97       	sbiw	r24, 0x01	; 1
     ae2:	9e 83       	std	Y+6, r25	; 0x06
     ae4:	8d 83       	std	Y+5, r24	; 0x05
     ae6:	ae 01       	movw	r20, r28
     ae8:	45 5e       	subi	r20, 0xE5	; 229
     aea:	5f 4f       	sbci	r21, 0xFF	; 255
     aec:	69 8d       	ldd	r22, Y+25	; 0x19
     aee:	7a 8d       	ldd	r23, Y+26	; 0x1a
     af0:	ce 01       	movw	r24, r28
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <vfprintf>
     af8:	4d 81       	ldd	r20, Y+5	; 0x05
     afa:	5e 81       	ldd	r21, Y+6	; 0x06
     afc:	57 fd       	sbrc	r21, 7
     afe:	0a c0       	rjmp	.+20     	; 0xb14 <snprintf+0x58>
     b00:	2f 81       	ldd	r18, Y+7	; 0x07
     b02:	38 85       	ldd	r19, Y+8	; 0x08
     b04:	42 17       	cp	r20, r18
     b06:	53 07       	cpc	r21, r19
     b08:	0c f4       	brge	.+2      	; 0xb0c <snprintf+0x50>
     b0a:	9a 01       	movw	r18, r20
     b0c:	f8 01       	movw	r30, r16
     b0e:	e2 0f       	add	r30, r18
     b10:	f3 1f       	adc	r31, r19
     b12:	10 82       	st	Z, r1
     b14:	2e 96       	adiw	r28, 0x0e	; 14
     b16:	e4 e0       	ldi	r30, 0x04	; 4
     b18:	0c 94 36 08 	jmp	0x106c	; 0x106c <__epilogue_restores__+0x1c>

00000b1c <vfprintf>:
     b1c:	ac e0       	ldi	r26, 0x0C	; 12
     b1e:	b0 e0       	ldi	r27, 0x00	; 0
     b20:	e4 e9       	ldi	r30, 0x94	; 148
     b22:	f5 e0       	ldi	r31, 0x05	; 5
     b24:	0c 94 0c 08 	jmp	0x1018	; 0x1018 <__prologue_saves__>
     b28:	7c 01       	movw	r14, r24
     b2a:	6b 01       	movw	r12, r22
     b2c:	8a 01       	movw	r16, r20
     b2e:	fc 01       	movw	r30, r24
     b30:	17 82       	std	Z+7, r1	; 0x07
     b32:	16 82       	std	Z+6, r1	; 0x06
     b34:	83 81       	ldd	r24, Z+3	; 0x03
     b36:	81 ff       	sbrs	r24, 1
     b38:	bd c1       	rjmp	.+890    	; 0xeb4 <vfprintf+0x398>
     b3a:	ce 01       	movw	r24, r28
     b3c:	01 96       	adiw	r24, 0x01	; 1
     b3e:	4c 01       	movw	r8, r24
     b40:	f7 01       	movw	r30, r14
     b42:	93 81       	ldd	r25, Z+3	; 0x03
     b44:	f6 01       	movw	r30, r12
     b46:	93 fd       	sbrc	r25, 3
     b48:	85 91       	lpm	r24, Z+
     b4a:	93 ff       	sbrs	r25, 3
     b4c:	81 91       	ld	r24, Z+
     b4e:	6f 01       	movw	r12, r30
     b50:	88 23       	and	r24, r24
     b52:	09 f4       	brne	.+2      	; 0xb56 <vfprintf+0x3a>
     b54:	ab c1       	rjmp	.+854    	; 0xeac <vfprintf+0x390>
     b56:	85 32       	cpi	r24, 0x25	; 37
     b58:	39 f4       	brne	.+14     	; 0xb68 <vfprintf+0x4c>
     b5a:	93 fd       	sbrc	r25, 3
     b5c:	85 91       	lpm	r24, Z+
     b5e:	93 ff       	sbrs	r25, 3
     b60:	81 91       	ld	r24, Z+
     b62:	6f 01       	movw	r12, r30
     b64:	85 32       	cpi	r24, 0x25	; 37
     b66:	29 f4       	brne	.+10     	; 0xb72 <vfprintf+0x56>
     b68:	b7 01       	movw	r22, r14
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     b70:	e7 cf       	rjmp	.-50     	; 0xb40 <vfprintf+0x24>
     b72:	51 2c       	mov	r5, r1
     b74:	31 2c       	mov	r3, r1
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	20 32       	cpi	r18, 0x20	; 32
     b7a:	a0 f4       	brcc	.+40     	; 0xba4 <vfprintf+0x88>
     b7c:	8b 32       	cpi	r24, 0x2B	; 43
     b7e:	69 f0       	breq	.+26     	; 0xb9a <vfprintf+0x7e>
     b80:	30 f4       	brcc	.+12     	; 0xb8e <vfprintf+0x72>
     b82:	80 32       	cpi	r24, 0x20	; 32
     b84:	59 f0       	breq	.+22     	; 0xb9c <vfprintf+0x80>
     b86:	83 32       	cpi	r24, 0x23	; 35
     b88:	69 f4       	brne	.+26     	; 0xba4 <vfprintf+0x88>
     b8a:	20 61       	ori	r18, 0x10	; 16
     b8c:	2c c0       	rjmp	.+88     	; 0xbe6 <vfprintf+0xca>
     b8e:	8d 32       	cpi	r24, 0x2D	; 45
     b90:	39 f0       	breq	.+14     	; 0xba0 <vfprintf+0x84>
     b92:	80 33       	cpi	r24, 0x30	; 48
     b94:	39 f4       	brne	.+14     	; 0xba4 <vfprintf+0x88>
     b96:	21 60       	ori	r18, 0x01	; 1
     b98:	26 c0       	rjmp	.+76     	; 0xbe6 <vfprintf+0xca>
     b9a:	22 60       	ori	r18, 0x02	; 2
     b9c:	24 60       	ori	r18, 0x04	; 4
     b9e:	23 c0       	rjmp	.+70     	; 0xbe6 <vfprintf+0xca>
     ba0:	28 60       	ori	r18, 0x08	; 8
     ba2:	21 c0       	rjmp	.+66     	; 0xbe6 <vfprintf+0xca>
     ba4:	27 fd       	sbrc	r18, 7
     ba6:	27 c0       	rjmp	.+78     	; 0xbf6 <vfprintf+0xda>
     ba8:	30 ed       	ldi	r19, 0xD0	; 208
     baa:	38 0f       	add	r19, r24
     bac:	3a 30       	cpi	r19, 0x0A	; 10
     bae:	78 f4       	brcc	.+30     	; 0xbce <vfprintf+0xb2>
     bb0:	26 ff       	sbrs	r18, 6
     bb2:	06 c0       	rjmp	.+12     	; 0xbc0 <vfprintf+0xa4>
     bb4:	fa e0       	ldi	r31, 0x0A	; 10
     bb6:	5f 9e       	mul	r5, r31
     bb8:	30 0d       	add	r19, r0
     bba:	11 24       	eor	r1, r1
     bbc:	53 2e       	mov	r5, r19
     bbe:	13 c0       	rjmp	.+38     	; 0xbe6 <vfprintf+0xca>
     bc0:	8a e0       	ldi	r24, 0x0A	; 10
     bc2:	38 9e       	mul	r3, r24
     bc4:	30 0d       	add	r19, r0
     bc6:	11 24       	eor	r1, r1
     bc8:	33 2e       	mov	r3, r19
     bca:	20 62       	ori	r18, 0x20	; 32
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <vfprintf+0xca>
     bce:	8e 32       	cpi	r24, 0x2E	; 46
     bd0:	21 f4       	brne	.+8      	; 0xbda <vfprintf+0xbe>
     bd2:	26 fd       	sbrc	r18, 6
     bd4:	6b c1       	rjmp	.+726    	; 0xeac <vfprintf+0x390>
     bd6:	20 64       	ori	r18, 0x40	; 64
     bd8:	06 c0       	rjmp	.+12     	; 0xbe6 <vfprintf+0xca>
     bda:	8c 36       	cpi	r24, 0x6C	; 108
     bdc:	11 f4       	brne	.+4      	; 0xbe2 <vfprintf+0xc6>
     bde:	20 68       	ori	r18, 0x80	; 128
     be0:	02 c0       	rjmp	.+4      	; 0xbe6 <vfprintf+0xca>
     be2:	88 36       	cpi	r24, 0x68	; 104
     be4:	41 f4       	brne	.+16     	; 0xbf6 <vfprintf+0xda>
     be6:	f6 01       	movw	r30, r12
     be8:	93 fd       	sbrc	r25, 3
     bea:	85 91       	lpm	r24, Z+
     bec:	93 ff       	sbrs	r25, 3
     bee:	81 91       	ld	r24, Z+
     bf0:	6f 01       	movw	r12, r30
     bf2:	81 11       	cpse	r24, r1
     bf4:	c1 cf       	rjmp	.-126    	; 0xb78 <vfprintf+0x5c>
     bf6:	98 2f       	mov	r25, r24
     bf8:	9f 7d       	andi	r25, 0xDF	; 223
     bfa:	95 54       	subi	r25, 0x45	; 69
     bfc:	93 30       	cpi	r25, 0x03	; 3
     bfe:	28 f4       	brcc	.+10     	; 0xc0a <vfprintf+0xee>
     c00:	0c 5f       	subi	r16, 0xFC	; 252
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	ff e3       	ldi	r31, 0x3F	; 63
     c06:	f9 83       	std	Y+1, r31	; 0x01
     c08:	0d c0       	rjmp	.+26     	; 0xc24 <vfprintf+0x108>
     c0a:	83 36       	cpi	r24, 0x63	; 99
     c0c:	31 f0       	breq	.+12     	; 0xc1a <vfprintf+0xfe>
     c0e:	83 37       	cpi	r24, 0x73	; 115
     c10:	71 f0       	breq	.+28     	; 0xc2e <vfprintf+0x112>
     c12:	83 35       	cpi	r24, 0x53	; 83
     c14:	09 f0       	breq	.+2      	; 0xc18 <vfprintf+0xfc>
     c16:	5b c0       	rjmp	.+182    	; 0xcce <vfprintf+0x1b2>
     c18:	22 c0       	rjmp	.+68     	; 0xc5e <vfprintf+0x142>
     c1a:	f8 01       	movw	r30, r16
     c1c:	80 81       	ld	r24, Z
     c1e:	89 83       	std	Y+1, r24	; 0x01
     c20:	0e 5f       	subi	r16, 0xFE	; 254
     c22:	1f 4f       	sbci	r17, 0xFF	; 255
     c24:	44 24       	eor	r4, r4
     c26:	43 94       	inc	r4
     c28:	51 2c       	mov	r5, r1
     c2a:	54 01       	movw	r10, r8
     c2c:	15 c0       	rjmp	.+42     	; 0xc58 <vfprintf+0x13c>
     c2e:	38 01       	movw	r6, r16
     c30:	f2 e0       	ldi	r31, 0x02	; 2
     c32:	6f 0e       	add	r6, r31
     c34:	71 1c       	adc	r7, r1
     c36:	f8 01       	movw	r30, r16
     c38:	a0 80       	ld	r10, Z
     c3a:	b1 80       	ldd	r11, Z+1	; 0x01
     c3c:	26 ff       	sbrs	r18, 6
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <vfprintf+0x12a>
     c40:	65 2d       	mov	r22, r5
     c42:	70 e0       	ldi	r23, 0x00	; 0
     c44:	02 c0       	rjmp	.+4      	; 0xc4a <vfprintf+0x12e>
     c46:	6f ef       	ldi	r22, 0xFF	; 255
     c48:	7f ef       	ldi	r23, 0xFF	; 255
     c4a:	c5 01       	movw	r24, r10
     c4c:	2c 87       	std	Y+12, r18	; 0x0c
     c4e:	0e 94 6b 07 	call	0xed6	; 0xed6 <strnlen>
     c52:	2c 01       	movw	r4, r24
     c54:	83 01       	movw	r16, r6
     c56:	2c 85       	ldd	r18, Y+12	; 0x0c
     c58:	2f 77       	andi	r18, 0x7F	; 127
     c5a:	22 2e       	mov	r2, r18
     c5c:	17 c0       	rjmp	.+46     	; 0xc8c <vfprintf+0x170>
     c5e:	38 01       	movw	r6, r16
     c60:	f2 e0       	ldi	r31, 0x02	; 2
     c62:	6f 0e       	add	r6, r31
     c64:	71 1c       	adc	r7, r1
     c66:	f8 01       	movw	r30, r16
     c68:	a0 80       	ld	r10, Z
     c6a:	b1 80       	ldd	r11, Z+1	; 0x01
     c6c:	26 ff       	sbrs	r18, 6
     c6e:	03 c0       	rjmp	.+6      	; 0xc76 <vfprintf+0x15a>
     c70:	65 2d       	mov	r22, r5
     c72:	70 e0       	ldi	r23, 0x00	; 0
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <vfprintf+0x15e>
     c76:	6f ef       	ldi	r22, 0xFF	; 255
     c78:	7f ef       	ldi	r23, 0xFF	; 255
     c7a:	c5 01       	movw	r24, r10
     c7c:	2c 87       	std	Y+12, r18	; 0x0c
     c7e:	0e 94 60 07 	call	0xec0	; 0xec0 <strnlen_P>
     c82:	2c 01       	movw	r4, r24
     c84:	2c 85       	ldd	r18, Y+12	; 0x0c
     c86:	20 68       	ori	r18, 0x80	; 128
     c88:	22 2e       	mov	r2, r18
     c8a:	83 01       	movw	r16, r6
     c8c:	23 fc       	sbrc	r2, 3
     c8e:	1b c0       	rjmp	.+54     	; 0xcc6 <vfprintf+0x1aa>
     c90:	83 2d       	mov	r24, r3
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	48 16       	cp	r4, r24
     c96:	59 06       	cpc	r5, r25
     c98:	b0 f4       	brcc	.+44     	; 0xcc6 <vfprintf+0x1aa>
     c9a:	b7 01       	movw	r22, r14
     c9c:	80 e2       	ldi	r24, 0x20	; 32
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     ca4:	3a 94       	dec	r3
     ca6:	f4 cf       	rjmp	.-24     	; 0xc90 <vfprintf+0x174>
     ca8:	f5 01       	movw	r30, r10
     caa:	27 fc       	sbrc	r2, 7
     cac:	85 91       	lpm	r24, Z+
     cae:	27 fe       	sbrs	r2, 7
     cb0:	81 91       	ld	r24, Z+
     cb2:	5f 01       	movw	r10, r30
     cb4:	b7 01       	movw	r22, r14
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     cbc:	31 10       	cpse	r3, r1
     cbe:	3a 94       	dec	r3
     cc0:	f1 e0       	ldi	r31, 0x01	; 1
     cc2:	4f 1a       	sub	r4, r31
     cc4:	51 08       	sbc	r5, r1
     cc6:	41 14       	cp	r4, r1
     cc8:	51 04       	cpc	r5, r1
     cca:	71 f7       	brne	.-36     	; 0xca8 <vfprintf+0x18c>
     ccc:	e5 c0       	rjmp	.+458    	; 0xe98 <vfprintf+0x37c>
     cce:	84 36       	cpi	r24, 0x64	; 100
     cd0:	11 f0       	breq	.+4      	; 0xcd6 <vfprintf+0x1ba>
     cd2:	89 36       	cpi	r24, 0x69	; 105
     cd4:	39 f5       	brne	.+78     	; 0xd24 <vfprintf+0x208>
     cd6:	f8 01       	movw	r30, r16
     cd8:	27 ff       	sbrs	r18, 7
     cda:	07 c0       	rjmp	.+14     	; 0xcea <vfprintf+0x1ce>
     cdc:	60 81       	ld	r22, Z
     cde:	71 81       	ldd	r23, Z+1	; 0x01
     ce0:	82 81       	ldd	r24, Z+2	; 0x02
     ce2:	93 81       	ldd	r25, Z+3	; 0x03
     ce4:	0c 5f       	subi	r16, 0xFC	; 252
     ce6:	1f 4f       	sbci	r17, 0xFF	; 255
     ce8:	08 c0       	rjmp	.+16     	; 0xcfa <vfprintf+0x1de>
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	07 2e       	mov	r0, r23
     cf0:	00 0c       	add	r0, r0
     cf2:	88 0b       	sbc	r24, r24
     cf4:	99 0b       	sbc	r25, r25
     cf6:	0e 5f       	subi	r16, 0xFE	; 254
     cf8:	1f 4f       	sbci	r17, 0xFF	; 255
     cfa:	2f 76       	andi	r18, 0x6F	; 111
     cfc:	72 2e       	mov	r7, r18
     cfe:	97 ff       	sbrs	r25, 7
     d00:	09 c0       	rjmp	.+18     	; 0xd14 <vfprintf+0x1f8>
     d02:	90 95       	com	r25
     d04:	80 95       	com	r24
     d06:	70 95       	com	r23
     d08:	61 95       	neg	r22
     d0a:	7f 4f       	sbci	r23, 0xFF	; 255
     d0c:	8f 4f       	sbci	r24, 0xFF	; 255
     d0e:	9f 4f       	sbci	r25, 0xFF	; 255
     d10:	20 68       	ori	r18, 0x80	; 128
     d12:	72 2e       	mov	r7, r18
     d14:	2a e0       	ldi	r18, 0x0A	; 10
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	a4 01       	movw	r20, r8
     d1a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     d1e:	a8 2e       	mov	r10, r24
     d20:	a8 18       	sub	r10, r8
     d22:	44 c0       	rjmp	.+136    	; 0xdac <vfprintf+0x290>
     d24:	85 37       	cpi	r24, 0x75	; 117
     d26:	29 f4       	brne	.+10     	; 0xd32 <vfprintf+0x216>
     d28:	2f 7e       	andi	r18, 0xEF	; 239
     d2a:	b2 2e       	mov	r11, r18
     d2c:	2a e0       	ldi	r18, 0x0A	; 10
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	25 c0       	rjmp	.+74     	; 0xd7c <vfprintf+0x260>
     d32:	f2 2f       	mov	r31, r18
     d34:	f9 7f       	andi	r31, 0xF9	; 249
     d36:	bf 2e       	mov	r11, r31
     d38:	8f 36       	cpi	r24, 0x6F	; 111
     d3a:	c1 f0       	breq	.+48     	; 0xd6c <vfprintf+0x250>
     d3c:	18 f4       	brcc	.+6      	; 0xd44 <vfprintf+0x228>
     d3e:	88 35       	cpi	r24, 0x58	; 88
     d40:	79 f0       	breq	.+30     	; 0xd60 <vfprintf+0x244>
     d42:	b4 c0       	rjmp	.+360    	; 0xeac <vfprintf+0x390>
     d44:	80 37       	cpi	r24, 0x70	; 112
     d46:	19 f0       	breq	.+6      	; 0xd4e <vfprintf+0x232>
     d48:	88 37       	cpi	r24, 0x78	; 120
     d4a:	21 f0       	breq	.+8      	; 0xd54 <vfprintf+0x238>
     d4c:	af c0       	rjmp	.+350    	; 0xeac <vfprintf+0x390>
     d4e:	2f 2f       	mov	r18, r31
     d50:	20 61       	ori	r18, 0x10	; 16
     d52:	b2 2e       	mov	r11, r18
     d54:	b4 fe       	sbrs	r11, 4
     d56:	0d c0       	rjmp	.+26     	; 0xd72 <vfprintf+0x256>
     d58:	8b 2d       	mov	r24, r11
     d5a:	84 60       	ori	r24, 0x04	; 4
     d5c:	b8 2e       	mov	r11, r24
     d5e:	09 c0       	rjmp	.+18     	; 0xd72 <vfprintf+0x256>
     d60:	24 ff       	sbrs	r18, 4
     d62:	0a c0       	rjmp	.+20     	; 0xd78 <vfprintf+0x25c>
     d64:	9f 2f       	mov	r25, r31
     d66:	96 60       	ori	r25, 0x06	; 6
     d68:	b9 2e       	mov	r11, r25
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <vfprintf+0x25c>
     d6c:	28 e0       	ldi	r18, 0x08	; 8
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	05 c0       	rjmp	.+10     	; 0xd7c <vfprintf+0x260>
     d72:	20 e1       	ldi	r18, 0x10	; 16
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <vfprintf+0x260>
     d78:	20 e1       	ldi	r18, 0x10	; 16
     d7a:	32 e0       	ldi	r19, 0x02	; 2
     d7c:	f8 01       	movw	r30, r16
     d7e:	b7 fe       	sbrs	r11, 7
     d80:	07 c0       	rjmp	.+14     	; 0xd90 <vfprintf+0x274>
     d82:	60 81       	ld	r22, Z
     d84:	71 81       	ldd	r23, Z+1	; 0x01
     d86:	82 81       	ldd	r24, Z+2	; 0x02
     d88:	93 81       	ldd	r25, Z+3	; 0x03
     d8a:	0c 5f       	subi	r16, 0xFC	; 252
     d8c:	1f 4f       	sbci	r17, 0xFF	; 255
     d8e:	06 c0       	rjmp	.+12     	; 0xd9c <vfprintf+0x280>
     d90:	60 81       	ld	r22, Z
     d92:	71 81       	ldd	r23, Z+1	; 0x01
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 5f       	subi	r16, 0xFE	; 254
     d9a:	1f 4f       	sbci	r17, 0xFF	; 255
     d9c:	a4 01       	movw	r20, r8
     d9e:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__ultoa_invert>
     da2:	a8 2e       	mov	r10, r24
     da4:	a8 18       	sub	r10, r8
     da6:	fb 2d       	mov	r31, r11
     da8:	ff 77       	andi	r31, 0x7F	; 127
     daa:	7f 2e       	mov	r7, r31
     dac:	76 fe       	sbrs	r7, 6
     dae:	0b c0       	rjmp	.+22     	; 0xdc6 <vfprintf+0x2aa>
     db0:	37 2d       	mov	r19, r7
     db2:	3e 7f       	andi	r19, 0xFE	; 254
     db4:	a5 14       	cp	r10, r5
     db6:	50 f4       	brcc	.+20     	; 0xdcc <vfprintf+0x2b0>
     db8:	74 fe       	sbrs	r7, 4
     dba:	0a c0       	rjmp	.+20     	; 0xdd0 <vfprintf+0x2b4>
     dbc:	72 fc       	sbrc	r7, 2
     dbe:	08 c0       	rjmp	.+16     	; 0xdd0 <vfprintf+0x2b4>
     dc0:	37 2d       	mov	r19, r7
     dc2:	3e 7e       	andi	r19, 0xEE	; 238
     dc4:	05 c0       	rjmp	.+10     	; 0xdd0 <vfprintf+0x2b4>
     dc6:	ba 2c       	mov	r11, r10
     dc8:	37 2d       	mov	r19, r7
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <vfprintf+0x2b6>
     dcc:	ba 2c       	mov	r11, r10
     dce:	01 c0       	rjmp	.+2      	; 0xdd2 <vfprintf+0x2b6>
     dd0:	b5 2c       	mov	r11, r5
     dd2:	34 ff       	sbrs	r19, 4
     dd4:	0d c0       	rjmp	.+26     	; 0xdf0 <vfprintf+0x2d4>
     dd6:	fe 01       	movw	r30, r28
     dd8:	ea 0d       	add	r30, r10
     dda:	f1 1d       	adc	r31, r1
     ddc:	80 81       	ld	r24, Z
     dde:	80 33       	cpi	r24, 0x30	; 48
     de0:	11 f4       	brne	.+4      	; 0xde6 <vfprintf+0x2ca>
     de2:	39 7e       	andi	r19, 0xE9	; 233
     de4:	09 c0       	rjmp	.+18     	; 0xdf8 <vfprintf+0x2dc>
     de6:	32 ff       	sbrs	r19, 2
     de8:	06 c0       	rjmp	.+12     	; 0xdf6 <vfprintf+0x2da>
     dea:	b3 94       	inc	r11
     dec:	b3 94       	inc	r11
     dee:	04 c0       	rjmp	.+8      	; 0xdf8 <vfprintf+0x2dc>
     df0:	83 2f       	mov	r24, r19
     df2:	86 78       	andi	r24, 0x86	; 134
     df4:	09 f0       	breq	.+2      	; 0xdf8 <vfprintf+0x2dc>
     df6:	b3 94       	inc	r11
     df8:	33 fd       	sbrc	r19, 3
     dfa:	13 c0       	rjmp	.+38     	; 0xe22 <vfprintf+0x306>
     dfc:	30 ff       	sbrs	r19, 0
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <vfprintf+0x2f0>
     e00:	5a 2c       	mov	r5, r10
     e02:	b3 14       	cp	r11, r3
     e04:	18 f4       	brcc	.+6      	; 0xe0c <vfprintf+0x2f0>
     e06:	53 0c       	add	r5, r3
     e08:	5b 18       	sub	r5, r11
     e0a:	b3 2c       	mov	r11, r3
     e0c:	b3 14       	cp	r11, r3
     e0e:	68 f4       	brcc	.+26     	; 0xe2a <vfprintf+0x30e>
     e10:	b7 01       	movw	r22, r14
     e12:	80 e2       	ldi	r24, 0x20	; 32
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	3c 87       	std	Y+12, r19	; 0x0c
     e18:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     e1c:	b3 94       	inc	r11
     e1e:	3c 85       	ldd	r19, Y+12	; 0x0c
     e20:	f5 cf       	rjmp	.-22     	; 0xe0c <vfprintf+0x2f0>
     e22:	b3 14       	cp	r11, r3
     e24:	10 f4       	brcc	.+4      	; 0xe2a <vfprintf+0x30e>
     e26:	3b 18       	sub	r3, r11
     e28:	01 c0       	rjmp	.+2      	; 0xe2c <vfprintf+0x310>
     e2a:	31 2c       	mov	r3, r1
     e2c:	34 ff       	sbrs	r19, 4
     e2e:	12 c0       	rjmp	.+36     	; 0xe54 <vfprintf+0x338>
     e30:	b7 01       	movw	r22, r14
     e32:	80 e3       	ldi	r24, 0x30	; 48
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	3c 87       	std	Y+12, r19	; 0x0c
     e38:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     e3c:	3c 85       	ldd	r19, Y+12	; 0x0c
     e3e:	32 ff       	sbrs	r19, 2
     e40:	17 c0       	rjmp	.+46     	; 0xe70 <vfprintf+0x354>
     e42:	31 fd       	sbrc	r19, 1
     e44:	03 c0       	rjmp	.+6      	; 0xe4c <vfprintf+0x330>
     e46:	88 e7       	ldi	r24, 0x78	; 120
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	02 c0       	rjmp	.+4      	; 0xe50 <vfprintf+0x334>
     e4c:	88 e5       	ldi	r24, 0x58	; 88
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	b7 01       	movw	r22, r14
     e52:	0c c0       	rjmp	.+24     	; 0xe6c <vfprintf+0x350>
     e54:	83 2f       	mov	r24, r19
     e56:	86 78       	andi	r24, 0x86	; 134
     e58:	59 f0       	breq	.+22     	; 0xe70 <vfprintf+0x354>
     e5a:	31 ff       	sbrs	r19, 1
     e5c:	02 c0       	rjmp	.+4      	; 0xe62 <vfprintf+0x346>
     e5e:	8b e2       	ldi	r24, 0x2B	; 43
     e60:	01 c0       	rjmp	.+2      	; 0xe64 <vfprintf+0x348>
     e62:	80 e2       	ldi	r24, 0x20	; 32
     e64:	37 fd       	sbrc	r19, 7
     e66:	8d e2       	ldi	r24, 0x2D	; 45
     e68:	b7 01       	movw	r22, r14
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     e70:	a5 14       	cp	r10, r5
     e72:	38 f4       	brcc	.+14     	; 0xe82 <vfprintf+0x366>
     e74:	b7 01       	movw	r22, r14
     e76:	80 e3       	ldi	r24, 0x30	; 48
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     e7e:	5a 94       	dec	r5
     e80:	f7 cf       	rjmp	.-18     	; 0xe70 <vfprintf+0x354>
     e82:	aa 94       	dec	r10
     e84:	f4 01       	movw	r30, r8
     e86:	ea 0d       	add	r30, r10
     e88:	f1 1d       	adc	r31, r1
     e8a:	80 81       	ld	r24, Z
     e8c:	b7 01       	movw	r22, r14
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     e94:	a1 10       	cpse	r10, r1
     e96:	f5 cf       	rjmp	.-22     	; 0xe82 <vfprintf+0x366>
     e98:	33 20       	and	r3, r3
     e9a:	09 f4       	brne	.+2      	; 0xe9e <vfprintf+0x382>
     e9c:	51 ce       	rjmp	.-862    	; 0xb40 <vfprintf+0x24>
     e9e:	b7 01       	movw	r22, r14
     ea0:	80 e2       	ldi	r24, 0x20	; 32
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	0e 94 76 07 	call	0xeec	; 0xeec <fputc>
     ea8:	3a 94       	dec	r3
     eaa:	f6 cf       	rjmp	.-20     	; 0xe98 <vfprintf+0x37c>
     eac:	f7 01       	movw	r30, r14
     eae:	86 81       	ldd	r24, Z+6	; 0x06
     eb0:	97 81       	ldd	r25, Z+7	; 0x07
     eb2:	02 c0       	rjmp	.+4      	; 0xeb8 <vfprintf+0x39c>
     eb4:	8f ef       	ldi	r24, 0xFF	; 255
     eb6:	9f ef       	ldi	r25, 0xFF	; 255
     eb8:	2c 96       	adiw	r28, 0x0c	; 12
     eba:	e2 e1       	ldi	r30, 0x12	; 18
     ebc:	0c 94 28 08 	jmp	0x1050	; 0x1050 <__epilogue_restores__>

00000ec0 <strnlen_P>:
     ec0:	fc 01       	movw	r30, r24
     ec2:	05 90       	lpm	r0, Z+
     ec4:	61 50       	subi	r22, 0x01	; 1
     ec6:	70 40       	sbci	r23, 0x00	; 0
     ec8:	01 10       	cpse	r0, r1
     eca:	d8 f7       	brcc	.-10     	; 0xec2 <strnlen_P+0x2>
     ecc:	80 95       	com	r24
     ece:	90 95       	com	r25
     ed0:	8e 0f       	add	r24, r30
     ed2:	9f 1f       	adc	r25, r31
     ed4:	08 95       	ret

00000ed6 <strnlen>:
     ed6:	fc 01       	movw	r30, r24
     ed8:	61 50       	subi	r22, 0x01	; 1
     eda:	70 40       	sbci	r23, 0x00	; 0
     edc:	01 90       	ld	r0, Z+
     ede:	01 10       	cpse	r0, r1
     ee0:	d8 f7       	brcc	.-10     	; 0xed8 <strnlen+0x2>
     ee2:	80 95       	com	r24
     ee4:	90 95       	com	r25
     ee6:	8e 0f       	add	r24, r30
     ee8:	9f 1f       	adc	r25, r31
     eea:	08 95       	ret

00000eec <fputc>:
     eec:	0f 93       	push	r16
     eee:	1f 93       	push	r17
     ef0:	cf 93       	push	r28
     ef2:	df 93       	push	r29
     ef4:	fb 01       	movw	r30, r22
     ef6:	23 81       	ldd	r18, Z+3	; 0x03
     ef8:	21 fd       	sbrc	r18, 1
     efa:	03 c0       	rjmp	.+6      	; 0xf02 <fputc+0x16>
     efc:	8f ef       	ldi	r24, 0xFF	; 255
     efe:	9f ef       	ldi	r25, 0xFF	; 255
     f00:	28 c0       	rjmp	.+80     	; 0xf52 <fputc+0x66>
     f02:	22 ff       	sbrs	r18, 2
     f04:	16 c0       	rjmp	.+44     	; 0xf32 <fputc+0x46>
     f06:	46 81       	ldd	r20, Z+6	; 0x06
     f08:	57 81       	ldd	r21, Z+7	; 0x07
     f0a:	24 81       	ldd	r18, Z+4	; 0x04
     f0c:	35 81       	ldd	r19, Z+5	; 0x05
     f0e:	42 17       	cp	r20, r18
     f10:	53 07       	cpc	r21, r19
     f12:	44 f4       	brge	.+16     	; 0xf24 <fputc+0x38>
     f14:	a0 81       	ld	r26, Z
     f16:	b1 81       	ldd	r27, Z+1	; 0x01
     f18:	9d 01       	movw	r18, r26
     f1a:	2f 5f       	subi	r18, 0xFF	; 255
     f1c:	3f 4f       	sbci	r19, 0xFF	; 255
     f1e:	31 83       	std	Z+1, r19	; 0x01
     f20:	20 83       	st	Z, r18
     f22:	8c 93       	st	X, r24
     f24:	26 81       	ldd	r18, Z+6	; 0x06
     f26:	37 81       	ldd	r19, Z+7	; 0x07
     f28:	2f 5f       	subi	r18, 0xFF	; 255
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	37 83       	std	Z+7, r19	; 0x07
     f2e:	26 83       	std	Z+6, r18	; 0x06
     f30:	10 c0       	rjmp	.+32     	; 0xf52 <fputc+0x66>
     f32:	eb 01       	movw	r28, r22
     f34:	09 2f       	mov	r16, r25
     f36:	18 2f       	mov	r17, r24
     f38:	00 84       	ldd	r0, Z+8	; 0x08
     f3a:	f1 85       	ldd	r31, Z+9	; 0x09
     f3c:	e0 2d       	mov	r30, r0
     f3e:	09 95       	icall
     f40:	89 2b       	or	r24, r25
     f42:	e1 f6       	brne	.-72     	; 0xefc <fputc+0x10>
     f44:	8e 81       	ldd	r24, Y+6	; 0x06
     f46:	9f 81       	ldd	r25, Y+7	; 0x07
     f48:	01 96       	adiw	r24, 0x01	; 1
     f4a:	9f 83       	std	Y+7, r25	; 0x07
     f4c:	8e 83       	std	Y+6, r24	; 0x06
     f4e:	81 2f       	mov	r24, r17
     f50:	90 2f       	mov	r25, r16
     f52:	df 91       	pop	r29
     f54:	cf 91       	pop	r28
     f56:	1f 91       	pop	r17
     f58:	0f 91       	pop	r16
     f5a:	08 95       	ret

00000f5c <__ultoa_invert>:
     f5c:	fa 01       	movw	r30, r20
     f5e:	aa 27       	eor	r26, r26
     f60:	28 30       	cpi	r18, 0x08	; 8
     f62:	51 f1       	breq	.+84     	; 0xfb8 <__ultoa_invert+0x5c>
     f64:	20 31       	cpi	r18, 0x10	; 16
     f66:	81 f1       	breq	.+96     	; 0xfc8 <__ultoa_invert+0x6c>
     f68:	e8 94       	clt
     f6a:	6f 93       	push	r22
     f6c:	6e 7f       	andi	r22, 0xFE	; 254
     f6e:	6e 5f       	subi	r22, 0xFE	; 254
     f70:	7f 4f       	sbci	r23, 0xFF	; 255
     f72:	8f 4f       	sbci	r24, 0xFF	; 255
     f74:	9f 4f       	sbci	r25, 0xFF	; 255
     f76:	af 4f       	sbci	r26, 0xFF	; 255
     f78:	b1 e0       	ldi	r27, 0x01	; 1
     f7a:	3e d0       	rcall	.+124    	; 0xff8 <__ultoa_invert+0x9c>
     f7c:	b4 e0       	ldi	r27, 0x04	; 4
     f7e:	3c d0       	rcall	.+120    	; 0xff8 <__ultoa_invert+0x9c>
     f80:	67 0f       	add	r22, r23
     f82:	78 1f       	adc	r23, r24
     f84:	89 1f       	adc	r24, r25
     f86:	9a 1f       	adc	r25, r26
     f88:	a1 1d       	adc	r26, r1
     f8a:	68 0f       	add	r22, r24
     f8c:	79 1f       	adc	r23, r25
     f8e:	8a 1f       	adc	r24, r26
     f90:	91 1d       	adc	r25, r1
     f92:	a1 1d       	adc	r26, r1
     f94:	6a 0f       	add	r22, r26
     f96:	71 1d       	adc	r23, r1
     f98:	81 1d       	adc	r24, r1
     f9a:	91 1d       	adc	r25, r1
     f9c:	a1 1d       	adc	r26, r1
     f9e:	20 d0       	rcall	.+64     	; 0xfe0 <__ultoa_invert+0x84>
     fa0:	09 f4       	brne	.+2      	; 0xfa4 <__ultoa_invert+0x48>
     fa2:	68 94       	set
     fa4:	3f 91       	pop	r19
     fa6:	2a e0       	ldi	r18, 0x0A	; 10
     fa8:	26 9f       	mul	r18, r22
     faa:	11 24       	eor	r1, r1
     fac:	30 19       	sub	r19, r0
     fae:	30 5d       	subi	r19, 0xD0	; 208
     fb0:	31 93       	st	Z+, r19
     fb2:	de f6       	brtc	.-74     	; 0xf6a <__ultoa_invert+0xe>
     fb4:	cf 01       	movw	r24, r30
     fb6:	08 95       	ret
     fb8:	46 2f       	mov	r20, r22
     fba:	47 70       	andi	r20, 0x07	; 7
     fbc:	40 5d       	subi	r20, 0xD0	; 208
     fbe:	41 93       	st	Z+, r20
     fc0:	b3 e0       	ldi	r27, 0x03	; 3
     fc2:	0f d0       	rcall	.+30     	; 0xfe2 <__ultoa_invert+0x86>
     fc4:	c9 f7       	brne	.-14     	; 0xfb8 <__ultoa_invert+0x5c>
     fc6:	f6 cf       	rjmp	.-20     	; 0xfb4 <__ultoa_invert+0x58>
     fc8:	46 2f       	mov	r20, r22
     fca:	4f 70       	andi	r20, 0x0F	; 15
     fcc:	40 5d       	subi	r20, 0xD0	; 208
     fce:	4a 33       	cpi	r20, 0x3A	; 58
     fd0:	18 f0       	brcs	.+6      	; 0xfd8 <__ultoa_invert+0x7c>
     fd2:	49 5d       	subi	r20, 0xD9	; 217
     fd4:	31 fd       	sbrc	r19, 1
     fd6:	40 52       	subi	r20, 0x20	; 32
     fd8:	41 93       	st	Z+, r20
     fda:	02 d0       	rcall	.+4      	; 0xfe0 <__ultoa_invert+0x84>
     fdc:	a9 f7       	brne	.-22     	; 0xfc8 <__ultoa_invert+0x6c>
     fde:	ea cf       	rjmp	.-44     	; 0xfb4 <__ultoa_invert+0x58>
     fe0:	b4 e0       	ldi	r27, 0x04	; 4
     fe2:	a6 95       	lsr	r26
     fe4:	97 95       	ror	r25
     fe6:	87 95       	ror	r24
     fe8:	77 95       	ror	r23
     fea:	67 95       	ror	r22
     fec:	ba 95       	dec	r27
     fee:	c9 f7       	brne	.-14     	; 0xfe2 <__ultoa_invert+0x86>
     ff0:	00 97       	sbiw	r24, 0x00	; 0
     ff2:	61 05       	cpc	r22, r1
     ff4:	71 05       	cpc	r23, r1
     ff6:	08 95       	ret
     ff8:	9b 01       	movw	r18, r22
     ffa:	ac 01       	movw	r20, r24
     ffc:	0a 2e       	mov	r0, r26
     ffe:	06 94       	lsr	r0
    1000:	57 95       	ror	r21
    1002:	47 95       	ror	r20
    1004:	37 95       	ror	r19
    1006:	27 95       	ror	r18
    1008:	ba 95       	dec	r27
    100a:	c9 f7       	brne	.-14     	; 0xffe <__ultoa_invert+0xa2>
    100c:	62 0f       	add	r22, r18
    100e:	73 1f       	adc	r23, r19
    1010:	84 1f       	adc	r24, r20
    1012:	95 1f       	adc	r25, r21
    1014:	a0 1d       	adc	r26, r0
    1016:	08 95       	ret

00001018 <__prologue_saves__>:
    1018:	2f 92       	push	r2
    101a:	3f 92       	push	r3
    101c:	4f 92       	push	r4
    101e:	5f 92       	push	r5
    1020:	6f 92       	push	r6
    1022:	7f 92       	push	r7
    1024:	8f 92       	push	r8
    1026:	9f 92       	push	r9
    1028:	af 92       	push	r10
    102a:	bf 92       	push	r11
    102c:	cf 92       	push	r12
    102e:	df 92       	push	r13
    1030:	ef 92       	push	r14
    1032:	ff 92       	push	r15
    1034:	0f 93       	push	r16
    1036:	1f 93       	push	r17
    1038:	cf 93       	push	r28
    103a:	df 93       	push	r29
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
    1040:	ca 1b       	sub	r28, r26
    1042:	db 0b       	sbc	r29, r27
    1044:	0f b6       	in	r0, 0x3f	; 63
    1046:	f8 94       	cli
    1048:	de bf       	out	0x3e, r29	; 62
    104a:	0f be       	out	0x3f, r0	; 63
    104c:	cd bf       	out	0x3d, r28	; 61
    104e:	09 94       	ijmp

00001050 <__epilogue_restores__>:
    1050:	2a 88       	ldd	r2, Y+18	; 0x12
    1052:	39 88       	ldd	r3, Y+17	; 0x11
    1054:	48 88       	ldd	r4, Y+16	; 0x10
    1056:	5f 84       	ldd	r5, Y+15	; 0x0f
    1058:	6e 84       	ldd	r6, Y+14	; 0x0e
    105a:	7d 84       	ldd	r7, Y+13	; 0x0d
    105c:	8c 84       	ldd	r8, Y+12	; 0x0c
    105e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1060:	aa 84       	ldd	r10, Y+10	; 0x0a
    1062:	b9 84       	ldd	r11, Y+9	; 0x09
    1064:	c8 84       	ldd	r12, Y+8	; 0x08
    1066:	df 80       	ldd	r13, Y+7	; 0x07
    1068:	ee 80       	ldd	r14, Y+6	; 0x06
    106a:	fd 80       	ldd	r15, Y+5	; 0x05
    106c:	0c 81       	ldd	r16, Y+4	; 0x04
    106e:	1b 81       	ldd	r17, Y+3	; 0x03
    1070:	aa 81       	ldd	r26, Y+2	; 0x02
    1072:	b9 81       	ldd	r27, Y+1	; 0x01
    1074:	ce 0f       	add	r28, r30
    1076:	d1 1d       	adc	r29, r1
    1078:	0f b6       	in	r0, 0x3f	; 63
    107a:	f8 94       	cli
    107c:	de bf       	out	0x3e, r29	; 62
    107e:	0f be       	out	0x3f, r0	; 63
    1080:	cd bf       	out	0x3d, r28	; 61
    1082:	ed 01       	movw	r28, r26
    1084:	08 95       	ret

00001086 <_exit>:
    1086:	f8 94       	cli

00001088 <__stop_program>:
    1088:	ff cf       	rjmp	.-2      	; 0x1088 <__stop_program>
