
DA5_TASK1_DC_MOTOR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000023a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000023a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000002ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000041e  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000141  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001d1  00000000  00000000  0000083b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000a0c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001ce  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002e4  00000000  00000000  00000c1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000f02  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 f1 00 	jmp	0x1e2	; 0x1e2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_read>:
	return 0;
}

int adc_read()
{
	ADMUX &= 0x00;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	10 82       	st	Z, r1
	ADCSRA |= (1<<ADSC);
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	while((ADCSRA & (1<<ADSC)));
  92:	80 81       	ld	r24, Z
  94:	86 fd       	sbrc	r24, 6
  96:	fd cf       	rjmp	.-6      	; 0x92 <adc_read+0x12>
	return ADC;
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	90 91 79 00 	lds	r25, 0x0079
}
  a0:	08 95       	ret

000000a2 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main(void)
{
	DDRC = 0x20;
  a2:	80 e2       	ldi	r24, 0x20	; 32
  a4:	87 b9       	out	0x07, r24	; 7
	while((ADCSRA & (1<<ADSC)));
	return ADC;
}
void ADC_init(void)
{
	ADCSRA = (1<<ADEN);//|(1<<ADSC);//|(1<<ADIF);
  a6:	80 e8       	ldi	r24, 0x80	; 128
  a8:	80 93 7a 00 	sts	0x007A, r24
	while(1)
	{
		ADC1 = adc_read();
	if ((ADC1 >= 901) && (ADC1 < 1024))
	{
		PORTC = 0x20;	//pc5
  ac:	c0 e2       	ldi	r28, 0x20	; 32
	DDRC = 0x20;
	int ADC1 = 0;
	ADC_init();
	while(1)
	{
		ADC1 = adc_read();
  ae:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
	if ((ADC1 >= 901) && (ADC1 < 1024))
  b2:	9c 01       	movw	r18, r24
  b4:	25 58       	subi	r18, 0x85	; 133
  b6:	33 40       	sbci	r19, 0x03	; 3
  b8:	2b 37       	cpi	r18, 0x7B	; 123
  ba:	31 05       	cpc	r19, r1
  bc:	88 f4       	brcc	.+34     	; 0xe0 <main+0x3e>
	{
		PORTC = 0x20;	//pc5
  be:	c8 b9       	out	0x08, r28	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef e1       	ldi	r30, 0x1F	; 31
  c2:	fe e4       	ldi	r31, 0x4E	; 78
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <main+0x22>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x28>
  ca:	00 00       	nop
		_delay_ms(10);
		PORTC = 0x00;
  cc:	18 b8       	out	0x08, r1	; 8
  ce:	ff ef       	ldi	r31, 0xFF	; 255
  d0:	24 e3       	ldi	r18, 0x34	; 52
  d2:	3c e0       	ldi	r19, 0x0C	; 12
  d4:	f1 50       	subi	r31, 0x01	; 1
  d6:	20 40       	sbci	r18, 0x00	; 0
  d8:	30 40       	sbci	r19, 0x00	; 0
  da:	e1 f7       	brne	.-8      	; 0xd4 <main+0x32>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x3c>
  de:	00 00       	nop
		_delay_ms(500);
	}
	if ((ADC1 >= 700) && (ADC1 < 901))
  e0:	9c 01       	movw	r18, r24
  e2:	2c 5b       	subi	r18, 0xBC	; 188
  e4:	32 40       	sbci	r19, 0x02	; 2
  e6:	29 3c       	cpi	r18, 0xC9	; 201
  e8:	31 05       	cpc	r19, r1
  ea:	a0 f4       	brcc	.+40     	; 0x114 <main+0x72>
	{
		PORTC = 0x20;	//pc5
  ec:	c8 b9       	out	0x08, r28	; 8
  ee:	4f eb       	ldi	r20, 0xBF	; 191
  f0:	e4 ed       	ldi	r30, 0xD4	; 212
  f2:	f1 e0       	ldi	r31, 0x01	; 1
  f4:	41 50       	subi	r20, 0x01	; 1
  f6:	e0 40       	sbci	r30, 0x00	; 0
  f8:	f0 40       	sbci	r31, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x52>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x5c>
  fe:	00 00       	nop
		_delay_ms(75);
		PORTC = 0x00;
 100:	18 b8       	out	0x08, r1	; 8
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	34 e3       	ldi	r19, 0x34	; 52
 106:	4c e0       	ldi	r20, 0x0C	; 12
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	30 40       	sbci	r19, 0x00	; 0
 10c:	40 40       	sbci	r20, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x66>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x70>
 112:	00 00       	nop
		_delay_ms(500);
	}
	if ((ADC1 < 700)&&(ADC1>=500))
 114:	9c 01       	movw	r18, r24
 116:	24 5f       	subi	r18, 0xF4	; 244
 118:	31 40       	sbci	r19, 0x01	; 1
 11a:	28 3c       	cpi	r18, 0xC8	; 200
 11c:	31 05       	cpc	r19, r1
 11e:	a0 f4       	brcc	.+40     	; 0x148 <main+0xa6>
	{
		PORTC = 0x20;	//pc5
 120:	c8 b9       	out	0x08, r28	; 8
 122:	ef e7       	ldi	r30, 0x7F	; 127
 124:	f9 ea       	ldi	r31, 0xA9	; 169
 126:	23 e0       	ldi	r18, 0x03	; 3
 128:	e1 50       	subi	r30, 0x01	; 1
 12a:	f0 40       	sbci	r31, 0x00	; 0
 12c:	20 40       	sbci	r18, 0x00	; 0
 12e:	e1 f7       	brne	.-8      	; 0x128 <main+0x86>
 130:	00 c0       	rjmp	.+0      	; 0x132 <main+0x90>
 132:	00 00       	nop
		_delay_ms(150);
		PORTC = 0x00;
 134:	18 b8       	out	0x08, r1	; 8
 136:	3f ef       	ldi	r19, 0xFF	; 255
 138:	44 e3       	ldi	r20, 0x34	; 52
 13a:	ec e0       	ldi	r30, 0x0C	; 12
 13c:	31 50       	subi	r19, 0x01	; 1
 13e:	40 40       	sbci	r20, 0x00	; 0
 140:	e0 40       	sbci	r30, 0x00	; 0
 142:	e1 f7       	brne	.-8      	; 0x13c <main+0x9a>
 144:	00 c0       	rjmp	.+0      	; 0x146 <main+0xa4>
 146:	00 00       	nop
		_delay_ms(500);
	}
	if ((ADC1 < 500)&&(ADC1>=300))
 148:	9c 01       	movw	r18, r24
 14a:	2c 52       	subi	r18, 0x2C	; 44
 14c:	31 40       	sbci	r19, 0x01	; 1
 14e:	28 3c       	cpi	r18, 0xC8	; 200
 150:	31 05       	cpc	r19, r1
 152:	a0 f4       	brcc	.+40     	; 0x17c <main+0xda>
	{
		PORTC = 0x20;	//pc5
 154:	c8 b9       	out	0x08, r28	; 8
 156:	ff ef       	ldi	r31, 0xFF	; 255
 158:	22 e5       	ldi	r18, 0x52	; 82
 15a:	37 e0       	ldi	r19, 0x07	; 7
 15c:	f1 50       	subi	r31, 0x01	; 1
 15e:	20 40       	sbci	r18, 0x00	; 0
 160:	30 40       	sbci	r19, 0x00	; 0
 162:	e1 f7       	brne	.-8      	; 0x15c <main+0xba>
 164:	00 c0       	rjmp	.+0      	; 0x166 <main+0xc4>
 166:	00 00       	nop
		_delay_ms(300);
		PORTC = 0x00;
 168:	18 b8       	out	0x08, r1	; 8
 16a:	4f ef       	ldi	r20, 0xFF	; 255
 16c:	e4 e3       	ldi	r30, 0x34	; 52
 16e:	fc e0       	ldi	r31, 0x0C	; 12
 170:	41 50       	subi	r20, 0x01	; 1
 172:	e0 40       	sbci	r30, 0x00	; 0
 174:	f0 40       	sbci	r31, 0x00	; 0
 176:	e1 f7       	brne	.-8      	; 0x170 <main+0xce>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xd8>
 17a:	00 00       	nop
		_delay_ms(500);
	}
	if ((ADC1 < 300)&&(ADC1>=150))
 17c:	9c 01       	movw	r18, r24
 17e:	26 59       	subi	r18, 0x96	; 150
 180:	31 09       	sbc	r19, r1
 182:	26 39       	cpi	r18, 0x96	; 150
 184:	31 05       	cpc	r19, r1
 186:	a0 f4       	brcc	.+40     	; 0x1b0 <main+0x10e>
	{
		PORTC = 0x20;	//pc5
 188:	c8 b9       	out	0x08, r28	; 8
 18a:	2f ef       	ldi	r18, 0xFF	; 255
 18c:	34 e3       	ldi	r19, 0x34	; 52
 18e:	4c e0       	ldi	r20, 0x0C	; 12
 190:	21 50       	subi	r18, 0x01	; 1
 192:	30 40       	sbci	r19, 0x00	; 0
 194:	40 40       	sbci	r20, 0x00	; 0
 196:	e1 f7       	brne	.-8      	; 0x190 <main+0xee>
 198:	00 c0       	rjmp	.+0      	; 0x19a <main+0xf8>
 19a:	00 00       	nop
		_delay_ms(500);
		PORTC = 0x00;
 19c:	18 b8       	out	0x08, r1	; 8
 19e:	ef ef       	ldi	r30, 0xFF	; 255
 1a0:	f5 ea       	ldi	r31, 0xA5	; 165
 1a2:	2e e0       	ldi	r18, 0x0E	; 14
 1a4:	e1 50       	subi	r30, 0x01	; 1
 1a6:	f0 40       	sbci	r31, 0x00	; 0
 1a8:	20 40       	sbci	r18, 0x00	; 0
 1aa:	e1 f7       	brne	.-8      	; 0x1a4 <main+0x102>
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <main+0x10c>
 1ae:	00 00       	nop
		_delay_ms(600);
	}
	if ((ADC1 < 150)&&(ADC1>=0))
 1b0:	86 39       	cpi	r24, 0x96	; 150
 1b2:	91 05       	cpc	r25, r1
 1b4:	08 f0       	brcs	.+2      	; 0x1b8 <main+0x116>
 1b6:	7b cf       	rjmp	.-266    	; 0xae <main+0xc>
	{
		PORTC = 0x20;	//pc5
 1b8:	c8 b9       	out	0x08, r28	; 8
 1ba:	3f ef       	ldi	r19, 0xFF	; 255
 1bc:	45 ea       	ldi	r20, 0xA5	; 165
 1be:	8e e0       	ldi	r24, 0x0E	; 14
 1c0:	31 50       	subi	r19, 0x01	; 1
 1c2:	40 40       	sbci	r20, 0x00	; 0
 1c4:	80 40       	sbci	r24, 0x00	; 0
 1c6:	e1 f7       	brne	.-8      	; 0x1c0 <main+0x11e>
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <main+0x128>
 1ca:	00 00       	nop
		_delay_ms(600);
		PORTC = 0x00;
 1cc:	18 b8       	out	0x08, r1	; 8
 1ce:	9f ef       	ldi	r25, 0xFF	; 255
 1d0:	e6 e1       	ldi	r30, 0x16	; 22
 1d2:	f1 e1       	ldi	r31, 0x11	; 17
 1d4:	91 50       	subi	r25, 0x01	; 1
 1d6:	e0 40       	sbci	r30, 0x00	; 0
 1d8:	f0 40       	sbci	r31, 0x00	; 0
 1da:	e1 f7       	brne	.-8      	; 0x1d4 <main+0x132>
 1dc:	00 c0       	rjmp	.+0      	; 0x1de <main+0x13c>
 1de:	00 00       	nop
 1e0:	66 cf       	rjmp	.-308    	; 0xae <main+0xc>

000001e2 <_exit>:
 1e2:	f8 94       	cli

000001e4 <__stop_program>:
 1e4:	ff cf       	rjmp	.-2      	; 0x1e4 <__stop_program>
