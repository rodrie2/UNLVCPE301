
DA5_TASK3_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001a8  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000012d  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000015e  00000000  00000000  000004bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  0000061c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c5  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000032  00000000  00000000  00000825  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00000857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 51 00 	call	0xa2	; 0xa2 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <adc_read>:
   return 0;
   }

   int adc_read()
   {
	   ADMUX &= 0x00;
  80:	ec e7       	ldi	r30, 0x7C	; 124
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	10 82       	st	Z, r1
	   ADCSRA |= (1<<ADSC);
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
	   while((ADCSRA & (1<<ADSC)));
  92:	80 81       	ld	r24, Z
  94:	86 fd       	sbrc	r24, 6
  96:	fd cf       	rjmp	.-6      	; 0x92 <adc_read+0x12>
	   return ADC;
  98:	80 91 78 00 	lds	r24, 0x0078
  9c:	90 91 79 00 	lds	r25, 0x0079
   }
  a0:	08 95       	ret

000000a2 <main>:

int main()
{
   //DDRD = 0x00;
  // PORTD = 0xFF;
   DDRB = 0xFF;
  a2:	8f ef       	ldi	r24, 0xFF	; 255
  a4:	84 b9       	out	0x04, r24	; 4
   ICR1 = 20000;
  a6:	80 e2       	ldi	r24, 0x20	; 32
  a8:	9e e4       	ldi	r25, 0x4E	; 78
  aa:	90 93 87 00 	sts	0x0087, r25
  ae:	80 93 86 00 	sts	0x0086, r24
   
   TCCR1A |= (1<<COM1A1)|(1<<WGM11);
  b2:	e0 e8       	ldi	r30, 0x80	; 128
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	82 68       	ori	r24, 0x82	; 130
  ba:	80 83       	st	Z, r24
   TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11);
  bc:	e1 e8       	ldi	r30, 0x81	; 129
  be:	f0 e0       	ldi	r31, 0x00	; 0
  c0:	80 81       	ld	r24, Z
  c2:	8a 61       	ori	r24, 0x1A	; 26
  c4:	80 83       	st	Z, r24
	   while((ADCSRA & (1<<ADSC)));
	   return ADC;
   }
   void ADC_init(void)
   {
	   ADCSRA = (1<<ADEN);//|(1<<ADSC);//|(1<<ADIF);
  c6:	80 e8       	ldi	r24, 0x80	; 128
  c8:	80 93 7a 00 	sts	0x007A, r24
   ADC_init();
   while(1)
   {
	   ADC1 = adc_read();
	   _delay_ms(20);
	   OCR1A = 600 + (2*ADC1);
  cc:	c8 e8       	ldi	r28, 0x88	; 136
  ce:	d0 e0       	ldi	r29, 0x00	; 0
   TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11);
   int ADC1 = 0;
   ADC_init();
   while(1)
   {
	   ADC1 = adc_read();
  d0:	0e 94 40 00 	call	0x80	; 0x80 <adc_read>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	ef e3       	ldi	r30, 0x3F	; 63
  d6:	fc e9       	ldi	r31, 0x9C	; 156
  d8:	31 97       	sbiw	r30, 0x01	; 1
  da:	f1 f7       	brne	.-4      	; 0xd8 <main+0x36>
  dc:	00 c0       	rjmp	.+0      	; 0xde <main+0x3c>
  de:	00 00       	nop
	   _delay_ms(20);
	   OCR1A = 600 + (2*ADC1);
  e0:	84 5d       	subi	r24, 0xD4	; 212
  e2:	9e 4f       	sbci	r25, 0xFE	; 254
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	99 83       	std	Y+1, r25	; 0x01
  ea:	88 83       	st	Y, r24
	   if ((ADC1 < 150)&&(ADC1>=0))
	   {
		   _delay_ms(20);
		   OCR1A = 800;
	   }*/
   }
  ec:	f1 cf       	rjmp	.-30     	; 0xd0 <main+0x2e>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
