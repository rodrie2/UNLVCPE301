
DA5_TASK3_SERVO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000020  00000000  00000000  00000164  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000014d  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e3  00000000  00000000  000002d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000150  00000000  00000000  000003b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000024  00000000  00000000  00000504  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000019a  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000048  00000000  00000000  000006c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000010  00000000  00000000  0000070a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <avr/io.h>
#include <util/delay.h>

int main()
{
   DDRD = 0x00;
  80:	1a b8       	out	0x0a, r1	; 10
  // PORTD = 0xFF;
   DDRB = 0xFF;
  82:	8f ef       	ldi	r24, 0xFF	; 255
  84:	84 b9       	out	0x04, r24	; 4
   ICR1 = 20000;
  86:	80 e2       	ldi	r24, 0x20	; 32
  88:	9e e4       	ldi	r25, 0x4E	; 78
  8a:	90 93 87 00 	sts	0x0087, r25
  8e:	80 93 86 00 	sts	0x0086, r24
   
   TCCR1A |= (1<<COM1A1)|(1<<WGM11);
  92:	e0 e8       	ldi	r30, 0x80	; 128
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	82 68       	ori	r24, 0x82	; 130
  9a:	80 83       	st	Z, r24
   TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11);
  9c:	e1 e8       	ldi	r30, 0x81	; 129
  9e:	f0 e0       	ldi	r31, 0x00	; 0
  a0:	80 81       	ld	r24, Z
  a2:	8a 61       	ori	r24, 0x1A	; 26
  a4:	80 83       	st	Z, r24
   {
	   _delay_ms(20);
	   OCR1A = 2900;
   }
   _delay_ms(20);
   OCR1A = 400;
  a6:	e8 e8       	ldi	r30, 0x88	; 136
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 e9       	ldi	r24, 0x90	; 144
  ac:	91 e0       	ldi	r25, 0x01	; 1
   while (1)
   {
  while (PIND == 0x02)
   {
	   _delay_ms(20);
	   OCR1A = 2900;
  ae:	24 e5       	ldi	r18, 0x54	; 84
  b0:	3b e0       	ldi	r19, 0x0B	; 11
  b2:	08 c0       	rjmp	.+16     	; 0xc4 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	af e3       	ldi	r26, 0x3F	; 63
  b6:	bc e9       	ldi	r27, 0x9C	; 156
  b8:	11 97       	sbiw	r26, 0x01	; 1
  ba:	f1 f7       	brne	.-4      	; 0xb8 <main+0x38>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <main+0x3e>
  be:	00 00       	nop
  c0:	31 83       	std	Z+1, r19	; 0x01
  c2:	20 83       	st	Z, r18
   
   TCCR1A |= (1<<COM1A1)|(1<<WGM11);
   TCCR1B |= (1<<WGM12)|(1<<WGM13)|(1<<CS11);
   while (1)
   {
  while (PIND == 0x02)
  c4:	49 b1       	in	r20, 0x09	; 9
  c6:	42 30       	cpi	r20, 0x02	; 2
  c8:	a9 f3       	breq	.-22     	; 0xb4 <main+0x34>
  ca:	af e3       	ldi	r26, 0x3F	; 63
  cc:	bc e9       	ldi	r27, 0x9C	; 156
  ce:	11 97       	sbiw	r26, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x4e>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <main+0x54>
  d4:	00 00       	nop
   {
	   _delay_ms(20);
	   OCR1A = 2900;
   }
   _delay_ms(20);
   OCR1A = 400;
  d6:	91 83       	std	Z+1, r25	; 0x01
  d8:	80 83       	st	Z, r24
   }
  da:	f4 cf       	rjmp	.-24     	; 0xc4 <main+0x44>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
